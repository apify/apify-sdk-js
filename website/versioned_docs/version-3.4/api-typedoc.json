{
	"id": 0,
	"name": "apify",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 322,
			"name": "LogLevel",
			"variant": "declaration",
			"kind": 8,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 328,
					"name": "DEBUG",
					"variant": "declaration",
					"kind": 16,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 9,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": 5
					}
				},
				{
					"id": 324,
					"name": "ERROR",
					"variant": "declaration",
					"kind": 16,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 5,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": 1
					}
				},
				{
					"id": 327,
					"name": "INFO",
					"variant": "declaration",
					"kind": 16,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 8,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": 4
					}
				},
				{
					"id": 323,
					"name": "OFF",
					"variant": "declaration",
					"kind": 16,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 4,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": 0
					}
				},
				{
					"id": 329,
					"name": "PERF",
					"variant": "declaration",
					"kind": 16,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 10,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": 6
					}
				},
				{
					"id": 325,
					"name": "SOFT_FAIL",
					"variant": "declaration",
					"kind": 16,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 6,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": 2
					}
				},
				{
					"id": 326,
					"name": "WARNING",
					"variant": "declaration",
					"kind": 16,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 7,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": 3
					}
				}
			],
			"groups": [
				{
					"title": "Enumeration Members",
					"children": [
						328,
						324,
						327,
						323,
						329,
						325,
						326
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@apify/log/cjs/index.d.ts",
					"line": 3,
					"character": 13
				}
			]
		},
		{
			"id": 902,
			"name": "Actor",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "code",
						"text": "`Actor`"
					},
					{
						"kind": "text",
						"text": " class serves as an alternative approach to the static helpers exported from the package. It allows to pass configuration\nthat will be used on the instance methods. Environment variables will have precedence over this configuration.\nSee "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "Configuration"
					},
					{
						"kind": "text",
						"text": " for details about what can be configured and what are the default values."
					}
				]
			},
			"children": [
				{
					"id": 1034,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 93,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L93"
						}
					],
					"signatures": [
						{
							"id": 1035,
							"name": "new Actor",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 93,
									"character": 4,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L93"
								}
							],
							"typeParameters": [
								{
									"id": 1036,
									"name": "Data",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"parameters": [
								{
									"id": 1037,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
											"qualifiedName": "ConfigurationOptions"
										},
										"name": "ConfigurationOptions",
										"package": "@crawlee/core"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": 902,
								"typeArguments": [
									{
										"type": "reference",
										"target": 1036,
										"name": "Data",
										"package": "apify",
										"qualifiedName": "Actor.Data",
										"refersToTypeParameter": true
									}
								],
								"name": "Actor",
								"package": "apify"
							}
						}
					]
				},
				{
					"id": 1041,
					"name": "initialized",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the Actor instance was initialized. This is set by calling "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "Actor.init"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 78,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L78"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 1028,
					"name": "apifyClient",
					"variant": "declaration",
					"kind": 262144,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1708,
							"character": 15,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1708"
						}
					],
					"getSignature": {
						"id": 1029,
						"name": "apifyClient",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Default "
								},
								{
									"kind": "inline-tag",
									"tag": "@apilink",
									"text": "ApifyClient"
								},
								{
									"kind": "text",
									"text": " instance."
								}
							]
						},
						"sources": [
							{
								"fileName": "packages/apify/src/actor.ts",
								"line": 1708,
								"character": 15,
								"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1708"
							}
						],
						"type": {
							"type": "reference",
							"target": 817,
							"name": "ApifyClient",
							"package": "apify-client"
						}
					}
				},
				{
					"id": 1030,
					"name": "config",
					"variant": "declaration",
					"kind": 262144,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1713,
							"character": 15,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1713"
						}
					],
					"getSignature": {
						"id": 1031,
						"name": "config",
						"variant": "signature",
						"kind": 524288,
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Default "
								},
								{
									"kind": "inline-tag",
									"tag": "@apilink",
									"text": "Configuration"
								},
								{
									"kind": "text",
									"text": " instance."
								}
							]
						},
						"sources": [
							{
								"fileName": "packages/apify/src/actor.ts",
								"line": 1713,
								"character": 15,
								"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1713"
							}
						],
						"type": {
							"type": "reference",
							"target": 1422,
							"name": "Configuration",
							"package": "apify"
						}
					}
				},
				{
					"id": 1132,
					"name": "getInputOrThrow",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 846,
							"character": 10,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L846"
						}
					],
					"signatures": [
						{
							"id": 1133,
							"name": "getInputOrThrow",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets the Actor input value just like the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.getInput"
									},
									{
										"kind": "text",
										"text": " method,\nbut throws if it is not found."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 846,
									"character": 10,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L846"
								}
							],
							"typeParameters": [
								{
									"id": 1134,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"default": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
													"qualifiedName": "Dictionary"
												},
												"name": "Dictionary",
												"package": "@crawlee/types"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@types/node/ts5.6/buffer.buffer.d.ts",
													"qualifiedName": "__global.Buffer"
												},
												"name": "Buffer",
												"package": "@types/node",
												"qualifiedName": "__global.Buffer"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1134,
										"name": "T",
										"package": "apify",
										"refersToTypeParameter": true
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1162,
					"name": "useState",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1079,
							"character": 10,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1079"
						}
					],
					"signatures": [
						{
							"id": 1163,
							"name": "useState",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Easily create and manage state values. All state values are automatically persisted.\n\nValues can be modified by simply using the assignment operator."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1079,
									"character": 10,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1079"
								}
							],
							"typeParameters": [
								{
									"id": 1164,
									"name": "State",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"parameters": [
								{
									"id": 1165,
									"name": "name",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the store to use."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1166,
									"name": "defaultValue",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If the store does not yet have a value in it, the value will be initialized with the "
											},
											{
												"kind": "code",
												"text": "`defaultValue`"
											},
											{
												"kind": "text",
												"text": " you provide."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1164,
										"name": "State",
										"package": "apify",
										"refersToTypeParameter": true
									},
									"defaultValue": "..."
								},
								{
									"id": 1167,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An optional object parameter where a custom "
											},
											{
												"kind": "code",
												"text": "`keyValueStoreName`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " can be passed in."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/storages/utils.ts",
											"qualifiedName": "UseStateOptions"
										},
										"name": "UseStateOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1164,
										"name": "State",
										"package": "apify",
										"refersToTypeParameter": true
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 955,
					"name": "abort",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1320,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1320"
						}
					],
					"signatures": [
						{
							"id": 956,
							"name": "abort",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Aborts given Actor run on the Apify platform using the current user account (determined by the "
									},
									{
										"kind": "code",
										"text": "`APIFY_TOKEN`"
									},
									{
										"kind": "text",
										"text": " environment variable).\n\nThe result of the function is an "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "ActorRun"
									},
									{
										"kind": "text",
										"text": " object that contains details about the Actor run.\n\nFor more information about Actors, read the\n[documentation](https://docs.apify.com/actor).\n\n**Example usage:**\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst run = await Actor.abort(runId);\n```"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1320,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1320"
								}
							],
							"parameters": [
								{
									"id": 957,
									"name": "runId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 958,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 1247,
										"name": "AbortOptions",
										"package": "apify"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1269,
										"name": "ActorRun",
										"package": "apify-client"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 967,
					"name": "addWebhook",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1361,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1361"
						}
					],
					"signatures": [
						{
							"id": 968,
							"name": "addWebhook",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates an ad-hoc webhook for the current Actor run, which lets you receive a notification when the Actor run finished or failed.\nFor more information about Apify Actor webhooks, please see the [documentation](https://docs.apify.com/webhooks).\n\nNote that webhooks are only supported for Actors running on the Apify platform.\nIn local environment, the function will print a warning and have no effect."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The return value is the Webhook object.\nFor more information, see the [Get webhook](https://apify.com/docs/api/v2#/reference/webhooks/webhook-object/get-webhook) API endpoint."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1361,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1361"
								}
							],
							"parameters": [
								{
									"id": 969,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 1251,
										"name": "WebhookOptions",
										"package": "apify"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/apify-client/src/resource_clients/webhook.ts",
													"qualifiedName": "Webhook"
												},
												"name": "Webhook",
												"package": "apify-client"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 940,
					"name": "call",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1246,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1246"
						}
					],
					"signatures": [
						{
							"id": 941,
							"name": "call",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Runs an Actor on the Apify platform using the current user account (determined by the "
									},
									{
										"kind": "code",
										"text": "`APIFY_TOKEN`"
									},
									{
										"kind": "text",
										"text": " environment variable).\n\nThe result of the function is an "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "ActorRun"
									},
									{
										"kind": "text",
										"text": " object that contains details about the Actor run.\n\nIf you want to run an Actor task rather than an Actor, please use the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.callTask"
									},
									{
										"kind": "text",
										"text": " function instead.\n\nFor more information about Actors, read the [documentation](https://docs.apify.com/actor).\n\n**Example usage:**\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst run = await Actor.call('apify/hello-world', { myInput: 123 });\n```"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1246,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1246"
								}
							],
							"parameters": [
								{
									"id": 942,
									"name": "actorId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Allowed formats are "
											},
											{
												"kind": "code",
												"text": "`username/actor-name`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`userId/actor-name`"
											},
											{
												"kind": "text",
												"text": " or Actor ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 943,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Input for the Actor. If it is an object, it will be stringified to\n JSON and its content type set to "
											},
											{
												"kind": "code",
												"text": "`application/json; charset=utf-8`"
											},
											{
												"kind": "text",
												"text": ".\n Otherwise the "
											},
											{
												"kind": "code",
												"text": "`options.contentType`"
											},
											{
												"kind": "text",
												"text": " parameter must be provided."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								},
								{
									"id": 944,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 1230,
										"name": "CallOptions",
										"package": "apify"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1269,
										"name": "ActorRun",
										"package": "apify-client"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 945,
					"name": "callTask",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1275,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1275"
						}
					],
					"signatures": [
						{
							"id": 946,
							"name": "callTask",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Runs an Actor task on the Apify platform using the current user account (determined by the "
									},
									{
										"kind": "code",
										"text": "`APIFY_TOKEN`"
									},
									{
										"kind": "text",
										"text": " environment variable).\n\nThe result of the function is an "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "ActorRun"
									},
									{
										"kind": "text",
										"text": " object that contains details about the Actor run.\n\nNote that an Actor task is a saved input configuration and options for an Actor.\nIf you want to run an Actor directly rather than an Actor task, please use the\n"
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.call"
									},
									{
										"kind": "text",
										"text": " function instead.\n\nFor more information about Actor tasks, read the [documentation](https://docs.apify.com/tasks).\n\n**Example usage:**\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst run = await Actor.callTask('bob/some-task');\n```"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1275,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1275"
								}
							],
							"parameters": [
								{
									"id": 947,
									"name": "taskId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Allowed formats are "
											},
											{
												"kind": "code",
												"text": "`username/task-name`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`userId/task-name`"
											},
											{
												"kind": "text",
												"text": " or task ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 948,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Input overrides for the Actor task. If it is an object, it will be stringified to\n JSON and its content type set to "
											},
											{
												"kind": "code",
												"text": "`application/json; charset=utf-8`"
											},
											{
												"kind": "text",
												"text": ".\n Provided input will be merged with Actor task input."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									}
								},
								{
									"id": 949,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 1239,
										"name": "CallTaskOptions",
										"package": "apify"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1269,
										"name": "ActorRun",
										"package": "apify-client"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1011,
					"name": "createProxyConfiguration",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1656,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1656"
						}
					],
					"signatures": [
						{
							"id": 1012,
							"name": "createProxyConfiguration",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a proxy configuration and returns a promise resolving to an instance\nof the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "ProxyConfiguration"
									},
									{
										"kind": "text",
										"text": " class that is already initialized.\n\nConfigures connection to a proxy server with the provided options. Proxy servers are used to prevent target websites from blocking\nyour crawlers based on IP address rate limits or blacklists. Setting proxy configuration in your crawlers automatically configures\nthem to use the selected proxies for all connections.\n\nFor more details and code examples, see the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "ProxyConfiguration"
									},
									{
										"kind": "text",
										"text": " class.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\n\n// Returns initialized proxy configuration class\nconst proxyConfiguration = await Actor.createProxyConfiguration({\n    groups: ['GROUP1', 'GROUP2'] // List of Apify proxy groups\n    countryCode: 'US'\n});\n\nconst crawler = new CheerioCrawler({\n  // ...\n  proxyConfiguration,\n  requestHandler({ proxyInfo }) {\n      const usedProxyUrl = proxyInfo.url; // Getting the proxy URL\n  }\n})\n\n```"
									},
									{
										"kind": "text",
										"text": "\n\nFor compatibility with existing Actor Input UI (Input Schema), this function\nreturns "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": " when the following object is passed as "
									},
									{
										"kind": "code",
										"text": "`proxyConfigurationOptions`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```\n{ useApifyProxy: false }\n```"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1656,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1656"
								}
							],
							"parameters": [
								{
									"id": 1013,
									"name": "proxyConfigurationOptions",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"target": 1590,
												"name": "ProxyConfigurationOptions",
												"package": "apify"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1014,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 1015,
															"name": "useApifyProxy",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "packages/apify/src/actor.ts",
																	"line": 1657,
																	"character": 65,
																	"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1657"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																1015
															]
														}
													],
													"sources": [
														{
															"fileName": "packages/apify/src/actor.ts",
															"line": 1657,
															"character": 63,
															"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1657"
														}
													]
												}
											}
										]
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"target": 1610,
												"name": "ProxyConfiguration",
												"package": "apify"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 918,
					"name": "exit",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1202,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1202"
						}
					],
					"signatures": [
						{
							"id": 919,
							"name": "exit",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gracefully exits the Actor run with the provided status message and exit code."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1202,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1202"
								}
							],
							"parameters": [
								{
									"id": 920,
									"name": "messageOrOptions",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "First parameter accepts either a string (a terminal status message) or an "
											},
											{
												"kind": "code",
												"text": "`ExitOptions`"
											},
											{
												"kind": "text",
												"text": " object."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 1262,
												"name": "ExitOptions",
												"package": "apify"
											}
										]
									}
								},
								{
									"id": 921,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Second parameter accepts an "
											},
											{
												"kind": "code",
												"text": "`ExitOptions`"
											},
											{
												"kind": "text",
												"text": " object."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1262,
										"name": "ExitOptions",
										"package": "apify"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 922,
					"name": "fail",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1211,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1211"
						}
					],
					"signatures": [
						{
							"id": 923,
							"name": "fail",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Calls "
									},
									{
										"kind": "code",
										"text": "`Actor.exit()`"
									},
									{
										"kind": "text",
										"text": " with "
									},
									{
										"kind": "code",
										"text": "`options.exitCode`"
									},
									{
										"kind": "text",
										"text": " set to "
									},
									{
										"kind": "code",
										"text": "`1`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1211,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1211"
								}
							],
							"parameters": [
								{
									"id": 924,
									"name": "messageOrOptions",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "First parameter accepts either a string (a terminal status message) or an "
											},
											{
												"kind": "code",
												"text": "`ExitOptions`"
											},
											{
												"kind": "text",
												"text": " object."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": 1262,
												"name": "ExitOptions",
												"package": "apify"
											}
										]
									}
								},
								{
									"id": 925,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Second parameter accepts an "
											},
											{
												"kind": "code",
												"text": "`ExitOptions`"
											},
											{
												"kind": "text",
												"text": " object."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1262,
										"name": "ExitOptions",
										"package": "apify"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1021,
					"name": "getEnv",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1685,
							"character": 11,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1685"
						}
					],
					"signatures": [
						{
							"id": 1022,
							"name": "getEnv",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a new "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "ApifyEnv"
									},
									{
										"kind": "text",
										"text": " object which contains information parsed from all the Apify environment variables.\n\nFor the list of the Apify environment variables, see\n[Actor documentation](https://docs.apify.com/actor/run#environment-variables).\nIf some of the variables are not defined or are invalid, the corresponding value in the resulting object will be null."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1685,
									"character": 11,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1685"
								}
							],
							"type": {
								"type": "reference",
								"target": 1186,
								"name": "ApifyEnv",
								"package": "apify"
							}
						}
					]
				},
				{
					"id": 1019,
					"name": "getChargingManager",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1674,
							"character": 11,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1674"
						}
					],
					"signatures": [
						{
							"id": 1020,
							"name": "getChargingManager",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Retrieve the charging manager to access granular pricing information."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1674,
									"character": 11,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1674"
								}
							],
							"type": {
								"type": "reference",
								"target": 1300,
								"name": "ChargingManager",
								"package": "apify"
							}
						}
					]
				},
				{
					"id": 997,
					"name": "getInput",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1571,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1571"
						}
					],
					"signatures": [
						{
							"id": 998,
							"name": "getInput",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets the Actor input value from the default "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore"
									},
									{
										"kind": "text",
										"text": " associated with the current Actor run.\n\nThis is just a convenient shortcut for "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore.getValue | `keyValueStore.getValue('INPUT')`"
									},
									{
										"kind": "text",
										"text": ".\nFor example, calling the following code:\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst input = await Actor.getInput();\n```"
									},
									{
										"kind": "text",
										"text": "\n\nis equivalent to:\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst store = await Actor.openKeyValueStore();\nawait store.getValue('INPUT');\n```"
									},
									{
										"kind": "text",
										"text": "\n\nNote that the "
									},
									{
										"kind": "code",
										"text": "`getInput()`"
									},
									{
										"kind": "text",
										"text": " function does not cache the value read from the key-value store.\nIf you need to use the input multiple times in your Actor,\nit is far more efficient to read it once and store it locally.\n\nFor more information, see "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.openKeyValueStore"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore.getValue"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Returns a promise that resolves to an object, string\n  or ["
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": "](https://nodejs.org/api/buffer.html), depending\n  on the MIME content type of the record, or "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": "\n  if the record is missing."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1571,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1571"
								}
							],
							"typeParameters": [
								{
									"id": 999,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"default": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
													"qualifiedName": "Dictionary"
												},
												"name": "Dictionary",
												"package": "@crawlee/types"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@types/node/ts5.6/buffer.buffer.d.ts",
													"qualifiedName": "__global.Buffer"
												},
												"name": "Buffer",
												"package": "@types/node",
												"qualifiedName": "__global.Buffer"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"target": 999,
												"name": "T",
												"package": "apify",
												"refersToTypeParameter": true
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1000,
					"name": "getInputOrThrow",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1579,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1579"
						}
					],
					"signatures": [
						{
							"id": 1001,
							"name": "getInputOrThrow",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets the Actor input value just like the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.getInput"
									},
									{
										"kind": "text",
										"text": " method,\nbut throws if it is not found."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1579,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1579"
								}
							],
							"typeParameters": [
								{
									"id": 1002,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"default": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
													"qualifiedName": "Dictionary"
												},
												"name": "Dictionary",
												"package": "@crawlee/types"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@types/node/ts5.6/buffer.buffer.d.ts",
													"qualifiedName": "__global.Buffer"
												},
												"name": "Buffer",
												"package": "@types/node",
												"qualifiedName": "__global.Buffer"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1002,
										"name": "T",
										"package": "apify",
										"refersToTypeParameter": true
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 987,
					"name": "getValue",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1506,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1506"
						}
					],
					"signatures": [
						{
							"id": 988,
							"name": "getValue",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets a value from the default "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore"
									},
									{
										"kind": "text",
										"text": " associated with the current Actor run.\n\nThis is just a convenient shortcut for "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore.getValue"
									},
									{
										"kind": "text",
										"text": ".\nFor example, calling the following code:\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst value = await Actor.getValue('my-key');\n```"
									},
									{
										"kind": "text",
										"text": "\n\nis equivalent to:\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst store = await Actor.openKeyValueStore();\nconst value = await store.getValue('my-key');\n```"
									},
									{
										"kind": "text",
										"text": "\n\nTo store the value to the default key-value store, you can use the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.setValue"
									},
									{
										"kind": "text",
										"text": " function.\n\nFor more information, see  "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.openKeyValueStore"
									},
									{
										"kind": "text",
										"text": "\nand  "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore.getValue"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Returns a promise that resolves to an object, string\n  or ["
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": "](https://nodejs.org/api/buffer.html), depending\n  on the MIME content type of the record, or "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": "\n  if the record is missing."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1506,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1506"
								}
							],
							"typeParameters": [
								{
									"id": 989,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"default": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"parameters": [
								{
									"id": 990,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Unique record key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"target": 989,
												"name": "T",
												"package": "apify",
												"refersToTypeParameter": true
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1016,
					"name": "charge",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1667,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1667"
						}
					],
					"signatures": [
						{
							"id": 1017,
							"name": "charge",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Charge for a specified number of events - sub-operations of the Actor."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1667,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1667"
								}
							],
							"parameters": [
								{
									"id": 1018,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event to charge for and the number of events to be charged."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1342,
										"name": "ChargeOptions",
										"package": "apify"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1345,
										"name": "ChargeResult",
										"package": "apify"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 915,
					"name": "init",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1193,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1193"
						}
					],
					"signatures": [
						{
							"id": 916,
							"name": "init",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Initializes the Actor, enabling support for the [Apify platform](https://apify.com/actors) dynamically\nbased on "
									},
									{
										"kind": "code",
										"text": "`APIFY_IS_AT_HOME`"
									},
									{
										"kind": "text",
										"text": " env var. If you are not running the code on Apify, you don't need to use it.\nThe method will switch storage client implementation automatically, so when you run on the Apify platform,\nit will use its API instead of the default memory storage. It also increases the available memory ratio\nfrom 25% to 100% on the platform.\n\nCalling "
									},
									{
										"kind": "code",
										"text": "`Actor.exit()`"
									},
									{
										"kind": "text",
										"text": " is required if you use the "
									},
									{
										"kind": "code",
										"text": "`Actor.init()`"
									},
									{
										"kind": "text",
										"text": " method, since it opens websocket connection\n(see "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.events"
									},
									{
										"kind": "text",
										"text": " for details), which needs to be terminated for the code to finish.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { gotScraping } from 'got-scraping';\n\nawait Actor.init();\n\nconst html = await gotScraping('http://www.example.com');\nconsole.log(html);\n\nawait Actor.exit();\n```"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1193,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1193"
								}
							],
							"parameters": [
								{
									"id": 917,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 1178,
										"name": "InitOptions",
										"package": "apify"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1026,
					"name": "isAtHome",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1703,
							"character": 11,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1703"
						}
					],
					"signatures": [
						{
							"id": 1027,
							"name": "isAtHome",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " when code is running on Apify platform and "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise (for example locally)."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1703,
									"character": 11,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1703"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 910,
					"name": "main",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1166,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1166"
						}
					],
					"signatures": [
						{
							"id": 911,
							"name": "main",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Runs the main user function that performs the job of the Actor\nand terminates the process when the user function finishes.\n\n**The "
									},
									{
										"kind": "code",
										"text": "`Actor.main()`"
									},
									{
										"kind": "text",
										"text": " function is optional** and is provided merely for your convenience.\nIt is mainly useful when you're running your code as an Actor on the [Apify platform](https://apify.com/actors).\nHowever, if you want to use Apify SDK tools directly inside your existing projects, e.g.\nrunning in an [Express](https://expressjs.com/) server, on\n[Google Cloud functions](https://cloud.google.com/functions)\nor [AWS Lambda](https://aws.amazon.com/lambda/), it's better to avoid\nit since the function terminates the main process when it finishes!\n\nThe "
									},
									{
										"kind": "code",
										"text": "`Actor.main()`"
									},
									{
										"kind": "text",
										"text": " function performs the following actions:\n\n- When running on the Apify platform (i.e. "
									},
									{
										"kind": "code",
										"text": "`APIFY_IS_AT_HOME`"
									},
									{
										"kind": "text",
										"text": " environment variable is set),\n  it sets up a connection to listen for platform events.\n  For example, to get a notification about an imminent migration to another server.\n  See "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.events"
									},
									{
										"kind": "text",
										"text": " for details.\n- It invokes the user function passed as the "
									},
									{
										"kind": "code",
										"text": "`userFunc`"
									},
									{
										"kind": "text",
										"text": " parameter.\n- If the user function returned a promise, waits for it to resolve.\n- If the user function throws an exception or some other error is encountered,\n  prints error details to console so that they are stored to the log.\n- Exits the Node.js process, with zero exit code on success and non-zero on errors.\n\nThe user function can be synchronous:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nawait Actor.main(() => {\n  // My synchronous function that returns immediately\n  console.log('Hello world from Actor!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nIf the user function returns a promise, it is considered asynchronous:\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { gotScraping } from 'got-scraping';\n\nawait Actor.main(() => {\n  // My asynchronous function that returns a promise\n  return gotScraping('http://www.example.com').then((html) => {\n    console.log(html);\n  });\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nTo simplify your code, you can take advantage of the "
									},
									{
										"kind": "code",
										"text": "`async`"
									},
									{
										"kind": "text",
										"text": "/"
									},
									{
										"kind": "code",
										"text": "`await`"
									},
									{
										"kind": "text",
										"text": " keywords:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { gotScraping } from 'got-scraping';\n\nawait Actor.main(async () => {\n  // My asynchronous function\n  const html = await gotScraping('http://www.example.com');\n  console.log(html);\n});\n```"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1166,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1166"
								}
							],
							"typeParameters": [
								{
									"id": 912,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 913,
									"name": "userFunc",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "User function to be executed. If it returns a promise,\nthe promise will be awaited. The user function is called with no arguments."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1226,
										"typeArguments": [
											{
												"type": "reference",
												"target": 912,
												"name": "T",
												"package": "apify",
												"refersToTypeParameter": true
											}
										],
										"name": "UserFunc",
										"package": "apify"
									}
								},
								{
									"id": 914,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 1180,
										"name": "MainOptions",
										"package": "apify"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 912,
										"name": "T",
										"package": "apify",
										"refersToTypeParameter": true
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 959,
					"name": "metamorph",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1337,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1337"
						}
					],
					"signatures": [
						{
							"id": 960,
							"name": "metamorph",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Transforms this Actor run to an Actor run of a given Actor. The system stops the current container and starts\nthe new container instead. All the default storages are preserved and the new input is stored under the "
									},
									{
										"kind": "code",
										"text": "`INPUT-METAMORPH-1`"
									},
									{
										"kind": "text",
										"text": " key\nin the same default key-value store."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1337,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1337"
								}
							],
							"parameters": [
								{
									"id": 961,
									"name": "targetActorId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Either "
											},
											{
												"kind": "code",
												"text": "`username/actor-name`"
											},
											{
												"kind": "text",
												"text": " or Actor ID of an Actor to which we want to metamorph."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 962,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Input for the Actor. If it is an object, it will be stringified to\n JSON and its content type set to "
											},
											{
												"kind": "code",
												"text": "`application/json; charset=utf-8`"
											},
											{
												"kind": "text",
												"text": ".\n Otherwise, the "
											},
											{
												"kind": "code",
												"text": "`options.contentType`"
											},
											{
												"kind": "text",
												"text": " parameter must be provided."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								},
								{
									"id": 963,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 1256,
										"name": "MetamorphOptions",
										"package": "apify"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1023,
					"name": "newClient",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1696,
							"character": 11,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1696"
						}
					],
					"signatures": [
						{
							"id": 1024,
							"name": "newClient",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a new instance of the Apify API client. The "
									},
									{
										"kind": "code",
										"text": "`ApifyClient`"
									},
									{
										"kind": "text",
										"text": " class is provided\nby the [apify-client](https://www.npmjs.com/package/apify-client)\nNPM package, and it is automatically configured using the "
									},
									{
										"kind": "code",
										"text": "`APIFY_API_BASE_URL`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`APIFY_TOKEN`"
									},
									{
										"kind": "text",
										"text": "\nenvironment variables. You can override the token via the available options. That's useful\nif you want to use the client as a different Apify user than the SDK internals are using."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1696,
									"character": 11,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1696"
								}
							],
							"parameters": [
								{
									"id": 1025,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 891,
										"name": "ApifyClientOptions",
										"package": "apify-client"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": 817,
								"name": "ApifyClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 933,
					"name": "off",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1219,
							"character": 11,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1219"
						}
					],
					"signatures": [
						{
							"id": 934,
							"name": "off",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1219,
									"character": 11,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1219"
								}
							],
							"parameters": [
								{
									"id": 935,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
											"qualifiedName": "EventTypeName"
										},
										"name": "EventTypeName",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 936,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 937,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/apify/src/actor.ts",
													"line": 1219,
													"character": 48,
													"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1219"
												}
											],
											"signatures": [
												{
													"id": 938,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/apify/src/actor.ts",
															"line": 1219,
															"character": 48,
															"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1219"
														}
													],
													"parameters": [
														{
															"id": 939,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 926,
					"name": "on",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1215,
							"character": 11,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1215"
						}
					],
					"signatures": [
						{
							"id": 927,
							"name": "on",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1215,
									"character": 11,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1215"
								}
							],
							"parameters": [
								{
									"id": 928,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
											"qualifiedName": "EventTypeName"
										},
										"name": "EventTypeName",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 929,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 930,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "packages/apify/src/actor.ts",
													"line": 1215,
													"character": 46,
													"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1215"
												}
											],
											"signatures": [
												{
													"id": 931,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"sources": [
														{
															"fileName": "packages/apify/src/actor.ts",
															"line": 1215,
															"character": 46,
															"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1215"
														}
													],
													"parameters": [
														{
															"id": 932,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 982,
					"name": "openDataset",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1473,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1473"
						}
					],
					"signatures": [
						{
							"id": 983,
							"name": "openDataset",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Opens a dataset and returns a promise resolving to an instance of the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " class.\n\nDatasets are used to store structured data where each object stored has the same attributes,\nsuch as online store products or real estate offers.\nThe actual data is stored either on the local filesystem or in the cloud.\n\nFor more details and code examples, see the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " class."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1473,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1473"
								}
							],
							"typeParameters": [
								{
									"id": 984,
									"name": "Data",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"parameters": [
								{
									"id": 985,
									"name": "datasetIdOrName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "ID or name of the dataset to be opened. If "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`undefined`"
											},
											{
												"kind": "text",
												"text": ",\n  the function returns the default dataset associated with the Actor run."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 986,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 1267,
										"name": "OpenStorageOptions",
										"package": "apify"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1,
										"typeArguments": [
											{
												"type": "reference",
												"target": 984,
												"name": "Data",
												"package": "apify",
												"refersToTypeParameter": true
											}
										],
										"name": "Dataset",
										"package": "@crawlee/core"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1003,
					"name": "openKeyValueStore",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1597,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1597"
						}
					],
					"signatures": [
						{
							"id": 1004,
							"name": "openKeyValueStore",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Opens a key-value store and returns a promise resolving to an instance of the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore"
									},
									{
										"kind": "text",
										"text": " class.\n\nKey-value stores are used to store records or files, along with their MIME content type.\nThe records are stored and retrieved using a unique key.\nThe actual data is stored either on a local filesystem or in the Apify cloud.\n\nFor more details and code examples, see the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore"
									},
									{
										"kind": "text",
										"text": " class."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1597,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1597"
								}
							],
							"parameters": [
								{
									"id": 1005,
									"name": "storeIdOrName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "ID or name of the key-value store to be opened. If "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`undefined`"
											},
											{
												"kind": "text",
												"text": ",\n  the function returns the default key-value store associated with the Actor run."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 1006,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 1267,
										"name": "OpenStorageOptions",
										"package": "apify"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1733,
										"name": "KeyValueStore",
										"package": "apify"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1007,
					"name": "openRequestQueue",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1617,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1617"
						}
					],
					"signatures": [
						{
							"id": 1008,
							"name": "openRequestQueue",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Opens a request queue and returns a promise resolving to an instance\nof the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "RequestQueue"
									},
									{
										"kind": "text",
										"text": " class.\n\n"
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "RequestQueue"
									},
									{
										"kind": "text",
										"text": " represents a queue of URLs to crawl, which is stored either on local filesystem or in the cloud.\nThe queue is used for deep crawling of websites, where you start with several URLs and then\nrecursively follow links to other pages. The data structure supports both breadth-first\nand depth-first crawling orders.\n\nFor more details and code examples, see the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "RequestQueue"
									},
									{
										"kind": "text",
										"text": " class."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1617,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1617"
								}
							],
							"parameters": [
								{
									"id": 1009,
									"name": "queueIdOrName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "ID or name of the request queue to be opened. If "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`undefined`"
											},
											{
												"kind": "text",
												"text": ",\n  the function returns the default request queue associated with the Actor run."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 1010,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 1267,
										"name": "OpenStorageOptions",
										"package": "apify"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 131,
										"name": "RequestQueue",
										"package": "@crawlee/core"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 974,
					"name": "pushData",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Stores an object or an array of objects to the default "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "Dataset"
							},
							{
								"kind": "text",
								"text": " of the current Actor run.\n\nThis is just a convenient shortcut for "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "Dataset.pushData"
							},
							{
								"kind": "text",
								"text": ".\nFor example, calling the following code:\n"
							},
							{
								"kind": "code",
								"text": "```js\nawait Actor.pushData({ myValue: 123 });\n```"
							},
							{
								"kind": "text",
								"text": "\n\nis equivalent to:\n"
							},
							{
								"kind": "code",
								"text": "```js\nconst dataset = await Actor.openDataset();\nawait dataset.pushData({ myValue: 123 });\n```"
							},
							{
								"kind": "text",
								"text": "\n\nFor more information, see "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "Actor.openDataset"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "Dataset.pushData"
							},
							{
								"kind": "text",
								"text": "\n\n**IMPORTANT**: Make sure to use the "
							},
							{
								"kind": "code",
								"text": "`await`"
							},
							{
								"kind": "text",
								"text": " keyword when calling "
							},
							{
								"kind": "code",
								"text": "`pushData()`"
							},
							{
								"kind": "text",
								"text": ",\notherwise the Actor process might finish before the data are stored!"
							}
						],
						"blockTags": [
							{
								"tag": "@param",
								"name": "item",
								"content": [
									{
										"kind": "text",
										"text": "Object or array of objects containing data to be stored in the default dataset.\nThe objects must be serializable to JSON and the JSON representation of each object must be smaller than 9MB."
									}
								]
							},
							{
								"tag": "@param",
								"name": "eventName",
								"content": [
									{
										"kind": "text",
										"text": "If provided, the method will attempt to charge for the event for each pushed item."
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1402,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1402"
						},
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1427,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1427"
						},
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1452,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1452"
						}
					],
					"signatures": [
						{
							"id": 975,
							"name": "pushData",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stores an object or an array of objects to the default "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " of the current Actor run.\n\nThis is just a convenient shortcut for "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset.pushData"
									},
									{
										"kind": "text",
										"text": ".\nFor example, calling the following code:\n"
									},
									{
										"kind": "code",
										"text": "```js\nawait Actor.pushData({ myValue: 123 });\n```"
									},
									{
										"kind": "text",
										"text": "\n\nis equivalent to:\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst dataset = await Actor.openDataset();\nawait dataset.pushData({ myValue: 123 });\n```"
									},
									{
										"kind": "text",
										"text": "\n\nFor more information, see "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.openDataset"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset.pushData"
									},
									{
										"kind": "text",
										"text": "\n\n**IMPORTANT**: Make sure to use the "
									},
									{
										"kind": "code",
										"text": "`await`"
									},
									{
										"kind": "text",
										"text": " keyword when calling "
									},
									{
										"kind": "code",
										"text": "`pushData()`"
									},
									{
										"kind": "text",
										"text": ",\notherwise the Actor process might finish before the data are stored!"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1402,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1402"
								}
							],
							"typeParameters": [
								{
									"id": 976,
									"name": "Data",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"parameters": [
								{
									"id": 977,
									"name": "item",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Object or array of objects containing data to be stored in the default dataset.\nThe objects must be serializable to JSON and the JSON representation of each object must be smaller than 9MB."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": 976,
												"name": "Data",
												"package": "apify",
												"refersToTypeParameter": true
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 976,
													"name": "Data",
													"package": "apify",
													"refersToTypeParameter": true
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						},
						{
							"id": 978,
							"name": "pushData",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stores an object or an array of objects to the default "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " of the current Actor run.\n\nThis is just a convenient shortcut for "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset.pushData"
									},
									{
										"kind": "text",
										"text": ".\nFor example, calling the following code:\n"
									},
									{
										"kind": "code",
										"text": "```js\nawait Actor.pushData({ myValue: 123 });\n```"
									},
									{
										"kind": "text",
										"text": "\n\nis equivalent to:\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst dataset = await Actor.openDataset();\nawait dataset.pushData({ myValue: 123 });\n```"
									},
									{
										"kind": "text",
										"text": "\n\nFor more information, see "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.openDataset"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset.pushData"
									},
									{
										"kind": "text",
										"text": "\n\n**IMPORTANT**: Make sure to use the "
									},
									{
										"kind": "code",
										"text": "`await`"
									},
									{
										"kind": "text",
										"text": " keyword when calling "
									},
									{
										"kind": "code",
										"text": "`pushData()`"
									},
									{
										"kind": "text",
										"text": ",\notherwise the Actor process might finish before the data are stored!"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1427,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1427"
								}
							],
							"typeParameters": [
								{
									"id": 979,
									"name": "Data",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"parameters": [
								{
									"id": 980,
									"name": "item",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Object or array of objects containing data to be stored in the default dataset.\nThe objects must be serializable to JSON and the JSON representation of each object must be smaller than 9MB."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": 979,
												"name": "Data",
												"package": "apify",
												"refersToTypeParameter": true
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 979,
													"name": "Data",
													"package": "apify",
													"refersToTypeParameter": true
												}
											}
										]
									}
								},
								{
									"id": 981,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If provided, the method will attempt to charge for the event for each pushed item."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1345,
										"name": "ChargeResult",
										"package": "apify"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 964,
					"name": "reboot",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1346,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1346"
						}
					],
					"signatures": [
						{
							"id": 965,
							"name": "reboot",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Internally reboots this Actor run. The system stops the current container and starts\na new container with the same run id.\nThis can be used to get the Actor out of irrecoverable error state and continue where it left off."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1346,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1346"
								}
							],
							"parameters": [
								{
									"id": 966,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 1260,
										"name": "RebootOptions",
										"package": "apify"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 970,
					"name": "setStatusMessage",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1375,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1375"
						}
					],
					"signatures": [
						{
							"id": 971,
							"name": "setStatusMessage",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sets the status message for the current Actor run."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The return value is the Run object. When run locally, this method returns empty object ("
											},
											{
												"kind": "code",
												"text": "`{}`"
											},
											{
												"kind": "text",
												"text": ").\nFor more information, see the [Actor Runs](https://docs.apify.com/api/v2#/reference/actor-runs/) API endpoints."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1375,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1375"
								}
							],
							"parameters": [
								{
									"id": 972,
									"name": "statusMessage",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The status message to set."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 973,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/storages.ts",
											"qualifiedName": "SetStatusMessageOptions"
										},
										"name": "SetStatusMessageOptions",
										"package": "@crawlee/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1269,
										"name": "ActorRun",
										"package": "apify-client"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 991,
					"name": "setValue",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1540,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1540"
						}
					],
					"signatures": [
						{
							"id": 992,
							"name": "setValue",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stores or deletes a value in the default "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore"
									},
									{
										"kind": "text",
										"text": " associated with the current Actor run.\n\nThis is just a convenient shortcut for  "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore.setValue"
									},
									{
										"kind": "text",
										"text": ".\nFor example, calling the following code:\n"
									},
									{
										"kind": "code",
										"text": "```js\nawait Actor.setValue('OUTPUT', { foo: \"bar\" });\n```"
									},
									{
										"kind": "text",
										"text": "\n\nis equivalent to:\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst store = await Actor.openKeyValueStore();\nawait store.setValue('OUTPUT', { foo: \"bar\" });\n```"
									},
									{
										"kind": "text",
										"text": "\n\nTo get a value from the default key-value store, you can use the  "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.getValue"
									},
									{
										"kind": "text",
										"text": " function.\n\nFor more information, see  "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.openKeyValueStore"
									},
									{
										"kind": "text",
										"text": "\nand  "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore.getValue"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1540,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1540"
								}
							],
							"typeParameters": [
								{
									"id": 993,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 994,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Unique record key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 995,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Record data, which can be one of the following values:\n   - If "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": ", the record in the key-value store is deleted.\n   - If no "
											},
											{
												"kind": "code",
												"text": "`options.contentType`"
											},
											{
												"kind": "text",
												"text": " is specified, "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " can be any JavaScript object, and it will be stringified to JSON.\n   - If "
											},
											{
												"kind": "code",
												"text": "`options.contentType`"
											},
											{
												"kind": "text",
												"text": " is set, "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " is taken as is, and it must be a "
											},
											{
												"kind": "code",
												"text": "`String`"
											},
											{
												"kind": "text",
												"text": " or ["
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": "](https://nodejs.org/api/buffer.html).\n  For any other value an error will be thrown."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"target": 993,
												"name": "T",
												"package": "apify",
												"refersToTypeParameter": true
											}
										]
									}
								},
								{
									"id": 996,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 247,
										"name": "RecordOptions",
										"package": "@crawlee/core"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 950,
					"name": "start",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1302,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1302"
						}
					],
					"signatures": [
						{
							"id": 951,
							"name": "start",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Runs an Actor on the Apify platform using the current user account (determined by the "
									},
									{
										"kind": "code",
										"text": "`APIFY_TOKEN`"
									},
									{
										"kind": "text",
										"text": " environment variable),\nunlike "
									},
									{
										"kind": "code",
										"text": "`Actor.call`"
									},
									{
										"kind": "text",
										"text": ", this method just starts the run without waiting for finish.\n\nThe result of the function is an "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "ActorRun"
									},
									{
										"kind": "text",
										"text": " object that contains details about the Actor run.\n\nFor more information about Actors, read the\n[documentation](https://docs.apify.com/actor).\n\n**Example usage:**\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst run = await Actor.start('apify/hello-world', { myInput: 123 });\n```"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1302,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1302"
								}
							],
							"parameters": [
								{
									"id": 952,
									"name": "actorId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Allowed formats are "
											},
											{
												"kind": "code",
												"text": "`username/actor-name`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`userId/actor-name`"
											},
											{
												"kind": "text",
												"text": " or Actor ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 953,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Input for the Actor. If it is an object, it will be stringified to\n JSON and its content type set to "
											},
											{
												"kind": "code",
												"text": "`application/json; charset=utf-8`"
											},
											{
												"kind": "text",
												"text": ".\n Otherwise the "
											},
											{
												"kind": "code",
												"text": "`options.contentType`"
											},
											{
												"kind": "text",
												"text": " parameter must be provided."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									}
								},
								{
									"id": 954,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 1230,
										"name": "CallOptions",
										"package": "apify"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1269,
										"name": "ActorRun",
										"package": "apify-client"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 904,
					"name": "useState",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1097,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1097"
						}
					],
					"signatures": [
						{
							"id": 905,
							"name": "useState",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Easily create and manage state values. All state values are automatically persisted.\n\nValues can be modified by simply using the assignment operator."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/actor.ts",
									"line": 1097,
									"character": 17,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1097"
								}
							],
							"typeParameters": [
								{
									"id": 906,
									"name": "State",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"parameters": [
								{
									"id": 907,
									"name": "name",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the store to use."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 908,
									"name": "defaultValue",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If the store does not yet have a value in it, the value will be initialized with the "
											},
											{
												"kind": "code",
												"text": "`defaultValue`"
											},
											{
												"kind": "text",
												"text": " you provide."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 906,
										"name": "State",
										"package": "apify",
										"refersToTypeParameter": true
									},
									"defaultValue": "..."
								},
								{
									"id": 909,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An optional object parameter where a custom "
											},
											{
												"kind": "code",
												"text": "`keyValueStoreName`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " can be passed in."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/storages/utils.ts",
											"qualifiedName": "UseStateOptions"
										},
										"name": "UseStateOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 906,
										"name": "State",
										"package": "apify",
										"refersToTypeParameter": true
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1034
					]
				},
				{
					"title": "Properties",
					"children": [
						1041
					]
				},
				{
					"title": "Accessors",
					"children": [
						1028,
						1030
					]
				},
				{
					"title": "Methods",
					"children": [
						1132,
						1162,
						955,
						967,
						940,
						945,
						1011,
						918,
						922,
						1021,
						1019,
						997,
						1000,
						987,
						1016,
						915,
						1026,
						910,
						959,
						1023,
						933,
						926,
						982,
						1003,
						1007,
						974,
						964,
						970,
						991,
						950,
						904
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 53,
					"character": 13,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L53"
				}
			],
			"typeParameters": [
				{
					"id": 1177,
					"name": "Data",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
							"qualifiedName": "Dictionary"
						},
						"name": "Dictionary",
						"package": "@crawlee/types"
					},
					"default": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
							"qualifiedName": "Dictionary"
						},
						"name": "Dictionary",
						"package": "@crawlee/types"
					}
				}
			]
		},
		{
			"id": 817,
			"name": "ApifyClient",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "ApifyClient is the official library to access [Apify API](https://docs.apify.com/api/v2) from your\nJavaScript applications. It runs both in Node.js and browser."
					}
				]
			},
			"children": [
				{
					"id": 818,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 40,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 819,
							"name": "new ApifyClient",
							"variant": "signature",
							"kind": 16384,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 40,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 820,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 891,
										"name": "ApifyClientOptions",
										"package": "apify-client"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 817,
								"name": "ApifyClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 821,
					"name": "baseUrl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 35,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 825,
					"name": "httpClient",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 39,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/apify-client/src/http_client.ts",
							"qualifiedName": "HttpClient"
						},
						"name": "HttpClient",
						"package": "apify-client"
					}
				},
				{
					"id": 824,
					"name": "logger",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 38,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": 252,
						"name": "Log",
						"package": "@apify/log"
					}
				},
				{
					"id": 823,
					"name": "stats",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 37,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/apify-client/src/statistics.ts",
							"qualifiedName": "Statistics"
						},
						"name": "Statistics",
						"package": "apify-client"
					}
				},
				{
					"id": 822,
					"name": "token",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 36,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 829,
					"name": "actor",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 49,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 830,
							"name": "actor",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/actors/actor-object"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 49,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 831,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
									"qualifiedName": "ActorClient"
								},
								"name": "ActorClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 827,
					"name": "actors",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 45,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 828,
							"name": "actors",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/actors/actor-collection"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 45,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor_collection.ts",
									"qualifiedName": "ActorCollectionClient"
								},
								"name": "ActorCollectionClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 834,
					"name": "build",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 57,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 835,
							"name": "build",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/actor-builds/build-object"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 57,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 836,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/build.ts",
									"qualifiedName": "BuildClient"
								},
								"name": "BuildClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 832,
					"name": "builds",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 53,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 833,
							"name": "builds",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/actor-builds/build-collection"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 53,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/build_collection.ts",
									"qualifiedName": "BuildCollectionClient"
								},
								"name": "BuildCollectionClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 839,
					"name": "dataset",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 65,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 840,
							"name": "dataset",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/datasets/dataset"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 65,
									"character": 4
								}
							],
							"typeParameters": [
								{
									"id": 841,
									"name": "Data",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									"default": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"parameters": [
								{
									"id": 842,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/dataset.ts",
									"qualifiedName": "DatasetClient"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 841,
										"name": "Data",
										"package": "apify-client",
										"refersToTypeParameter": true
									}
								],
								"name": "DatasetClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 837,
					"name": "datasets",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 61,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 838,
							"name": "datasets",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/datasets/dataset-collection"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 61,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/dataset_collection.ts",
									"qualifiedName": "DatasetCollectionClient"
								},
								"name": "DatasetCollectionClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 845,
					"name": "keyValueStore",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 73,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 846,
							"name": "keyValueStore",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/key-value-stores/store-object"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 73,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 847,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/key_value_store.ts",
									"qualifiedName": "KeyValueStoreClient"
								},
								"name": "KeyValueStoreClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 843,
					"name": "keyValueStores",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 69,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 844,
							"name": "keyValueStores",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/key-value-stores/store-collection"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 69,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/key_value_store_collection.ts",
									"qualifiedName": "KeyValueStoreCollectionClient"
								},
								"name": "KeyValueStoreCollectionClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 848,
					"name": "log",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 77,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 849,
							"name": "log",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/logs"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 77,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 850,
									"name": "buildOrRunId",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/log.ts",
									"qualifiedName": "LogClient"
								},
								"name": "LogClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 853,
					"name": "requestQueue",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 85,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 854,
							"name": "requestQueue",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/request-queues/queue"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 85,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 855,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 856,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/apify-client/src/resource_clients/request_queue.ts",
											"qualifiedName": "RequestQueueUserOptions"
										},
										"name": "RequestQueueUserOptions",
										"package": "apify-client"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/request_queue.ts",
									"qualifiedName": "RequestQueueClient"
								},
								"name": "RequestQueueClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 851,
					"name": "requestQueues",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 81,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 852,
							"name": "requestQueues",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/request-queues/queue-collection"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 81,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/request_queue_collection.ts",
									"qualifiedName": "RequestQueueCollectionClient"
								},
								"name": "RequestQueueCollectionClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 859,
					"name": "run",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 93,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 860,
							"name": "run",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/actor-runs/run-object-and-its-storages"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 93,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 861,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/run.ts",
									"qualifiedName": "RunClient"
								},
								"name": "RunClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 857,
					"name": "runs",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 89,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 858,
							"name": "runs",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/actor-runs/run-collection"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 89,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/run_collection.ts",
									"qualifiedName": "RunCollectionClient"
								},
								"name": "RunCollectionClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 887,
					"name": "setStatusMessage",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 134,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 888,
							"name": "setStatusMessage",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 134,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 889,
									"name": "message",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 890,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/storages.ts",
											"qualifiedName": "SetStatusMessageOptions"
										},
										"name": "SetStatusMessageOptions",
										"package": "@crawlee/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 869,
					"name": "schedule",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 109,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 870,
							"name": "schedule",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/schedules/schedule-object"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 109,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 871,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/schedule.ts",
									"qualifiedName": "ScheduleClient"
								},
								"name": "ScheduleClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 867,
					"name": "schedules",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 105,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 868,
							"name": "schedules",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/schedules/schedules-collection"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 105,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/schedule_collection.ts",
									"qualifiedName": "ScheduleCollectionClient"
								},
								"name": "ScheduleCollectionClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 885,
					"name": "store",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 133,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 886,
							"name": "store",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2/#/reference/store"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 133,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/store_collection.ts",
									"qualifiedName": "StoreCollectionClient"
								},
								"name": "StoreCollectionClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 864,
					"name": "task",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 101,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 865,
							"name": "task",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/actor-tasks/task-object"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 101,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 866,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/task.ts",
									"qualifiedName": "TaskClient"
								},
								"name": "TaskClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 862,
					"name": "tasks",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 97,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 863,
							"name": "tasks",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/actor-tasks/task-collection"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 97,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/task_collection.ts",
									"qualifiedName": "TaskCollectionClient"
								},
								"name": "TaskCollectionClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 872,
					"name": "user",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 113,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 873,
							"name": "user",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/users"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 113,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 874,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/user.ts",
									"qualifiedName": "UserClient"
								},
								"name": "UserClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 877,
					"name": "webhook",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 121,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 878,
							"name": "webhook",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/webhooks/webhook-object"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 121,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 879,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/webhook.ts",
									"qualifiedName": "WebhookClient"
								},
								"name": "WebhookClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 882,
					"name": "webhookDispatch",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 129,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 883,
							"name": "webhookDispatch",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/webhook-dispatches/webhook-dispatch-object"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 129,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 884,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/webhook_dispatch.ts",
									"qualifiedName": "WebhookDispatchClient"
								},
								"name": "WebhookDispatchClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 880,
					"name": "webhookDispatches",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 125,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 881,
							"name": "webhookDispatches",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/webhook-dispatches"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 125,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/webhook_dispatch_collection.ts",
									"qualifiedName": "WebhookDispatchCollectionClient"
								},
								"name": "WebhookDispatchCollectionClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 875,
					"name": "webhooks",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 117,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 876,
							"name": "webhooks",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/webhooks/webhook-collection"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
									"line": 117,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/webhook_collection.ts",
									"qualifiedName": "WebhookCollectionClient"
								},
								"name": "WebhookCollectionClient",
								"package": "apify-client"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						818
					]
				},
				{
					"title": "Properties",
					"children": [
						821,
						825,
						824,
						823,
						822
					]
				},
				{
					"title": "Methods",
					"children": [
						829,
						827,
						834,
						832,
						839,
						837,
						845,
						843,
						848,
						853,
						851,
						859,
						857,
						887,
						869,
						867,
						885,
						864,
						862,
						872,
						877,
						882,
						880,
						875
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
					"line": 34,
					"character": 21
				}
			]
		},
		{
			"id": 1422,
			"name": "Configuration",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "code",
						"text": "`Configuration`"
					},
					{
						"kind": "text",
						"text": " is a value object holding the SDK configuration. We can use it in two ways:\n\n1. When using "
					},
					{
						"kind": "code",
						"text": "`Actor`"
					},
					{
						"kind": "text",
						"text": " class, we can get the instance configuration via "
					},
					{
						"kind": "code",
						"text": "`sdk.config`"
					},
					{
						"kind": "text",
						"text": "\n\n   "
					},
					{
						"kind": "code",
						"text": "```javascript\n   import { Actor } from 'apify';\n   import { BasicCrawler } from 'crawlee';\n\n   const sdk = new Actor({ token: '123' });\n   console.log(sdk.config.get('token')); // '123'\n\n   const crawler = new BasicCrawler({\n       // ... crawler options\n   }, sdk.config);\n   ```"
					},
					{
						"kind": "text",
						"text": "\n\n2. To get the global configuration (singleton instance). It will respect the environment variables.\n\n   "
					},
					{
						"kind": "code",
						"text": "```javascript\n   import { BasicCrawler, Configuration } from 'crawlee';\n\n   // Get the global configuration\n   const config = Configuration.getGlobalConfig();\n   // Set the 'persistStateIntervalMillis' option\n   // of global configuration to 30 seconds\n   config.set('persistStateIntervalMillis', 30_000);\n\n   // No need to pass the configuration to the crawler,\n   // as it's using the global configuration by default\n   const crawler = new BasicCrawler();\n   ```"
					},
					{
						"kind": "text",
						"text": "\n\n## Supported Configuration Options\n\nKey | Environment Variable | Default Value\n---|---|---\n"
					},
					{
						"kind": "code",
						"text": "`memoryMbytes`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_MEMORY_MBYTES`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`headless`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_HEADLESS`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`persistStateIntervalMillis`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_PERSIST_STATE_INTERVAL_MILLIS`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`60e3`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`token`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_TOKEN`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`isAtHome`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_IS_AT_HOME`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`defaultDatasetId`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_DEFAULT_DATASET_ID`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`'default'`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`defaultKeyValueStoreId`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_DEFAULT_KEY_VALUE_STORE_ID`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`'default'`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`defaultRequestQueueId`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_DEFAULT_REQUEST_QUEUE_ID`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`'default'`"
					},
					{
						"kind": "text",
						"text": "\n\n## Advanced Configuration Options\n\nKey | Environment Variable | Default Value\n---|---|---\n"
					},
					{
						"kind": "code",
						"text": "`actorEventsWsUrl`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_EVENTS_WEBSOCKET_URL`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`actorId`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_ID`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`actorRunId`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_RUN_ID`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`actorTaskId`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_TASK_ID`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`apiBaseUrl`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_API_BASE_URL`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`'https://api.apify.com'`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`containerPort`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_WEB_SERVER_PORT`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`4321`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`containerUrl`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_WEB_SERVER_URL`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`'http://localhost:4321'`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`inputKey`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_INPUT_KEY`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`'INPUT'`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`metamorphAfterSleepMillis`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_METAMORPH_AFTER_SLEEP_MILLIS`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`300e3`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`metaOrigin`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_META_ORIGIN`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`proxyHostname`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_PROXY_HOSTNAME`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`'proxy.apify.com'`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`proxyPassword`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_PROXY_PASSWORD`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`proxyPort`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_PROXY_PORT`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`8000`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`proxyStatusUrl`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_PROXY_STATUS_URL`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`'http://proxy.apify.com'`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`userId`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_USER_ID`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`xvfb`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_XVFB`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`standbyPort`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_STANDBY_PORT`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`4321`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`standbyUrl`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_STANDBY_URL`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`chromeExecutablePath`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_CHROME_EXECUTABLE_PATH`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`defaultBrowserPath`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_DEFAULT_BROWSER_PATH`"
					},
					{
						"kind": "text",
						"text": " | -"
					}
				]
			},
			"children": [
				{
					"id": 1512,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 241,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1513,
							"name": "new Configuration",
							"variant": "signature",
							"kind": 16384,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates new "
									},
									{
										"kind": "code",
										"text": "`Configuration`"
									},
									{
										"kind": "text",
										"text": " instance with provided options. Env vars will have precedence over those."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/configuration.d.ts",
									"line": 241,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1514,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
											"qualifiedName": "ConfigurationOptions"
										},
										"name": "ConfigurationOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1422,
								"name": "Configuration",
								"package": "apify"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "CoreConfiguration.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfiguration.constructor"
					}
				},
				{
					"id": 1569,
					"name": "storageManagers",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isReadonly": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 237,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es2015.collection.d.ts",
							"qualifiedName": "Map"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/@crawlee/src/typedefs.ts",
									"qualifiedName": "Constructor"
								},
								"name": "Constructor",
								"package": "@crawlee/core"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/@crawlee/src/storages/storage_manager.ts",
									"qualifiedName": "StorageManager"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/storages/storage_manager.ts",
											"qualifiedName": "IStorage"
										},
										"name": "IStorage",
										"package": "@crawlee/core"
									}
								],
								"name": "StorageManager",
								"package": "@crawlee/core"
							}
						],
						"name": "Map",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfiguration.storageManagers"
					}
				},
				{
					"id": 1423,
					"name": "globalConfig",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isOptional": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@inheritDoc",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 116,
							"character": 20,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L116"
						}
					],
					"type": {
						"type": "reference",
						"target": 1422,
						"name": "Configuration",
						"package": "apify"
					},
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfiguration.globalConfig"
					}
				},
				{
					"id": 1515,
					"name": "get",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 206,
							"character": 13,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L206"
						}
					],
					"signatures": [
						{
							"id": 1516,
							"name": "get",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@inheritDoc",
										"content": []
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/configuration.ts",
									"line": 206,
									"character": 13,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L206"
								}
							],
							"typeParameters": [
								{
									"id": 1517,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"target": 1354,
											"name": "ConfigurationOptions",
											"package": "apify"
										}
									}
								},
								{
									"id": 1518,
									"name": "U",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
													"qualifiedName": "Dictionary"
												},
												"name": "Dictionary",
												"package": "@crawlee/types"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@crawlee/src/storages.ts",
													"qualifiedName": "StorageClient"
												},
												"name": "StorageClient",
												"package": "@crawlee/types"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
													"qualifiedName": "EventManager"
												},
												"name": "EventManager",
												"package": "@crawlee/core"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1519,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 564,
															"character": 4
														}
													],
													"signatures": [
														{
															"id": 1520,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "Returns a string representation of an object."
																	}
																]
															},
															"sources": [
																{
																	"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
																	"line": 564,
																	"character": 4
																}
															],
															"parameters": [
																{
																	"id": 1521,
																	"name": "radix",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"summary": [
																			{
																				"kind": "text",
																				"text": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
																			}
																		]
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1522,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 570,
															"character": 4
														}
													],
													"signatures": [
														{
															"id": 1523,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "Returns a string representing a number in fixed-point notation."
																	}
																]
															},
															"sources": [
																{
																	"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
																	"line": 570,
																	"character": 4
																}
															],
															"parameters": [
																{
																	"id": 1524,
																	"name": "fractionDigits",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"summary": [
																			{
																				"kind": "text",
																				"text": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
																			}
																		]
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1525,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 576,
															"character": 4
														}
													],
													"signatures": [
														{
															"id": 1526,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "Returns a string containing a number represented in exponential notation."
																	}
																]
															},
															"sources": [
																{
																	"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
																	"line": 576,
																	"character": 4
																}
															],
															"parameters": [
																{
																	"id": 1527,
																	"name": "fractionDigits",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"summary": [
																			{
																				"kind": "text",
																				"text": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
																			}
																		]
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1528,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 582,
															"character": 4
														}
													],
													"signatures": [
														{
															"id": 1529,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits."
																	}
																]
															},
															"sources": [
																{
																	"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
																	"line": 582,
																	"character": 4
																}
															],
															"parameters": [
																{
																	"id": 1530,
																	"name": "precision",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"summary": [
																			{
																				"kind": "text",
																				"text": "Number of significant digits. Must be in the range 1 - 21, inclusive."
																			}
																		]
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1531,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 585,
															"character": 4
														}
													],
													"signatures": [
														{
															"id": 1532,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "Returns the primitive value of the specified object."
																	}
																]
															},
															"sources": [
																{
																	"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
																	"line": 585,
																	"character": 4
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													]
												}
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1533,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 4540,
															"character": 4
														},
														{
															"fileName": "website/node_modules/typescript/lib/lib.es2020.number.d.ts",
															"line": 27,
															"character": 4
														}
													],
													"signatures": [
														{
															"id": 1534,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "Converts a number to a string by using the current or specified locale."
																	}
																]
															},
															"sources": [
																{
																	"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
																	"line": 4540,
																	"character": 4
																}
															],
															"parameters": [
																{
																	"id": 1535,
																	"name": "locales",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"summary": [
																			{
																				"kind": "text",
																				"text": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
																			}
																		]
																	},
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "string"
																			},
																			{
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		]
																	}
																},
																{
																	"id": 1536,
																	"name": "options",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"summary": [
																			{
																				"kind": "text",
																				"text": "An object that contains one or more properties that specify comparison options."
																			}
																		]
																	},
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
																			"qualifiedName": "Intl.NumberFormatOptions"
																		},
																		"name": "NumberFormatOptions",
																		"package": "typescript",
																		"qualifiedName": "Intl.NumberFormatOptions"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1537,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "Converts a number to a string by using the current or specified locale."
																	}
																]
															},
															"sources": [
																{
																	"fileName": "website/node_modules/typescript/lib/lib.es2020.number.d.ts",
																	"line": 27,
																	"character": 4
																}
															],
															"parameters": [
																{
																	"id": 1538,
																	"name": "locales",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"summary": [
																			{
																				"kind": "text",
																				"text": "A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
																			}
																		]
																	},
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "node_modules/typescript/lib/lib.es2020.intl.d.ts",
																			"qualifiedName": "Intl.LocalesArgument"
																		},
																		"name": "LocalesArgument",
																		"package": "typescript",
																		"qualifiedName": "Intl.LocalesArgument"
																	}
																},
																{
																	"id": 1539,
																	"name": "options",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"summary": [
																			{
																				"kind": "text",
																				"text": "An object that contains one or more properties that specify comparison options."
																			}
																		]
																	},
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
																			"qualifiedName": "Intl.NumberFormatOptions"
																		},
																		"name": "NumberFormatOptions",
																		"package": "typescript",
																		"qualifiedName": "Intl.NumberFormatOptions"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 1540,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 1517,
										"name": "T",
										"package": "apify",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 1541,
									"name": "defaultValue",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 1518,
										"name": "U",
										"package": "apify",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1518,
								"name": "U",
								"package": "apify",
								"refersToTypeParameter": true
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "CoreConfiguration.get"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfiguration.get"
					}
				},
				{
					"id": 1576,
					"name": "getEventManager",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 269,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1577,
							"name": "getEventManager",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/configuration.d.ts",
									"line": 269,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
									"qualifiedName": "EventManager"
								},
								"name": "EventManager",
								"package": "@crawlee/core"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "CoreConfiguration.getEventManager"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfiguration.getEventManager"
					}
				},
				{
					"id": 1542,
					"name": "set",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 213,
							"character": 13,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L213"
						}
					],
					"signatures": [
						{
							"id": 1543,
							"name": "set",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@inheritDoc",
										"content": []
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/configuration.ts",
									"line": 213,
									"character": 13,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L213"
								}
							],
							"parameters": [
								{
									"id": 1544,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"target": 1354,
											"name": "ConfigurationOptions",
											"package": "apify"
										}
									}
								},
								{
									"id": 1545,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "CoreConfiguration.set"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfiguration.set"
					}
				},
				{
					"id": 1584,
					"name": "useEventManager",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 277,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1585,
							"name": "useEventManager",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/configuration.d.ts",
									"line": 277,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1586,
									"name": "events",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
											"qualifiedName": "EventManager"
										},
										"name": "EventManager",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "CoreConfiguration.useEventManager"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfiguration.useEventManager"
					}
				},
				{
					"id": 1581,
					"name": "useStorageClient",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 275,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1582,
							"name": "useStorageClient",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/configuration.d.ts",
									"line": 275,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1583,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/storages.ts",
											"qualifiedName": "StorageClient"
										},
										"name": "StorageClient",
										"package": "@crawlee/types"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "CoreConfiguration.useStorageClient"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfiguration.useStorageClient"
					}
				},
				{
					"id": 1510,
					"name": "getEventManager",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 289,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1511,
							"name": "getEventManager",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets default "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "EventManager"
									},
									{
										"kind": "text",
										"text": " instance."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/configuration.d.ts",
									"line": 289,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
									"qualifiedName": "EventManager"
								},
								"name": "EventManager",
								"package": "@crawlee/core"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "CoreConfiguration.getEventManager"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfiguration.getEventManager"
					}
				},
				{
					"id": 1495,
					"name": "getGlobalConfig",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 220,
							"character": 20,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L220"
						}
					],
					"signatures": [
						{
							"id": 1496,
							"name": "getGlobalConfig",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@inheritDoc",
										"content": []
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/configuration.ts",
									"line": 220,
									"character": 20,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L220"
								}
							],
							"type": {
								"type": "reference",
								"target": 1422,
								"name": "Configuration",
								"package": "apify"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "CoreConfiguration.getGlobalConfig"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfiguration.getGlobalConfig"
					}
				},
				{
					"id": 1508,
					"name": "getStorageClient",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 285,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1509,
							"name": "getStorageClient",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets default "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "StorageClient"
									},
									{
										"kind": "text",
										"text": " instance."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/configuration.d.ts",
									"line": 285,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/@crawlee/src/storages.ts",
									"qualifiedName": "StorageClient"
								},
								"name": "StorageClient",
								"package": "@crawlee/types"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "CoreConfiguration.getStorageClient"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfiguration.getStorageClient"
					}
				},
				{
					"id": 1497,
					"name": "resetGlobalState",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 233,
							"character": 20,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L233"
						}
					],
					"signatures": [
						{
							"id": 1498,
							"name": "resetGlobalState",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Resets global configuration instance. The default instance holds configuration based on env vars,\nif we want to change them, we need to first reset the global state. Used mainly for testing purposes."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/configuration.ts",
									"line": 233,
									"character": 20,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L233"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "CoreConfiguration.resetGlobalState"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfiguration.resetGlobalState"
					}
				},
				{
					"id": 1501,
					"name": "set",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 258,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1502,
							"name": "set",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sets value for given option. Only affects the global "
									},
									{
										"kind": "code",
										"text": "`Configuration`"
									},
									{
										"kind": "text",
										"text": " instance, the value will not be propagated down to the env var.\nTo reset a value, we can omit the "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " argument or pass "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": " there."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/configuration.d.ts",
									"line": 258,
									"character": 11
								}
							],
							"parameters": [
								{
									"id": 1503,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"target": {
												"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
												"qualifiedName": "ConfigurationOptions"
											},
											"name": "ConfigurationOptions",
											"package": "@crawlee/core"
										}
									}
								},
								{
									"id": 1504,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "CoreConfiguration.set"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfiguration.set"
					}
				},
				{
					"id": 1505,
					"name": "useStorageClient",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 276,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1506,
							"name": "useStorageClient",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/configuration.d.ts",
									"line": 276,
									"character": 11
								}
							],
							"parameters": [
								{
									"id": 1507,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/storages.ts",
											"qualifiedName": "StorageClient"
										},
										"name": "StorageClient",
										"package": "@crawlee/types"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "CoreConfiguration.useStorageClient"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfiguration.useStorageClient"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1512
					]
				},
				{
					"title": "Properties",
					"children": [
						1569,
						1423
					]
				},
				{
					"title": "Methods",
					"children": [
						1515,
						1576,
						1542,
						1584,
						1581,
						1510,
						1495,
						1508,
						1497,
						1501,
						1505
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/configuration.ts",
					"line": 114,
					"character": 13,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L114"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
						"qualifiedName": "Configuration"
					},
					"name": "Configuration",
					"package": "@crawlee/core"
				}
			]
		},
		{
			"id": 1,
			"name": "Dataset",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The "
					},
					{
						"kind": "code",
						"text": "`Dataset`"
					},
					{
						"kind": "text",
						"text": " class represents a store for structured data where each object stored has the same attributes,\nsuch as online store products or real estate offers. You can imagine it as a table,\nwhere each object is a row and its attributes are columns.\nDataset is an append-only storage - you can only add new records to it but you cannot modify or remove existing records.\nTypically it is used to store crawling results.\n\nDo not instantiate this class directly, use the\n"
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "Dataset.open"
					},
					{
						"kind": "text",
						"text": " function instead.\n\n"
					},
					{
						"kind": "code",
						"text": "`Dataset`"
					},
					{
						"kind": "text",
						"text": " stores its data either on local disk or in the Apify cloud,\ndepending on whether the "
					},
					{
						"kind": "code",
						"text": "`APIFY_LOCAL_STORAGE_DIR`"
					},
					{
						"kind": "text",
						"text": " or "
					},
					{
						"kind": "code",
						"text": "`APIFY_TOKEN`"
					},
					{
						"kind": "text",
						"text": " environment variables are set.\n\nIf the "
					},
					{
						"kind": "code",
						"text": "`APIFY_LOCAL_STORAGE_DIR`"
					},
					{
						"kind": "text",
						"text": " environment variable is set, the data is stored in\nthe local directory in the following files:\n"
					},
					{
						"kind": "code",
						"text": "```\n{APIFY_LOCAL_STORAGE_DIR}/datasets/{DATASET_ID}/{INDEX}.json\n```"
					},
					{
						"kind": "text",
						"text": "\nNote that "
					},
					{
						"kind": "code",
						"text": "`{DATASET_ID}`"
					},
					{
						"kind": "text",
						"text": " is the name or ID of the dataset. The default dataset has ID: "
					},
					{
						"kind": "code",
						"text": "`default`"
					},
					{
						"kind": "text",
						"text": ",\nunless you override it by setting the "
					},
					{
						"kind": "code",
						"text": "`APIFY_DEFAULT_DATASET_ID`"
					},
					{
						"kind": "text",
						"text": " environment variable.\nEach dataset item is stored as a separate JSON file, where "
					},
					{
						"kind": "code",
						"text": "`{INDEX}`"
					},
					{
						"kind": "text",
						"text": " is a zero-based index of the item in the dataset.\n\nIf the "
					},
					{
						"kind": "code",
						"text": "`APIFY_TOKEN`"
					},
					{
						"kind": "text",
						"text": " environment variable is set but "
					},
					{
						"kind": "code",
						"text": "`APIFY_LOCAL_STORAGE_DIR`"
					},
					{
						"kind": "text",
						"text": " not, the data is stored in the\n[Apify Dataset](https://docs.apify.com/storage/dataset)\ncloud storage. Note that you can force usage of the cloud storage also by passing the "
					},
					{
						"kind": "code",
						"text": "`forceCloud`"
					},
					{
						"kind": "text",
						"text": "\noption to "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "Dataset.open"
					},
					{
						"kind": "text",
						"text": " function,\neven if the "
					},
					{
						"kind": "code",
						"text": "`APIFY_LOCAL_STORAGE_DIR`"
					},
					{
						"kind": "text",
						"text": " variable is set.\n\n**Example usage:**\n\n"
					},
					{
						"kind": "code",
						"text": "```javascript\n// Write a single row to the default dataset\nawait Dataset.pushData({ col1: 123, col2: 'val2' });\n\n// Open a named dataset\nconst dataset = await Dataset.open('some-name');\n\n// Write a single row\nawait dataset.pushData({ foo: 'bar' });\n\n// Write multiple rows\nawait dataset.pushData([\n  { foo: 'bar2', col2: 'val2' },\n  { col3: 123 },\n]);\n\n// Export the entirety of the dataset to one file in the key-value store\nawait dataset.exportToCSV('MY-DATA');\n```"
					}
				]
			},
			"children": [
				{
					"id": 31,
					"name": "client",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 147,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/storages.ts",
							"qualifiedName": "DatasetClient"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 81,
								"name": "Data",
								"package": "@crawlee/core",
								"qualifiedName": "Dataset.Data",
								"refersToTypeParameter": true
							}
						],
						"name": "DatasetClient",
						"package": "@crawlee/types"
					}
				},
				{
					"id": 28,
					"name": "config",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 144,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
							"qualifiedName": "Configuration"
						},
						"name": "Configuration",
						"package": "@crawlee/core"
					}
				},
				{
					"id": 29,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 145,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 32,
					"name": "log",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 148,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": 252,
						"name": "Log",
						"package": "@apify/log"
					}
				},
				{
					"id": 30,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 146,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 79,
					"name": "drop",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 333,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 80,
							"name": "drop",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the dataset either from the Apify cloud storage or from the local directory,\ndepending on the mode of operation."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
									"line": 333,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 39,
					"name": "export",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 186,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 40,
							"name": "export",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns all the data from the dataset. This will iterate through the whole dataset\nvia the "
									},
									{
										"kind": "code",
										"text": "`listItems()`"
									},
									{
										"kind": "text",
										"text": " client method, which gives you only paginated results."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
									"line": 186,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 41,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
											"qualifiedName": "DatasetExportOptions"
										},
										"name": "DatasetExportOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 81,
											"name": "Data",
											"package": "@crawlee/core",
											"qualifiedName": "Dataset.Data",
											"refersToTypeParameter": true
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 42,
					"name": "exportTo",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 194,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 43,
							"name": "exportTo",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Save the entirety of the dataset's contents into one file within a key-value store."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
									"line": 194,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 44,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the value to save the data in."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 45,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An optional options object where you can provide the dataset and target KVS name."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
											"qualifiedName": "DatasetExportToOptions"
										},
										"name": "DatasetExportToOptions",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 46,
									"name": "contentType",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Only JSON and CSV are supported currently, defaults to JSON."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 81,
											"name": "Data",
											"package": "@crawlee/core",
											"qualifiedName": "Dataset.Data",
											"refersToTypeParameter": true
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 51,
					"name": "exportToCSV",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 208,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 52,
							"name": "exportToCSV",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Save entire default dataset's contents into one CSV file within a key-value store."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
									"line": 208,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 53,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the value to save the data in."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 54,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An optional options object where you can provide the target KVS name."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Omit"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
													"qualifiedName": "DatasetExportToOptions"
												},
												"name": "DatasetExportToOptions",
												"package": "@crawlee/core"
											},
											{
												"type": "literal",
												"value": "fromDataset"
											}
										],
										"name": "Omit",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 47,
					"name": "exportToJSON",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 201,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 48,
							"name": "exportToJSON",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Save entire default dataset's contents into one JSON file within a key-value store."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
									"line": 201,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 49,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the value to save the data in."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 50,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An optional options object where you can provide the target KVS name."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Omit"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
													"qualifiedName": "DatasetExportToOptions"
												},
												"name": "DatasetExportToOptions",
												"package": "@crawlee/core"
											},
											{
												"type": "literal",
												"value": "fromDataset"
											}
										],
										"name": "Omit",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 57,
					"name": "forEach",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 266,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 58,
							"name": "forEach",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Iterates over dataset items, yielding each in turn to an "
									},
									{
										"kind": "code",
										"text": "`iteratee`"
									},
									{
										"kind": "text",
										"text": " function.\nEach invocation of "
									},
									{
										"kind": "code",
										"text": "`iteratee`"
									},
									{
										"kind": "text",
										"text": " is called with two arguments: "
									},
									{
										"kind": "code",
										"text": "`(item, index)`"
									},
									{
										"kind": "text",
										"text": ".\n\nIf the "
									},
									{
										"kind": "code",
										"text": "`iteratee`"
									},
									{
										"kind": "text",
										"text": " function returns a Promise then it is awaited before the next call.\nIf it throws an error, the iteration is aborted and the "
									},
									{
										"kind": "code",
										"text": "`forEach`"
									},
									{
										"kind": "text",
										"text": " function throws the error.\n\n**Example usage**\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst dataset = await Dataset.open('my-results');\nawait dataset.forEach(async (item, index) => {\n  console.log(`Item at ${index}: ${JSON.stringify(item)}`);\n});\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@default",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n0\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
									"line": 266,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 59,
									"name": "iteratee",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that is called for every item in the dataset."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 101,
										"typeArguments": [
											{
												"type": "reference",
												"target": 81,
												"name": "Data",
												"package": "@crawlee/core",
												"qualifiedName": "Dataset.Data",
												"refersToTypeParameter": true
											}
										],
										"name": "DatasetConsumer",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 60,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "All "
											},
											{
												"kind": "code",
												"text": "`forEach()`"
											},
											{
												"kind": "text",
												"text": " parameters."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 91,
										"name": "DatasetIteratorOptions",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 61,
									"name": "index",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Specifies the initial index number passed to the "
											},
											{
												"kind": "code",
												"text": "`iteratee`"
											},
											{
												"kind": "text",
												"text": " function."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 36,
					"name": "getData",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 181,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 37,
							"name": "getData",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "DatasetContent"
									},
									{
										"kind": "text",
										"text": " object holding the items in the dataset based on the provided parameters."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
									"line": 181,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 38,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 82,
										"name": "DatasetDataOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 123,
										"typeArguments": [
											{
												"type": "reference",
												"target": 81,
												"name": "Data",
												"package": "@crawlee/core",
												"qualifiedName": "Dataset.Data",
												"refersToTypeParameter": true
											}
										],
										"name": "DatasetContent",
										"package": "@crawlee/core"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 55,
					"name": "getInfo",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 245,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 56,
							"name": "getInfo",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an object containing general information about the dataset.\n\nThe function returns the same object as the Apify API Client's\n[getDataset](https://docs.apify.com/api/apify-client-js/latest#ApifyClient-datasets-getDataset)\nfunction, which in turn calls the\n[Get dataset](https://apify.com/docs/api/v2#/reference/datasets/dataset/get-dataset)\nAPI endpoint.\n\n**Example:**\n"
									},
									{
										"kind": "code",
										"text": "```\n{\n  id: \"WkzbQMuFYuamGv3YF\",\n  name: \"my-dataset\",\n  userId: \"wRsJZtadYvn4mBZmm\",\n  createdAt: new Date(\"2015-12-12T07:34:14.202Z\"),\n  modifiedAt: new Date(\"2015-12-13T08:36:13.202Z\"),\n  accessedAt: new Date(\"2015-12-14T08:36:13.202Z\"),\n  itemCount: 14,\n}\n```"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
									"line": 245,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@crawlee/src/storages.ts",
													"qualifiedName": "DatasetInfo"
												},
												"name": "DatasetInfo",
												"package": "@crawlee/types"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 62,
					"name": "map",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 276,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 63,
							"name": "map",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Produces a new array of values by mapping each value in list through a transformation function "
									},
									{
										"kind": "code",
										"text": "`iteratee()`"
									},
									{
										"kind": "text",
										"text": ".\nEach invocation of "
									},
									{
										"kind": "code",
										"text": "`iteratee()`"
									},
									{
										"kind": "text",
										"text": " is called with two arguments: "
									},
									{
										"kind": "code",
										"text": "`(element, index)`"
									},
									{
										"kind": "text",
										"text": ".\n\nIf "
									},
									{
										"kind": "code",
										"text": "`iteratee`"
									},
									{
										"kind": "text",
										"text": " returns a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " then it's awaited before a next call."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
									"line": 276,
									"character": 4
								}
							],
							"typeParameters": [
								{
									"id": 64,
									"name": "R",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 65,
									"name": "iteratee",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 106,
										"typeArguments": [
											{
												"type": "reference",
												"target": 81,
												"name": "Data",
												"package": "@crawlee/core",
												"qualifiedName": "Dataset.Data",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 64,
												"name": "R",
												"package": "@crawlee/core",
												"refersToTypeParameter": true
											}
										],
										"name": "DatasetMapper",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 66,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "All "
											},
											{
												"kind": "code",
												"text": "`map()`"
											},
											{
												"kind": "text",
												"text": " parameters."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 91,
										"name": "DatasetIteratorOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 64,
											"name": "R",
											"package": "@crawlee/core",
											"refersToTypeParameter": true
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 33,
					"name": "pushData",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 177,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 34,
							"name": "pushData",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stores an object or an array of objects to the dataset.\nThe function returns a promise that resolves when the operation finishes.\nIt has no result, but throws on invalid args or other errors.\n\n**IMPORTANT**: Make sure to use the "
									},
									{
										"kind": "code",
										"text": "`await`"
									},
									{
										"kind": "text",
										"text": " keyword when calling "
									},
									{
										"kind": "code",
										"text": "`pushData()`"
									},
									{
										"kind": "text",
										"text": ",\notherwise the crawler process might finish before the data is stored!\n\nThe size of the data is limited by the receiving API and therefore "
									},
									{
										"kind": "code",
										"text": "`pushData()`"
									},
									{
										"kind": "text",
										"text": " will only\nallow objects whose JSON representation is smaller than 9MB. When an array is passed,\nnone of the included objects\nmay be larger than 9MB, but the array itself may be of any size.\n\nThe function internally\nchunks the array into separate items and pushes them sequentially.\nThe chunking process is stable (keeps order of data), but it does not provide a transaction\nsafety mechanism. Therefore, in the event of an uploading error (after several automatic retries),\nthe function's Promise will reject and the dataset will be left in a state where some of\nthe items have already been saved to the dataset while other items from the source array were not.\nTo overcome this limitation, the developer may, for example, read the last item saved in the dataset\nand re-attempt the save of the data from this item onwards to prevent duplicates."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
									"line": 177,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 35,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Object or array of objects containing data to be stored in the default dataset.\n  The objects must be serializable to JSON and the JSON representation of each object must be smaller than 9MB."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": 81,
												"name": "Data",
												"package": "@crawlee/core",
												"qualifiedName": "Dataset.Data",
												"refersToTypeParameter": true
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 81,
													"name": "Data",
													"package": "@crawlee/core",
													"qualifiedName": "Dataset.Data",
													"refersToTypeParameter": true
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 67,
					"name": "reduce",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 294,
							"character": 4
						},
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 314,
							"character": 4
						},
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 328,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 68,
							"name": "reduce",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reduces a list of values down to a single value.\n\nThe first element of the dataset is the initial value, with each successive reductions should\nbe returned by "
									},
									{
										"kind": "code",
										"text": "`iteratee()`"
									},
									{
										"kind": "text",
										"text": ". The "
									},
									{
										"kind": "code",
										"text": "`iteratee()`"
									},
									{
										"kind": "text",
										"text": " is passed three arguments: the "
									},
									{
										"kind": "code",
										"text": "`memo`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": "\nand "
									},
									{
										"kind": "code",
										"text": "`index`"
									},
									{
										"kind": "text",
										"text": " of the current element being folded into the reduction.\n\nThe "
									},
									{
										"kind": "code",
										"text": "`iteratee`"
									},
									{
										"kind": "text",
										"text": " is first invoked on the second element of the list ("
									},
									{
										"kind": "code",
										"text": "`index = 1`"
									},
									{
										"kind": "text",
										"text": "), with the\nfirst element given as the memo parameter. After that, the rest of the elements in the\ndataset is passed to "
									},
									{
										"kind": "code",
										"text": "`iteratee`"
									},
									{
										"kind": "text",
										"text": ", with the result of the previous invocation as the memo.\n\nIf "
									},
									{
										"kind": "code",
										"text": "`iteratee()`"
									},
									{
										"kind": "text",
										"text": " returns a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " it's awaited before a next call.\n\nIf the dataset is empty, reduce will return undefined."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
									"line": 294,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 69,
									"name": "iteratee",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 112,
										"typeArguments": [
											{
												"type": "reference",
												"target": 81,
												"name": "Data",
												"package": "@crawlee/core",
												"qualifiedName": "Dataset.Data",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 81,
												"name": "Data",
												"package": "@crawlee/core",
												"qualifiedName": "Dataset.Data",
												"refersToTypeParameter": true
											}
										],
										"name": "DatasetReducer",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"target": 81,
												"name": "Data",
												"package": "@crawlee/core",
												"qualifiedName": "Dataset.Data",
												"refersToTypeParameter": true
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						},
						{
							"id": 70,
							"name": "reduce",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reduces a list of values down to a single value.\n\nThe first element of the dataset is the initial value, with each successive reductions should\nbe returned by "
									},
									{
										"kind": "code",
										"text": "`iteratee()`"
									},
									{
										"kind": "text",
										"text": ". The "
									},
									{
										"kind": "code",
										"text": "`iteratee()`"
									},
									{
										"kind": "text",
										"text": " is passed three arguments: the "
									},
									{
										"kind": "code",
										"text": "`memo`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": "\nand "
									},
									{
										"kind": "code",
										"text": "`index`"
									},
									{
										"kind": "text",
										"text": " of the current element being folded into the reduction.\n\nThe "
									},
									{
										"kind": "code",
										"text": "`iteratee`"
									},
									{
										"kind": "text",
										"text": " is first invoked on the second element of the list ("
									},
									{
										"kind": "code",
										"text": "`index = 1`"
									},
									{
										"kind": "text",
										"text": "), with the\nfirst element given as the memo parameter. After that, the rest of the elements in the\ndataset is passed to "
									},
									{
										"kind": "code",
										"text": "`iteratee`"
									},
									{
										"kind": "text",
										"text": ", with the result of the previous invocation as the memo.\n\nIf "
									},
									{
										"kind": "code",
										"text": "`iteratee()`"
									},
									{
										"kind": "text",
										"text": " returns a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " it's awaited before a next call.\n\nIf the dataset is empty, reduce will return undefined."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
									"line": 314,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 71,
									"name": "iteratee",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 112,
										"typeArguments": [
											{
												"type": "reference",
												"target": 81,
												"name": "Data",
												"package": "@crawlee/core",
												"qualifiedName": "Dataset.Data",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 81,
												"name": "Data",
												"package": "@crawlee/core",
												"qualifiedName": "Dataset.Data",
												"refersToTypeParameter": true
											}
										],
										"name": "DatasetReducer",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 72,
									"name": "memo",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Unset parameter, neccesary to be able to pass options"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "undefined"
									}
								},
								{
									"id": 73,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An object containing extra options for "
											},
											{
												"kind": "code",
												"text": "`reduce()`"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 91,
										"name": "DatasetIteratorOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"target": 81,
												"name": "Data",
												"package": "@crawlee/core",
												"qualifiedName": "Dataset.Data",
												"refersToTypeParameter": true
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						},
						{
							"id": 74,
							"name": "reduce",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reduces a list of values down to a single value.\n\nMemo is the initial state of the reduction, and each successive step of it should be returned\nby "
									},
									{
										"kind": "code",
										"text": "`iteratee()`"
									},
									{
										"kind": "text",
										"text": ". The "
									},
									{
										"kind": "code",
										"text": "`iteratee()`"
									},
									{
										"kind": "text",
										"text": " is passed three arguments: the "
									},
									{
										"kind": "code",
										"text": "`memo`"
									},
									{
										"kind": "text",
										"text": ", then the "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " and\n"
									},
									{
										"kind": "code",
										"text": "`index`"
									},
									{
										"kind": "text",
										"text": " of the iteration.\n\nIf "
									},
									{
										"kind": "code",
										"text": "`iteratee()`"
									},
									{
										"kind": "text",
										"text": " returns a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " then it's awaited before a next call."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
									"line": 328,
									"character": 4
								}
							],
							"typeParameters": [
								{
									"id": 75,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 76,
									"name": "iteratee",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 112,
										"typeArguments": [
											{
												"type": "reference",
												"target": 75,
												"name": "T",
												"package": "@crawlee/core",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 81,
												"name": "Data",
												"package": "@crawlee/core",
												"qualifiedName": "Dataset.Data",
												"refersToTypeParameter": true
											}
										],
										"name": "DatasetReducer",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 77,
									"name": "memo",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Initial state of the reduction."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 75,
										"name": "T",
										"package": "@crawlee/core",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 78,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An object containing extra options for "
											},
											{
												"kind": "code",
												"text": "`reduce()`"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 91,
										"name": "DatasetIteratorOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 75,
										"name": "T",
										"package": "@crawlee/core",
										"refersToTypeParameter": true
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 6,
					"name": "exportToCSV",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 222,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 7,
							"name": "exportToCSV",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Save entire default dataset's contents into one CSV file within a key-value store."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
									"line": 222,
									"character": 11
								}
							],
							"parameters": [
								{
									"id": 8,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the value to save the data in."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 9,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An optional options object where you can provide the dataset and target KVS name."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
											"qualifiedName": "DatasetExportToOptions"
										},
										"name": "DatasetExportToOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 2,
					"name": "exportToJSON",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 215,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 3,
							"name": "exportToJSON",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Save entire default dataset's contents into one JSON file within a key-value store."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
									"line": 215,
									"character": 11
								}
							],
							"parameters": [
								{
									"id": 4,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the value to save the data in."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An optional options object where you can provide the dataset and target KVS name."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
											"qualifiedName": "DatasetExportToOptions"
										},
										"name": "DatasetExportToOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 19,
					"name": "getData",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 377,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 20,
							"name": "getData",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "DatasetContent"
									},
									{
										"kind": "text",
										"text": " object holding the items in the dataset based on the provided parameters."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
									"line": 377,
									"character": 11
								}
							],
							"typeParameters": [
								{
									"id": 21,
									"name": "Data",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"parameters": [
								{
									"id": 22,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 82,
										"name": "DatasetDataOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 123,
										"typeArguments": [
											{
												"type": "reference",
												"target": 21,
												"name": "Data",
												"package": "@crawlee/core",
												"refersToTypeParameter": true
											}
										],
										"name": "DatasetContent",
										"package": "@crawlee/core"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 10,
					"name": "open",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 348,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 11,
							"name": "open",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Opens a dataset and returns a promise resolving to an instance of the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " class.\n\nDatasets are used to store structured data where each object stored has the same attributes,\nsuch as online store products or real estate offers.\nThe actual data is stored either on the local filesystem or in the cloud.\n\nFor more details and code examples, see the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " class."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
									"line": 348,
									"character": 11
								}
							],
							"typeParameters": [
								{
									"id": 12,
									"name": "Data",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"parameters": [
								{
									"id": 13,
									"name": "datasetIdOrName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "ID or name of the dataset to be opened. If "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`undefined`"
											},
											{
												"kind": "text",
												"text": ",\n  the function returns the default dataset associated with the crawler run."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 14,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Storage manager options."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/storages/storage_manager.ts",
											"qualifiedName": "StorageManagerOptions"
										},
										"name": "StorageManagerOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1,
										"typeArguments": [
											{
												"type": "reference",
												"target": 12,
												"name": "Data",
												"package": "@crawlee/core",
												"refersToTypeParameter": true
											}
										],
										"name": "Dataset",
										"package": "@crawlee/core"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						31,
						28,
						29,
						32,
						30
					]
				},
				{
					"title": "Methods",
					"children": [
						79,
						39,
						42,
						51,
						47,
						57,
						36,
						55,
						62,
						33,
						67,
						6,
						2,
						19,
						10
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
					"line": 143,
					"character": 21
				}
			],
			"typeParameters": [
				{
					"id": 81,
					"name": "Data",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
							"qualifiedName": "Dictionary"
						},
						"name": "Dictionary",
						"package": "@crawlee/types"
					},
					"default": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
							"qualifiedName": "Dictionary"
						},
						"name": "Dictionary",
						"package": "@crawlee/types"
					}
				}
			]
		},
		{
			"id": 1300,
			"name": "ChargingManager",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Handles pay-per-event charging."
					}
				]
			},
			"children": [
				{
					"id": 1301,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/charging.ts",
							"line": 28,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L28"
						}
					],
					"signatures": [
						{
							"id": 1302,
							"name": "new ChargingManager",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/apify/src/charging.ts",
									"line": 28,
									"character": 4,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L28"
								}
							],
							"parameters": [
								{
									"id": 1303,
									"name": "configuration",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 1422,
										"name": "Configuration",
										"package": "apify"
									}
								},
								{
									"id": 1304,
									"name": "apifyClient",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 817,
										"name": "ApifyClient",
										"package": "apify-client"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1300,
								"name": "ChargingManager",
								"package": "apify"
							}
						}
					]
				},
				{
					"id": 1339,
					"name": "calculateMaxEventChargeCountWithinLimit",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/charging.ts",
							"line": 264,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L264"
						}
					],
					"signatures": [
						{
							"id": 1340,
							"name": "calculateMaxEventChargeCountWithinLimit",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "How many events of a given type can still be charged for before reaching the limit;\nIf the event is not registered, returns Infinity (free of charge)"
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/charging.ts",
									"line": 264,
									"character": 4,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L264"
								}
							],
							"parameters": [
								{
									"id": 1341,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 1332,
					"name": "getChargedEventCount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/charging.ts",
							"line": 230,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L230"
						}
					],
					"signatures": [
						{
							"id": 1333,
							"name": "getChargedEventCount",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Get the number of events with given name that the Actor has charged for so far."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/charging.ts",
									"line": 230,
									"character": 4,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L230"
								}
							],
							"parameters": [
								{
									"id": 1334,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 1335,
					"name": "getMaxTotalChargeUsd",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/charging.ts",
							"line": 241,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L241"
						}
					],
					"signatures": [
						{
							"id": 1336,
							"name": "getMaxTotalChargeUsd",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Get the maximum amount of money that the Actor is allowed to charge."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/charging.ts",
									"line": 241,
									"character": 4,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L241"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 1327,
					"name": "getPricingInfo",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/charging.ts",
							"line": 129,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L129"
						}
					],
					"signatures": [
						{
							"id": 1328,
							"name": "getPricingInfo",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Get information about the pricing for this Actor."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/charging.ts",
									"line": 129,
									"character": 4,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L129"
								}
							],
							"type": {
								"type": "reference",
								"target": 1349,
								"name": "ActorPricingInfo",
								"package": "apify"
							}
						}
					]
				},
				{
					"id": 1329,
					"name": "charge",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/charging.ts",
							"line": 149,
							"character": 10,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L149"
						}
					],
					"signatures": [
						{
							"id": 1330,
							"name": "charge",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Charge for a specified number of events - sub-operations of the Actor."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/charging.ts",
									"line": 149,
									"character": 10,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L149"
								}
							],
							"parameters": [
								{
									"id": 1331,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event to charge for and the number of events to be charged."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1342,
										"name": "ChargeOptions",
										"package": "apify"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1345,
										"name": "ChargeResult",
										"package": "apify"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1323,
					"name": "init",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/charging.ts",
							"line": 57,
							"character": 10,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L57"
						}
					],
					"signatures": [
						{
							"id": 1324,
							"name": "init",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Initialize the ChargingManager by loading pricing information and charging state via Apify API."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/charging.ts",
									"line": 57,
									"character": 10,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L57"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1301
					]
				},
				{
					"title": "Methods",
					"children": [
						1339,
						1332,
						1335,
						1327,
						1329,
						1323
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/charging.ts",
					"line": 10,
					"character": 13,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L10"
				}
			]
		},
		{
			"id": 1733,
			"name": "KeyValueStore",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [],
				"blockTags": [
					{
						"tag": "@inheritDoc",
						"content": []
					}
				]
			},
			"children": [
				{
					"id": 1770,
					"name": "config",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isReadonly": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 70,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
							"qualifiedName": "Configuration"
						},
						"name": "Configuration",
						"package": "@crawlee/core"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreKeyValueStore.config"
					}
				},
				{
					"id": 1771,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isReadonly": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 71,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreKeyValueStore.id"
					}
				},
				{
					"id": 1772,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isReadonly": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 72,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreKeyValueStore.name"
					}
				},
				{
					"id": 1773,
					"name": "storageObject",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isReadonly": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 73,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreKeyValueStore.storageObject"
					}
				},
				{
					"id": 1796,
					"name": "drop",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 203,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1797,
							"name": "drop",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the key-value store either from the Apify cloud storage or from the local directory,\ndepending on the mode of operation."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
									"line": 203,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "CoreKeyValueStore.drop"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreKeyValueStore.drop"
					}
				},
				{
					"id": 1800,
					"name": "forEachKey",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 227,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1801,
							"name": "forEachKey",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Iterates over key-value store keys, yielding each in turn to an "
									},
									{
										"kind": "code",
										"text": "`iteratee`"
									},
									{
										"kind": "text",
										"text": " function.\nEach invocation of "
									},
									{
										"kind": "code",
										"text": "`iteratee`"
									},
									{
										"kind": "text",
										"text": " is called with three arguments: "
									},
									{
										"kind": "code",
										"text": "`(key, index, info)`"
									},
									{
										"kind": "text",
										"text": ", where "
									},
									{
										"kind": "code",
										"text": "`key`"
									},
									{
										"kind": "text",
										"text": "\nis the record key, "
									},
									{
										"kind": "code",
										"text": "`index`"
									},
									{
										"kind": "text",
										"text": " is a zero-based index of the key in the current iteration\n(regardless of "
									},
									{
										"kind": "code",
										"text": "`options.exclusiveStartKey`"
									},
									{
										"kind": "text",
										"text": ") and "
									},
									{
										"kind": "code",
										"text": "`info`"
									},
									{
										"kind": "text",
										"text": " is an object that contains a single property "
									},
									{
										"kind": "code",
										"text": "`size`"
									},
									{
										"kind": "text",
										"text": "\nindicating size of the record in bytes.\n\nIf the "
									},
									{
										"kind": "code",
										"text": "`iteratee`"
									},
									{
										"kind": "text",
										"text": " function returns a Promise then it is awaited before the next call.\nIf it throws an error, the iteration is aborted and the "
									},
									{
										"kind": "code",
										"text": "`forEachKey`"
									},
									{
										"kind": "text",
										"text": " function throws the error.\n\n**Example usage**\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst keyValueStore = await KeyValueStore.open();\nawait keyValueStore.forEachKey(async (key, index, info) => {\n  console.log(`Key at ${index}: ${key} has size ${info.size}`);\n});\n```"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
									"line": 227,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1802,
									"name": "iteratee",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that is called for every key in the key-value store."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 235,
										"name": "KeyConsumer",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 1803,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "All "
											},
											{
												"kind": "code",
												"text": "`forEachKey()`"
											},
											{
												"kind": "text",
												"text": " parameters."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 249,
										"name": "KeyValueStoreIteratorOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "CoreKeyValueStore.forEachKey"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreKeyValueStore.forEachKey"
					}
				},
				{
					"id": 1785,
					"name": "getAutoSavedValue",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 153,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1786,
							"name": "getAutoSavedValue",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
									"line": 153,
									"character": 4
								}
							],
							"typeParameters": [
								{
									"id": 1787,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"parameters": [
								{
									"id": 1788,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1789,
									"name": "defaultValue",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 1787,
										"name": "T",
										"package": "@crawlee/core",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1787,
										"name": "T",
										"package": "@crawlee/core",
										"refersToTypeParameter": true
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "CoreKeyValueStore.getAutoSavedValue"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreKeyValueStore.getAutoSavedValue"
					}
				},
				{
					"id": 1767,
					"name": "getPublicUrl",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/key_value_store.ts",
							"line": 18,
							"character": 13,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/key_value_store.ts#L18"
						}
					],
					"signatures": [
						{
							"id": 1768,
							"name": "getPublicUrl",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a URL for the given key that may be used to publicly\naccess the value in the remote key-value store."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/key_value_store.ts",
									"line": 18,
									"character": 13,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/key_value_store.ts#L18"
								}
							],
							"parameters": [
								{
									"id": 1769,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "CoreKeyValueStore.getPublicUrl"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "CoreKeyValueStore.getPublicUrl"
					}
				},
				{
					"id": 1774,
					"name": "getValue",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 112,
							"character": 4
						},
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 145,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1775,
							"name": "getValue",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets a value from the key-value store.\n\nThe function returns a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " that resolves to the record value,\nwhose JavaScript type depends on the MIME content type of the record.\nRecords with the "
									},
									{
										"kind": "code",
										"text": "`application/json`"
									},
									{
										"kind": "text",
										"text": "\ncontent type are automatically parsed and returned as a JavaScript object.\nSimilarly, records with "
									},
									{
										"kind": "code",
										"text": "`text/plain`"
									},
									{
										"kind": "text",
										"text": " content types are returned as a string.\nFor all other content types, the value is returned as a raw\n["
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": "](https://nodejs.org/api/buffer.html) instance.\n\nIf the record does not exist, the function resolves to "
									},
									{
										"kind": "code",
										"text": "`null`"
									},
									{
										"kind": "text",
										"text": ".\n\nTo save or delete a value in the key-value store, use the\n"
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore.setValue"
									},
									{
										"kind": "text",
										"text": " function.\n\n**Example usage:**\n\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst store = await KeyValueStore.open();\nconst buffer = await store.getValue('screenshot1.png');\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Returns a promise that resolves to an object, string\n  or ["
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": "](https://nodejs.org/api/buffer.html), depending\n  on the MIME content type of the record."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
									"line": 112,
									"character": 4
								}
							],
							"typeParameters": [
								{
									"id": 1776,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									},
									"default": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"parameters": [
								{
									"id": 1777,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Unique key of the record. It can be at most 256 characters long and only consist\n  of the following characters: "
											},
											{
												"kind": "code",
												"text": "`a`"
											},
											{
												"kind": "text",
												"text": "-"
											},
											{
												"kind": "code",
												"text": "`z`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`A`"
											},
											{
												"kind": "text",
												"text": "-"
											},
											{
												"kind": "code",
												"text": "`Z`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`0`"
											},
											{
												"kind": "text",
												"text": "-"
											},
											{
												"kind": "code",
												"text": "`9`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`!-_.'()`"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"target": 1776,
												"name": "T",
												"package": "@crawlee/core",
												"refersToTypeParameter": true
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "CoreKeyValueStore.getValue"
							}
						},
						{
							"id": 1778,
							"name": "getValue",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets a value from the key-value store.\n\nThe function returns a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " that resolves to the record value,\nwhose JavaScript type depends on the MIME content type of the record.\nRecords with the "
									},
									{
										"kind": "code",
										"text": "`application/json`"
									},
									{
										"kind": "text",
										"text": "\ncontent type are automatically parsed and returned as a JavaScript object.\nSimilarly, records with "
									},
									{
										"kind": "code",
										"text": "`text/plain`"
									},
									{
										"kind": "text",
										"text": " content types are returned as a string.\nFor all other content types, the value is returned as a raw\n["
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": "](https://nodejs.org/api/buffer.html) instance.\n\nIf the record does not exist, the function resolves to "
									},
									{
										"kind": "code",
										"text": "`null`"
									},
									{
										"kind": "text",
										"text": ".\n\nTo save or delete a value in the key-value store, use the\n"
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore.setValue"
									},
									{
										"kind": "text",
										"text": " function.\n\n**Example usage:**\n\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst store = await KeyValueStore.open();\nconst buffer = await store.getValue('screenshot1.png');\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Returns a promise that resolves to an object, string\n  or ["
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": "](https://nodejs.org/api/buffer.html), depending\n  on the MIME content type of the record, or the default value if the key is missing from the store."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
									"line": 145,
									"character": 4
								}
							],
							"typeParameters": [
								{
									"id": 1779,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									},
									"default": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"parameters": [
								{
									"id": 1780,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Unique key of the record. It can be at most 256 characters long and only consist\n  of the following characters: "
											},
											{
												"kind": "code",
												"text": "`a`"
											},
											{
												"kind": "text",
												"text": "-"
											},
											{
												"kind": "code",
												"text": "`z`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`A`"
											},
											{
												"kind": "text",
												"text": "-"
											},
											{
												"kind": "code",
												"text": "`Z`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`0`"
											},
											{
												"kind": "text",
												"text": "-"
											},
											{
												"kind": "code",
												"text": "`9`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`!-_.'()`"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1781,
									"name": "defaultValue",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Fallback that will be returned if no value if present in the storage."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1779,
										"name": "T",
										"package": "@crawlee/core",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1779,
										"name": "T",
										"package": "@crawlee/core",
										"refersToTypeParameter": true
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "CoreKeyValueStore.getValue"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreKeyValueStore.getValue"
					}
				},
				{
					"id": 1782,
					"name": "recordExists",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 152,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1783,
							"name": "recordExists",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Tests whether a record with the given key exists in the key-value store without retrieving its value."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`true`"
											},
											{
												"kind": "text",
												"text": " if the record exists, "
											},
											{
												"kind": "code",
												"text": "`false`"
											},
											{
												"kind": "text",
												"text": " if it does not."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
									"line": 152,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1784,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The queried record key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "CoreKeyValueStore.recordExists"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreKeyValueStore.recordExists"
					}
				},
				{
					"id": 1790,
					"name": "setValue",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 198,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1791,
							"name": "setValue",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Saves or deletes a record in the key-value store.\nThe function returns a promise that resolves once the record has been saved or deleted.\n\n**Example usage:**\n\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst store = await KeyValueStore.open();\nawait store.setValue('OUTPUT', { foo: 'bar' });\n```"
									},
									{
										"kind": "text",
										"text": "\n\nBeware that the key can be at most 256 characters long and only contain the following characters: "
									},
									{
										"kind": "code",
										"text": "`a-zA-Z0-9!-_.'()`"
									},
									{
										"kind": "text",
										"text": "\n\nBy default, "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is converted to JSON and stored with the\n"
									},
									{
										"kind": "code",
										"text": "`application/json; charset=utf-8`"
									},
									{
										"kind": "text",
										"text": " MIME content type.\nTo store the value with another content type, pass it in the options as follows:\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst store = await KeyValueStore.open('my-text-store');\nawait store.setValue('RESULTS', 'my text data', { contentType: 'text/plain' });\n```"
									},
									{
										"kind": "text",
										"text": "\nIf you set custom content type, "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " must be either a string or\n["
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": "](https://nodejs.org/api/buffer.html), otherwise an error will be thrown.\n\nIf "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is "
									},
									{
										"kind": "code",
										"text": "`null`"
									},
									{
										"kind": "text",
										"text": ", the record is deleted instead. Note that the "
									},
									{
										"kind": "code",
										"text": "`setValue()`"
									},
									{
										"kind": "text",
										"text": " function succeeds\nregardless whether the record existed or not.\n\nTo retrieve a value from the key-value store, use the\n"
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore.getValue"
									},
									{
										"kind": "text",
										"text": " function.\n\n**IMPORTANT:** Always make sure to use the "
									},
									{
										"kind": "code",
										"text": "`await`"
									},
									{
										"kind": "text",
										"text": " keyword when calling "
									},
									{
										"kind": "code",
										"text": "`setValue()`"
									},
									{
										"kind": "text",
										"text": ",\notherwise the crawler process might finish before the value is stored!"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
									"line": 198,
									"character": 4
								}
							],
							"typeParameters": [
								{
									"id": 1792,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 1793,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Unique key of the record. It can be at most 256 characters long and only consist\n  of the following characters: "
											},
											{
												"kind": "code",
												"text": "`a`"
											},
											{
												"kind": "text",
												"text": "-"
											},
											{
												"kind": "code",
												"text": "`z`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`A`"
											},
											{
												"kind": "text",
												"text": "-"
											},
											{
												"kind": "code",
												"text": "`Z`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`0`"
											},
											{
												"kind": "text",
												"text": "-"
											},
											{
												"kind": "code",
												"text": "`9`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`!-_.'()`"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1794,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Record data, which can be one of the following values:\n   - If "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": ", the record in the key-value store is deleted.\n   - If no "
											},
											{
												"kind": "code",
												"text": "`options.contentType`"
											},
											{
												"kind": "text",
												"text": " is specified, "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " can be any JavaScript object and it will be stringified to JSON.\n   - If "
											},
											{
												"kind": "code",
												"text": "`options.contentType`"
											},
											{
												"kind": "text",
												"text": " is set, "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " is taken as is and it must be a "
											},
											{
												"kind": "code",
												"text": "`String`"
											},
											{
												"kind": "text",
												"text": " or ["
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": "](https://nodejs.org/api/buffer.html).\n  For any other value an error will be thrown."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"target": 1792,
												"name": "T",
												"package": "@crawlee/core",
												"refersToTypeParameter": true
											}
										]
									}
								},
								{
									"id": 1795,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Record options."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 247,
										"name": "RecordOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "CoreKeyValueStore.setValue"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreKeyValueStore.setValue"
					}
				},
				{
					"id": 1749,
					"name": "getAutoSavedValue",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 312,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1750,
							"name": "getAutoSavedValue",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
									"line": 312,
									"character": 11
								}
							],
							"typeParameters": [
								{
									"id": 1751,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"parameters": [
								{
									"id": 1752,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1753,
									"name": "defaultValue",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 1751,
										"name": "T",
										"package": "@crawlee/core",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1751,
										"name": "T",
										"package": "@crawlee/core",
										"refersToTypeParameter": true
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "CoreKeyValueStore.getAutoSavedValue"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreKeyValueStore.getAutoSavedValue"
					}
				},
				{
					"id": 1734,
					"name": "open",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/key_value_store.ts",
							"line": 36,
							"character": 26,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/key_value_store.ts#L36"
						}
					],
					"signatures": [
						{
							"id": 1735,
							"name": "open",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@inheritDoc",
										"content": []
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/key_value_store.ts",
									"line": 36,
									"character": 26,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/key_value_store.ts#L36"
								}
							],
							"parameters": [
								{
									"id": 1736,
									"name": "storeIdOrName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 1737,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/storages/storage_manager.ts",
											"qualifiedName": "StorageManagerOptions"
										},
										"name": "StorageManagerOptions",
										"package": "@crawlee/core"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1733,
										"name": "KeyValueStore",
										"package": "apify"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "CoreKeyValueStore.open"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "CoreKeyValueStore.open"
					}
				},
				{
					"id": 1746,
					"name": "recordExists",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 311,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1747,
							"name": "recordExists",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Tests whether a record with the given key exists in the default "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore"
									},
									{
										"kind": "text",
										"text": " associated with the current crawler run."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "code",
												"text": "`true`"
											},
											{
												"kind": "text",
												"text": " if the record exists, "
											},
											{
												"kind": "code",
												"text": "`false`"
											},
											{
												"kind": "text",
												"text": " if it does not."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
									"line": 311,
									"character": 11
								}
							],
							"parameters": [
								{
									"id": 1748,
									"name": "key",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The queried record key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "CoreKeyValueStore.recordExists"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreKeyValueStore.recordExists"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1770,
						1771,
						1772,
						1773
					]
				},
				{
					"title": "Methods",
					"children": [
						1796,
						1800,
						1785,
						1767,
						1774,
						1782,
						1790,
						1749,
						1734,
						1746
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/key_value_store.ts",
					"line": 13,
					"character": 13,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/key_value_store.ts#L13"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
						"qualifiedName": "KeyValueStore"
					},
					"name": "KeyValueStore",
					"package": "@crawlee/core"
				}
			]
		},
		{
			"id": 252,
			"name": "Log",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The log instance enables level aware logging of messages and we advise\nto use it instead of "
					},
					{
						"kind": "code",
						"text": "`console.log()`"
					},
					{
						"kind": "text",
						"text": " and its aliases in most development\nscenarios.\n\nA very useful use case for "
					},
					{
						"kind": "code",
						"text": "`log`"
					},
					{
						"kind": "text",
						"text": " is using "
					},
					{
						"kind": "code",
						"text": "`log.debug`"
					},
					{
						"kind": "text",
						"text": " liberally throughout\nthe codebase to get useful logging messages only when appropriate log level is set\nand keeping the console tidy in production environments.\n\nThe available logging levels are, in this order: "
					},
					{
						"kind": "code",
						"text": "`DEBUG`"
					},
					{
						"kind": "text",
						"text": ", "
					},
					{
						"kind": "code",
						"text": "`INFO`"
					},
					{
						"kind": "text",
						"text": ", "
					},
					{
						"kind": "code",
						"text": "`WARNING`"
					},
					{
						"kind": "text",
						"text": ", "
					},
					{
						"kind": "code",
						"text": "`ERROR`"
					},
					{
						"kind": "text",
						"text": ", "
					},
					{
						"kind": "code",
						"text": "`OFF`"
					},
					{
						"kind": "text",
						"text": "\nand can be referenced from the "
					},
					{
						"kind": "code",
						"text": "`log.LEVELS`"
					},
					{
						"kind": "text",
						"text": " constant, such as "
					},
					{
						"kind": "code",
						"text": "`log.LEVELS.ERROR`"
					},
					{
						"kind": "text",
						"text": ".\n\nTo log messages to the system console, use the "
					},
					{
						"kind": "code",
						"text": "`log.level(message)`"
					},
					{
						"kind": "text",
						"text": " invocation,\nsuch as "
					},
					{
						"kind": "code",
						"text": "`log.debug('this is a debug message')`"
					},
					{
						"kind": "text",
						"text": ".\n\nTo prevent writing of messages above a certain log level to the console, simply\nset the appropriate level. The default log level is "
					},
					{
						"kind": "code",
						"text": "`INFO`"
					},
					{
						"kind": "text",
						"text": ", which means that\n"
					},
					{
						"kind": "code",
						"text": "`DEBUG`"
					},
					{
						"kind": "text",
						"text": " messages will not be printed, unless enabled.\n\n**Example:**\n"
					},
					{
						"kind": "code",
						"text": "```js\nimport log from '@apify/log';\n\n// importing from the Apify SDK or Crawlee is also supported:\n// import { log } from 'apify';\n// import { log } from 'crawlee';\n\nlog.info('Information message', { someData: 123 }); // prints message\nlog.debug('Debug message', { debugData: 'hello' }); // doesn't print anything\n\nlog.setLevel(log.LEVELS.DEBUG);\nlog.debug('Debug message'); // prints message\n\nlog.setLevel(log.LEVELS.ERROR);\nlog.debug('Debug message'); // doesn't print anything\nlog.info('Info message'); // doesn't print anything\nlog.error('Error message', { errorDetails: 'This is bad!' }); // prints message\n\ntry {\n  throw new Error('Not good!');\n} catch (e) {\n  log.exception(e, 'Exception occurred', { errorDetails: 'This is really bad!' }); // prints message\n}\n\nlog.setOptions({ prefix: 'My actor' });\nlog.info('I am running!'); // prints \"My actor: I am running\"\n\nconst childLog = log.child({ prefix: 'Crawler' });\nlog.info('I am crawling!'); // prints \"My actor:Crawler: I am crawling\"\n```"
					},
					{
						"kind": "text",
						"text": "\n\nAnother very useful way of setting the log level is by setting the "
					},
					{
						"kind": "code",
						"text": "`APIFY_LOG_LEVEL`"
					},
					{
						"kind": "text",
						"text": "\nenvironment variable, such as "
					},
					{
						"kind": "code",
						"text": "`APIFY_LOG_LEVEL=DEBUG`"
					},
					{
						"kind": "text",
						"text": ". This way, no code changes\nare necessary to turn on your debug messages and start debugging right away.\n\nTo add timestamps to your logs, you can override the default logger settings:\n"
					},
					{
						"kind": "code",
						"text": "```js\nlog.setOptions({\n    logger: new log.LoggerText({ skipTime: false }),\n});\n```"
					},
					{
						"kind": "text",
						"text": "\nYou can customize your logging further by extending or replacing the default\nlogger instances with your own implementations."
					}
				]
			},
			"children": [
				{
					"id": 253,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 136,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 254,
							"name": "new Log",
							"variant": "signature",
							"kind": 16384,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 136,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 255,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Partial"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 314,
												"name": "LoggerOptions",
												"package": "@apify/log"
											}
										],
										"name": "Partial",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 252,
								"name": "Log",
								"package": "@apify/log"
							}
						}
					]
				},
				{
					"id": 256,
					"name": "LEVELS",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Map of available log levels that's useful for easy setting of appropriate log levels.\nEach log level is represented internally by a number. Eg. "
							},
							{
								"kind": "code",
								"text": "`log.LEVELS.DEBUG === 5`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 133,
							"character": 13
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"target": 322,
							"name": "LogLevel",
							"package": "@apify/log"
						}
					}
				},
				{
					"id": 300,
					"name": "debug",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 195,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 301,
							"name": "debug",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Logs a "
									},
									{
										"kind": "code",
										"text": "`DEBUG`"
									},
									{
										"kind": "text",
										"text": " message. By default, it will not be written to the console. To see "
									},
									{
										"kind": "code",
										"text": "`DEBUG`"
									},
									{
										"kind": "text",
										"text": "\nmessages in the console, set the log level to "
									},
									{
										"kind": "code",
										"text": "`DEBUG`"
									},
									{
										"kind": "text",
										"text": " either using the "
									},
									{
										"kind": "code",
										"text": "`log.setLevel(log.LEVELS.DEBUG)`"
									},
									{
										"kind": "text",
										"text": "\nmethod or using the environment variable "
									},
									{
										"kind": "code",
										"text": "`APIFY_LOG_LEVEL=DEBUG`"
									},
									{
										"kind": "text",
										"text": ". Data are stringified and appended\nto the message."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 195,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 302,
									"name": "message",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 303,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
											"qualifiedName": "AdditionalData"
										},
										"name": "AdditionalData",
										"package": "@apify/log"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 311,
					"name": "deprecated",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 204,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 312,
							"name": "deprecated",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Logs given message only once as WARNING. It's used to warn user that some feature he is using has been deprecated."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 204,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 313,
									"name": "message",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 279,
					"name": "error",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 173,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 280,
							"name": "error",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Logs an "
									},
									{
										"kind": "code",
										"text": "`ERROR`"
									},
									{
										"kind": "text",
										"text": " message. Use this method to log error messages that are not directly connected\nto an exception. For logging exceptions, use the "
									},
									{
										"kind": "code",
										"text": "`log.exception`"
									},
									{
										"kind": "text",
										"text": " method."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 173,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 281,
									"name": "message",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 282,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
											"qualifiedName": "AdditionalData"
										},
										"name": "AdditionalData",
										"package": "@apify/log"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 283,
					"name": "exception",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 178,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 284,
							"name": "exception",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Logs an "
									},
									{
										"kind": "code",
										"text": "`ERROR`"
									},
									{
										"kind": "text",
										"text": " level message with a nicely formatted exception. Note that the exception is the first parameter\nhere and an additional message is only optional."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 178,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 285,
									"name": "exception",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Error"
										},
										"name": "Error",
										"package": "typescript"
									}
								},
								{
									"id": 286,
									"name": "message",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 287,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
											"qualifiedName": "AdditionalData"
										},
										"name": "AdditionalData",
										"package": "@apify/log"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 260,
					"name": "getLevel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 144,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 261,
							"name": "getLevel",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the currently selected logging level. This is useful for checking whether a message\nwill actually be printed to the console before one actually performs a resource intensive operation\nto construct the message, such as querying a DB for some metadata that need to be added. If the log\nlevel is not high enough at the moment, it doesn't make sense to execute the query."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 144,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 274,
					"name": "getOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 164,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 275,
							"name": "getOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the logger configuration."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 164,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Required"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 314,
										"name": "LoggerOptions",
										"package": "@apify/log"
									}
								],
								"name": "Required",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 276,
					"name": "child",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 168,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 277,
							"name": "child",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a new instance of logger that inherits settings from a parent logger."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 168,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 278,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Partial"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 314,
												"name": "LoggerOptions",
												"package": "@apify/log"
											}
										],
										"name": "Partial",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 252,
								"name": "Log",
								"package": "@apify/log"
							}
						}
					]
				},
				{
					"id": 296,
					"name": "info",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 188,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 297,
							"name": "info",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Logs an "
									},
									{
										"kind": "code",
										"text": "`INFO`"
									},
									{
										"kind": "text",
										"text": " message. "
									},
									{
										"kind": "code",
										"text": "`INFO`"
									},
									{
										"kind": "text",
										"text": " is the default log level so info messages will be always logged,\nunless the log level is changed. Data are stringified and appended to the message."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 188,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 298,
									"name": "message",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 299,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
											"qualifiedName": "AdditionalData"
										},
										"name": "AdditionalData",
										"package": "@apify/log"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 265,
					"name": "internal",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 156,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 266,
							"name": "internal",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 156,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 267,
									"name": "level",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 322,
										"name": "LogLevel",
										"package": "@apify/log"
									}
								},
								{
									"id": 268,
									"name": "message",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 269,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 270,
									"name": "exception",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 304,
					"name": "perf",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 196,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 305,
							"name": "perf",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 196,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 306,
									"name": "message",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 307,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
											"qualifiedName": "AdditionalData"
										},
										"name": "AdditionalData",
										"package": "@apify/log"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 262,
					"name": "setLevel",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 155,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 263,
							"name": "setLevel",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sets the log level to the given value, preventing messages from less important log levels\nfrom being printed to the console. Use in conjunction with the "
									},
									{
										"kind": "code",
										"text": "`log.LEVELS`"
									},
									{
										"kind": "text",
										"text": " constants such as\n\n"
									},
									{
										"kind": "code",
										"text": "```\nlog.setLevel(log.LEVELS.DEBUG);\n```"
									},
									{
										"kind": "text",
										"text": "\n\nDefault log level is INFO."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 155,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 264,
									"name": "level",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 322,
										"name": "LogLevel",
										"package": "@apify/log"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 271,
					"name": "setOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 160,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 272,
							"name": "setOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Configures logger."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 160,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 273,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Partial"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 314,
												"name": "LoggerOptions",
												"package": "@apify/log"
											}
										],
										"name": "Partial",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 288,
					"name": "softFail",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 179,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 289,
							"name": "softFail",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 179,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 290,
									"name": "message",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 291,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
											"qualifiedName": "AdditionalData"
										},
										"name": "AdditionalData",
										"package": "@apify/log"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 292,
					"name": "warning",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 183,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 293,
							"name": "warning",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Logs a "
									},
									{
										"kind": "code",
										"text": "`WARNING`"
									},
									{
										"kind": "text",
										"text": " level message. Data are stringified and appended to the message."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 183,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 294,
									"name": "message",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 295,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
											"qualifiedName": "AdditionalData"
										},
										"name": "AdditionalData",
										"package": "@apify/log"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 308,
					"name": "warningOnce",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 200,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 309,
							"name": "warningOnce",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Logs a "
									},
									{
										"kind": "code",
										"text": "`WARNING`"
									},
									{
										"kind": "text",
										"text": " level message only once."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 200,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 310,
									"name": "message",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						253
					]
				},
				{
					"title": "Properties",
					"children": [
						256
					]
				},
				{
					"title": "Methods",
					"children": [
						300,
						311,
						279,
						283,
						260,
						274,
						276,
						296,
						265,
						304,
						262,
						271,
						288,
						292,
						308
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@apify/log/cjs/index.d.ts",
					"line": 128,
					"character": 14
				}
			]
		},
		{
			"id": 330,
			"name": "Logger",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This is an abstract class that should\nbe extended by custom logger classes.\n\nthis._log() method must be implemented by them."
					}
				]
			},
			"children": [
				{
					"id": 375,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 33,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 376,
							"name": "new Logger",
							"variant": "signature",
							"kind": 16384,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 33,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 377,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 330,
								"name": "Logger",
								"package": "@apify/log"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.constructor"
					}
				},
				{
					"id": 373,
					"name": "captureRejections",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Value: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n\nChange the default "
							},
							{
								"kind": "code",
								"text": "`captureRejections`"
							},
							{
								"kind": "text",
								"text": " option on all new "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " objects."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.4.0, v12.16.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 459,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.captureRejections"
					}
				},
				{
					"id": 372,
					"name": "captureRejectionSymbol",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Value: "
							},
							{
								"kind": "code",
								"text": "`Symbol.for('nodejs.rejection')`"
							},
							{
								"kind": "text",
								"text": "\n\nSee how to write a custom "
							},
							{
								"kind": "code",
								"text": "`rejection handler`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.4.0, v12.16.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 452,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"target": 372,
							"name": "captureRejectionSymbol",
							"package": "@types/node",
							"qualifiedName": "EventEmitter.captureRejectionSymbol"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.captureRejectionSymbol"
					}
				},
				{
					"id": 374,
					"name": "defaultMaxListeners",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "By default, a maximum of "
							},
							{
								"kind": "code",
								"text": "`10`"
							},
							{
								"kind": "text",
								"text": " listeners can be registered for any single\nevent. This limit can be changed for individual "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances\nusing the "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners(n)`"
							},
							{
								"kind": "text",
								"text": " method. To change the default\nfor _all_"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances, the "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": " property\ncan be used. If this value is not a positive number, a "
							},
							{
								"kind": "code",
								"text": "`RangeError`"
							},
							{
								"kind": "text",
								"text": " is thrown.\n\nTake caution when setting the "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": " because the\nchange affects _all_ "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances, including those created before\nthe change is made. However, calling "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners(n)`"
							},
							{
								"kind": "text",
								"text": " still has\nprecedence over "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": ".\n\nThis is not a hard limit. The "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a \"possible EventEmitter memory leak\" has been detected. For any single\n"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": ", the "
							},
							{
								"kind": "code",
								"text": "`emitter.getMaxListeners()`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners()`"
							},
							{
								"kind": "text",
								"text": " methods can be used to\ntemporarily avoid this warning:\n\n"
							},
							{
								"kind": "code",
								"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once('event', () => {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n```"
							},
							{
								"kind": "text",
								"text": "\n\nThe "
							},
							{
								"kind": "code",
								"text": "`--trace-warnings`"
							},
							{
								"kind": "text",
								"text": " command-line flag can be used to display the\nstack trace for such warnings.\n\nThe emitted warning can be inspected with "
							},
							{
								"kind": "code",
								"text": "`process.on('warning')`"
							},
							{
								"kind": "text",
								"text": " and will\nhave the additional "
							},
							{
								"kind": "code",
								"text": "`emitter`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`type`"
							},
							{
								"kind": "text",
								"text": ", and "
							},
							{
								"kind": "code",
								"text": "`count`"
							},
							{
								"kind": "text",
								"text": " properties, referring to\nthe event emitter instance, the event's name and the number of attached\nlisteners, respectively.\nIts "
							},
							{
								"kind": "code",
								"text": "`name`"
							},
							{
								"kind": "text",
								"text": " property is set to "
							},
							{
								"kind": "code",
								"text": "`'MaxListenersExceededWarning'`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v0.11.2"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 498,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.defaultMaxListeners"
					}
				},
				{
					"id": 371,
					"name": "errorMonitor",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This symbol shall be used to install a listener for only monitoring "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " events. Listeners installed using this symbol are called before the regular "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " event is emitted. Therefore, the process will still crash if no\nregular "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listener is installed."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.6.0, v12.17.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 445,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"target": 371,
							"name": "errorMonitor",
							"package": "@types/node",
							"qualifiedName": "EventEmitter.errorMonitor"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.errorMonitor"
					}
				},
				{
					"id": 388,
					"name": "_log",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 37,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 389,
							"name": "_log",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 37,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 390,
									"name": "level",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 322,
										"name": "LogLevel",
										"package": "@apify/log"
									}
								},
								{
									"id": 391,
									"name": "message",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 392,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 393,
									"name": "exception",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								},
								{
									"id": 394,
									"name": "opts",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 384,
					"name": "_outputWithConsole",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 36,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 385,
							"name": "_outputWithConsole",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 36,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 386,
									"name": "level",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 322,
										"name": "LogLevel",
										"package": "@apify/log"
									}
								},
								{
									"id": 387,
									"name": "line",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 400,
					"name": "[captureRejectionSymbol]",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 136,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 401,
							"name": "[captureRejectionSymbol]",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 136,
									"character": 8
								}
							],
							"typeParameters": [
								{
									"id": 402,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 403,
									"name": "error",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Error"
										},
										"name": "Error",
										"package": "typescript"
									}
								},
								{
									"id": 404,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 405,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "AnyRest"
										},
										"name": "AnyRest",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.[captureRejectionSymbol]"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.[captureRejectionSymbol]"
					}
				},
				{
					"id": 406,
					"name": "addListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 597,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 407,
							"name": "addListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.on(eventName, listener)`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 597,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 408,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 409,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 410,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 411,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 117,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 412,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"parameters": [
														{
															"id": 413,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.addListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.addListener"
					}
				},
				{
					"id": 462,
					"name": "emit",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 859,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 463,
							"name": "emit",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Synchronously calls each of the listeners registered for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", in the order they were registered, passing the supplied arguments\nto each.\n\nReturns "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if the event had listeners, "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nconsole.log(myEmitter.listeners('event'));\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 859,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 464,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 465,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 466,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "AnyRest"
										},
										"name": "AnyRest",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.emit"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.emit"
					}
				},
				{
					"id": 488,
					"name": "eventNames",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 922,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 489,
							"name": "eventNames",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or "
									},
									{
										"kind": "code",
										"text": "`Symbol`"
									},
									{
										"kind": "text",
										"text": "s.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 922,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "symbol"
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.eventNames"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.eventNames"
					}
				},
				{
					"id": 452,
					"name": "getMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 774,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 453,
							"name": "getMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the current max listener value for the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " which is either\nset by "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " or defaults to "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "defaultMaxListeners",
										"target": 374
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v1.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 774,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.getMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.getMaxListeners"
					}
				},
				{
					"id": 382,
					"name": "getOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 35,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 383,
							"name": "getOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 35,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 467,
					"name": "listenerCount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 868,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 468,
							"name": "listenerCount",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the number of listeners listening for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\nIf "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " is provided, it will return how many times the listener is found\nin the list of the listeners of the event."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v3.2.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 868,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 469,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 470,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 471,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event handler function"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Function"
										},
										"name": "Function",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.listenerCount"
					}
				},
				{
					"id": 454,
					"name": "listeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 787,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 455,
							"name": "listeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 787,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 456,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 457,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.listeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.listeners"
					}
				},
				{
					"id": 395,
					"name": "log",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 38,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 396,
							"name": "log",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 38,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 397,
									"name": "level",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 322,
										"name": "LogLevel",
										"package": "@apify/log"
									}
								},
								{
									"id": 398,
									"name": "message",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 399,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 438,
					"name": "off",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 747,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 439,
							"name": "off",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.removeListener()`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v10.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 747,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 440,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 441,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 442,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 443,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 117,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 444,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"parameters": [
														{
															"id": 445,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.off"
					}
				},
				{
					"id": 414,
					"name": "on",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 629,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 415,
							"name": "on",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the end of the listeners array for the event\nnamed "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has already\nbeen added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " and\n"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple times.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The "
									},
									{
										"kind": "code",
										"text": "`emitter.prependListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.101"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 629,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 416,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 417,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 418,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 419,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 117,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 420,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"parameters": [
														{
															"id": 421,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.on"
					}
				},
				{
					"id": 422,
					"name": "once",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 659,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 423,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time** "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". The\nnext time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this listener is removed and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The "
									},
									{
										"kind": "code",
										"text": "`emitter.prependOnceListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 659,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 424,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 425,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 426,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 427,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 117,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 428,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"parameters": [
														{
															"id": 429,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.once"
					}
				},
				{
					"id": 472,
					"name": "prependListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 886,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 473,
							"name": "prependListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the _beginning_ of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "\nand "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple times.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 886,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 474,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 475,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 476,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 477,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 117,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 478,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"parameters": [
														{
															"id": 479,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.prependListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.prependListener"
					}
				},
				{
					"id": 480,
					"name": "prependOnceListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 902,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 481,
							"name": "prependOnceListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " to the _beginning_ of the listeners array. The next time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this\nlistener is removed, and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 902,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 482,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 483,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 484,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 485,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 117,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 486,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"parameters": [
														{
															"id": 487,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.prependOnceListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.prependOnceListener"
					}
				},
				{
					"id": 458,
					"name": "rawListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 818,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 459,
							"name": "rawListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ",\nincluding any wrappers (such as those created by "
									},
									{
										"kind": "code",
										"text": "`.once()`"
									},
									{
										"kind": "text",
										"text": ").\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v9.4.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 818,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 460,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 461,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.rawListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.rawListeners"
					}
				},
				{
					"id": 446,
					"name": "removeAllListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 758,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 447,
							"name": "removeAllListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes all listeners, or those of the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 758,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 448,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.removeAllListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.removeAllListeners"
					}
				},
				{
					"id": 430,
					"name": "removeListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 742,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 431,
							"name": "removeListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the specified "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " from the listener array for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", then "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`removeAllListeners()`"
									},
									{
										"kind": "text",
										"text": " calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from"
									},
									{
										"kind": "code",
										"text": "`emit()`"
									},
									{
										"kind": "text",
										"text": " in progress. Subsequent events behave as expected.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```"
									},
									{
										"kind": "text",
										"text": "\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe "
									},
									{
										"kind": "code",
										"text": "`emitter.listeners()`"
									},
									{
										"kind": "text",
										"text": " method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove the most\nrecently added instance. In the example the "
									},
									{
										"kind": "code",
										"text": "`once('ping')`"
									},
									{
										"kind": "text",
										"text": " listener is removed:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 742,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 432,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 433,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 434,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 435,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 117,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 436,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"parameters": [
														{
															"id": 437,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.removeListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.removeListener"
					}
				},
				{
					"id": 449,
					"name": "setMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 768,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 450,
							"name": "setMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s will print a warning if more than "
									},
									{
										"kind": "code",
										"text": "`10`"
									},
									{
										"kind": "text",
										"text": " listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " method allows the limit to be\nmodified for this specific "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance. The value can be set to "
									},
									{
										"kind": "code",
										"text": "`Infinity`"
									},
									{
										"kind": "text",
										"text": " (or "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": ") to indicate an unlimited number of listeners.\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.5"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 768,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 451,
									"name": "n",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.setMaxListeners"
					}
				},
				{
					"id": 379,
					"name": "setOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 34,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 380,
							"name": "setOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 34,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 381,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 364,
					"name": "addAbortListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 437,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 365,
							"name": "addAbortListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Listens once to the "
									},
									{
										"kind": "code",
										"text": "`abort`"
									},
									{
										"kind": "text",
										"text": " event on the provided "
									},
									{
										"kind": "code",
										"text": "`signal`"
									},
									{
										"kind": "text",
										"text": ".\n\nListening to the "
									},
									{
										"kind": "code",
										"text": "`abort`"
									},
									{
										"kind": "text",
										"text": " event on abort signals is unsafe and may\nlead to resource leaks since another third party with the signal can\ncall "
									},
									{
										"kind": "code",
										"text": "`e.stopImmediatePropagation()`"
									},
									{
										"kind": "text",
										"text": ". Unfortunately Node.js cannot change\nthis since it would violate the web standard. Additionally, the original\nAPI makes it easy to forget to remove listeners.\n\nThis API allows safely using "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": "s in Node.js APIs by solving these\ntwo issues by listening to the event such that "
									},
									{
										"kind": "code",
										"text": "`stopImmediatePropagation`"
									},
									{
										"kind": "text",
										"text": " does\nnot prevent the listener from running.\n\nReturns a disposable so that it may be unsubscribed from more easily.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { addAbortListener } from 'node:events';\n\nfunction example(signal) {\n  let disposable;\n  try {\n    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());\n    disposable = addAbortListener(signal, (e) => {\n      // Do something when signal is aborted.\n    });\n  } finally {\n    disposable?.[Symbol.dispose]();\n  }\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v20.5.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Disposable that removes the "
											},
											{
												"kind": "code",
												"text": "`abort`"
											},
											{
												"kind": "text",
												"text": " listener."
											}
										]
									}
								],
								"modifierTags": [
									"@experimental"
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 437,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 366,
									"name": "signal",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "AbortSignal"
										},
										"name": "AbortSignal",
										"package": "typescript"
									}
								},
								{
									"id": 367,
									"name": "resource",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 368,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 437,
													"character": 63
												}
											],
											"signatures": [
												{
													"id": 369,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 437,
															"character": 63
														}
													],
													"parameters": [
														{
															"id": 370,
															"name": "event",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
																	"qualifiedName": "Event"
																},
																"name": "Event",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.esnext.disposable.d.ts",
									"qualifiedName": "Disposable"
								},
								"name": "Disposable",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.addAbortListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.addAbortListener"
					}
				},
				{
					"id": 353,
					"name": "getEventListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 358,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 354,
							"name": "getEventListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s this behaves exactly the same as calling "
									},
									{
										"kind": "code",
										"text": "`.listeners`"
									},
									{
										"kind": "text",
										"text": " on\nthe emitter.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventTarget`"
									},
									{
										"kind": "text",
										"text": "s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.2.0, v14.17.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 358,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 355,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@types/node/events.d.ts",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../node_modules/@types/node/events.d.ts",
															"qualifiedName": "DefaultEventMap"
														},
														"name": "DefaultEventMap",
														"package": "@types/node"
													}
												],
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "EventTarget"
												},
												"name": "EventTarget",
												"package": "typescript"
											}
										]
									}
								},
								{
									"id": 356,
									"name": "name",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.getEventListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.getEventListeners"
					}
				},
				{
					"id": 357,
					"name": "getMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 387,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 358,
							"name": "getMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the currently set max amount of listeners.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s this behaves exactly the same as calling "
									},
									{
										"kind": "code",
										"text": "`.getMaxListeners`"
									},
									{
										"kind": "text",
										"text": " on\nthe emitter.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventTarget`"
									},
									{
										"kind": "text",
										"text": "s this is the only way to get the max event listeners for the\nevent target. If the number of event handlers on a single EventTarget exceeds\nthe max set, the EventTarget will print a warning.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  console.log(getMaxListeners(ee)); // 10\n  setMaxListeners(11, ee);\n  console.log(getMaxListeners(ee)); // 11\n}\n{\n  const et = new EventTarget();\n  console.log(getMaxListeners(et)); // 10\n  setMaxListeners(11, et);\n  console.log(getMaxListeners(et)); // 11\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v19.9.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 387,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 359,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@types/node/events.d.ts",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../node_modules/@types/node/events.d.ts",
															"qualifiedName": "DefaultEventMap"
														},
														"name": "DefaultEventMap",
														"package": "@types/node"
													}
												],
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "EventTarget"
												},
												"name": "EventTarget",
												"package": "typescript"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.getMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.getMaxListeners"
					}
				},
				{
					"id": 349,
					"name": "listenerCount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 330,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 350,
							"name": "listenerCount",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A class method that returns the number of listeners for the given "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " registered on the given "
									},
									{
										"kind": "code",
										"text": "`emitter`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.9.12"
											}
										]
									},
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "Since v3.2.0 - Use "
											},
											{
												"kind": "code",
												"text": "`listenerCount`"
											},
											{
												"kind": "text",
												"text": " instead."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 330,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 351,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The emitter to query"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "__global.NodeJS.EventEmitter"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@types/node/events.d.ts",
													"qualifiedName": "DefaultEventMap"
												},
												"name": "DefaultEventMap",
												"package": "@types/node"
											}
										],
										"name": "EventEmitter",
										"package": "@types/node",
										"qualifiedName": "__global.NodeJS.EventEmitter"
									}
								},
								{
									"id": 352,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event name"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.listenerCount"
					}
				},
				{
					"id": 340,
					"name": "on",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 303,
							"character": 15
						},
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 308,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 341,
							"name": "on",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns an "
									},
									{
										"kind": "code",
										"text": "`AsyncIterator`"
									},
									{
										"kind": "text",
										"text": " that iterates "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " events. It will throw\nif the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": ". It removes all listeners when\nexiting the loop. The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting on events:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```"
									},
									{
										"kind": "text",
										"text": "\n\nUse the "
									},
									{
										"kind": "code",
										"text": "`close`"
									},
									{
										"kind": "text",
										"text": " option to specify an array of event names that will end the iteration:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n  ee.emit('close');\n});\n\nfor await (const event of on(ee, 'foo', { close: ['close'] })) {\n  console.log(event); // prints ['bar'] [42]\n}\n// the loop will exit after 'close' is emitted\nconsole.log('done'); // prints 'done'\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.6.0, v12.16.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An "
											},
											{
												"kind": "code",
												"text": "`AsyncIterator`"
											},
											{
												"kind": "text",
												"text": " that iterates "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " events emitted by the "
											},
											{
												"kind": "code",
												"text": "`emitter`"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 303,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 342,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "__global.NodeJS.EventEmitter"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@types/node/events.d.ts",
													"qualifiedName": "DefaultEventMap"
												},
												"name": "DefaultEventMap",
												"package": "@types/node"
											}
										],
										"name": "EventEmitter",
										"package": "@types/node",
										"qualifiedName": "__global.NodeJS.EventEmitter"
									}
								},
								{
									"id": 343,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 344,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "StaticEventEmitterIteratorOptions"
										},
										"name": "StaticEventEmitterIteratorOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/@types/node/compatibility/iterators.d.ts",
									"qualifiedName": "NodeJS.AsyncIterator"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "AsyncIterator",
								"package": "@types/node",
								"qualifiedName": "NodeJS.AsyncIterator"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.on"
							}
						},
						{
							"id": 345,
							"name": "on",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 308,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 346,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "EventTarget"
										},
										"name": "EventTarget",
										"package": "typescript"
									}
								},
								{
									"id": 347,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 348,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "StaticEventEmitterIteratorOptions"
										},
										"name": "StaticEventEmitterIteratorOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/@types/node/compatibility/iterators.d.ts",
									"qualifiedName": "NodeJS.AsyncIterator"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "AsyncIterator",
								"package": "@types/node",
								"qualifiedName": "NodeJS.AsyncIterator"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.on"
					}
				},
				{
					"id": 331,
					"name": "once",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 217,
							"character": 15
						},
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 222,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 332,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " that is fulfilled when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits the given\nevent or that is rejected if the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " while waiting.\nThe "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special"
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event\nsemantics and does not listen to the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe special handling of the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event is only used when "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": " is used to wait for another event. If "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": " is used to wait for the\n'"
									},
									{
										"kind": "code",
										"text": "`error'`"
									},
									{
										"kind": "text",
										"text": " event itself, then it is treated as any other kind of event without\nspecial handling:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.error('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```"
									},
									{
										"kind": "text",
										"text": "\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting for the event:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v11.13.0, v10.16.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 217,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 333,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "__global.NodeJS.EventEmitter"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@types/node/events.d.ts",
													"qualifiedName": "DefaultEventMap"
												},
												"name": "DefaultEventMap",
												"package": "@types/node"
											}
										],
										"name": "EventEmitter",
										"package": "@types/node",
										"qualifiedName": "__global.NodeJS.EventEmitter"
									}
								},
								{
									"id": 334,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 335,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "StaticEventEmitterOptions"
										},
										"name": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.once"
							}
						},
						{
							"id": 336,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 222,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 337,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "EventTarget"
										},
										"name": "EventTarget",
										"package": "typescript"
									}
								},
								{
									"id": 338,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 339,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "StaticEventEmitterOptions"
										},
										"name": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.once"
					}
				},
				{
					"id": 360,
					"name": "setMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 402,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 361,
							"name": "setMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.4.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 402,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 362,
									"name": "n",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A non-negative number. The maximum number of listeners per "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": " event."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 363,
									"name": "eventTargets",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Zero or more {EventTarget} or {EventEmitter} instances. If none are specified, "
											},
											{
												"kind": "code",
												"text": "`n`"
											},
											{
												"kind": "text",
												"text": " is set as the default max for all newly created {EventTarget} and {EventEmitter}\nobjects."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "reference",
													"target": {
														"sourceFileName": "../node_modules/@types/node/events.d.ts",
														"qualifiedName": "__global.NodeJS.EventEmitter"
													},
													"typeArguments": [
														{
															"type": "reference",
															"target": {
																"sourceFileName": "../node_modules/@types/node/events.d.ts",
																"qualifiedName": "DefaultEventMap"
															},
															"name": "DefaultEventMap",
															"package": "@types/node"
														}
													],
													"name": "EventEmitter",
													"package": "@types/node",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												{
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
														"qualifiedName": "EventTarget"
													},
													"name": "EventTarget",
													"package": "typescript"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.setMaxListeners"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						375
					]
				},
				{
					"title": "Properties",
					"children": [
						373,
						372,
						374,
						371
					]
				},
				{
					"title": "Methods",
					"children": [
						388,
						384,
						400,
						406,
						462,
						488,
						452,
						382,
						467,
						454,
						395,
						438,
						414,
						422,
						472,
						480,
						458,
						446,
						430,
						449,
						379,
						364,
						353,
						357,
						349,
						340,
						331,
						360
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@apify/log/cjs/index.d.ts",
					"line": 31,
					"character": 14
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../node_modules/@types/node/events.d.ts",
						"qualifiedName": "EventEmitter"
					},
					"name": "EventEmitter",
					"package": "@types/node"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"target": 490,
					"name": "LoggerJson"
				},
				{
					"type": "reference",
					"target": 651,
					"name": "LoggerText"
				}
			]
		},
		{
			"id": 490,
			"name": "LoggerJson",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This is an abstract class that should\nbe extended by custom logger classes.\n\nthis._log() method must be implemented by them."
					}
				]
			},
			"children": [
				{
					"id": 535,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 241,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 536,
							"name": "new LoggerJson",
							"variant": "signature",
							"kind": 16384,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 241,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 537,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 538,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											}
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 490,
								"name": "LoggerJson",
								"package": "@apify/log"
							},
							"overwrites": {
								"type": "reference",
								"target": 376,
								"name": "Logger.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": 375,
						"name": "Logger.constructor"
					}
				},
				{
					"id": 533,
					"name": "captureRejections",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Value: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n\nChange the default "
							},
							{
								"kind": "code",
								"text": "`captureRejections`"
							},
							{
								"kind": "text",
								"text": " option on all new "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " objects."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.4.0, v12.16.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 459,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 373,
						"name": "Logger.captureRejections"
					}
				},
				{
					"id": 532,
					"name": "captureRejectionSymbol",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Value: "
							},
							{
								"kind": "code",
								"text": "`Symbol.for('nodejs.rejection')`"
							},
							{
								"kind": "text",
								"text": "\n\nSee how to write a custom "
							},
							{
								"kind": "code",
								"text": "`rejection handler`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.4.0, v12.16.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 452,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"target": 372,
							"name": "captureRejectionSymbol",
							"package": "@types/node",
							"qualifiedName": "EventEmitter.captureRejectionSymbol"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 372,
						"name": "Logger.captureRejectionSymbol"
					}
				},
				{
					"id": 534,
					"name": "defaultMaxListeners",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "By default, a maximum of "
							},
							{
								"kind": "code",
								"text": "`10`"
							},
							{
								"kind": "text",
								"text": " listeners can be registered for any single\nevent. This limit can be changed for individual "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances\nusing the "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners(n)`"
							},
							{
								"kind": "text",
								"text": " method. To change the default\nfor _all_"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances, the "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": " property\ncan be used. If this value is not a positive number, a "
							},
							{
								"kind": "code",
								"text": "`RangeError`"
							},
							{
								"kind": "text",
								"text": " is thrown.\n\nTake caution when setting the "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": " because the\nchange affects _all_ "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances, including those created before\nthe change is made. However, calling "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners(n)`"
							},
							{
								"kind": "text",
								"text": " still has\nprecedence over "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": ".\n\nThis is not a hard limit. The "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a \"possible EventEmitter memory leak\" has been detected. For any single\n"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": ", the "
							},
							{
								"kind": "code",
								"text": "`emitter.getMaxListeners()`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners()`"
							},
							{
								"kind": "text",
								"text": " methods can be used to\ntemporarily avoid this warning:\n\n"
							},
							{
								"kind": "code",
								"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once('event', () => {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n```"
							},
							{
								"kind": "text",
								"text": "\n\nThe "
							},
							{
								"kind": "code",
								"text": "`--trace-warnings`"
							},
							{
								"kind": "text",
								"text": " command-line flag can be used to display the\nstack trace for such warnings.\n\nThe emitted warning can be inspected with "
							},
							{
								"kind": "code",
								"text": "`process.on('warning')`"
							},
							{
								"kind": "text",
								"text": " and will\nhave the additional "
							},
							{
								"kind": "code",
								"text": "`emitter`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`type`"
							},
							{
								"kind": "text",
								"text": ", and "
							},
							{
								"kind": "code",
								"text": "`count`"
							},
							{
								"kind": "text",
								"text": " properties, referring to\nthe event emitter instance, the event's name and the number of attached\nlisteners, respectively.\nIts "
							},
							{
								"kind": "code",
								"text": "`name`"
							},
							{
								"kind": "text",
								"text": " property is set to "
							},
							{
								"kind": "code",
								"text": "`'MaxListenersExceededWarning'`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v0.11.2"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 498,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 374,
						"name": "Logger.defaultMaxListeners"
					}
				},
				{
					"id": 531,
					"name": "errorMonitor",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This symbol shall be used to install a listener for only monitoring "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " events. Listeners installed using this symbol are called before the regular "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " event is emitted. Therefore, the process will still crash if no\nregular "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listener is installed."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.6.0, v12.17.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 445,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"target": 371,
							"name": "errorMonitor",
							"package": "@types/node",
							"qualifiedName": "EventEmitter.errorMonitor"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 371,
						"name": "Logger.errorMonitor"
					}
				},
				{
					"id": 539,
					"name": "_log",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 242,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 540,
							"name": "_log",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 242,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 541,
									"name": "level",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 322,
										"name": "LogLevel",
										"package": "@apify/log"
									}
								},
								{
									"id": 542,
									"name": "message",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 543,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 544,
									"name": "exception",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								},
								{
									"id": 545,
									"name": "opts",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"target": 389,
								"name": "Logger._log"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": 388,
						"name": "Logger._log"
					}
				},
				{
					"id": 552,
					"name": "_outputWithConsole",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 36,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 553,
							"name": "_outputWithConsole",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 36,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 554,
									"name": "level",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 322,
										"name": "LogLevel",
										"package": "@apify/log"
									}
								},
								{
									"id": 555,
									"name": "line",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 385,
								"name": "Logger._outputWithConsole"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 384,
						"name": "Logger._outputWithConsole"
					}
				},
				{
					"id": 561,
					"name": "[captureRejectionSymbol]",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 136,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 562,
							"name": "[captureRejectionSymbol]",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 136,
									"character": 8
								}
							],
							"typeParameters": [
								{
									"id": 563,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 564,
									"name": "error",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Error"
										},
										"name": "Error",
										"package": "typescript"
									}
								},
								{
									"id": 565,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 566,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "AnyRest"
										},
										"name": "AnyRest",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 401,
								"name": "Logger.[captureRejectionSymbol]"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 400,
						"name": "Logger.[captureRejectionSymbol]"
					}
				},
				{
					"id": 567,
					"name": "addListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 597,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 568,
							"name": "addListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.on(eventName, listener)`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 597,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 569,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 570,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 571,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 572,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 117,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 573,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"parameters": [
														{
															"id": 574,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 407,
								"name": "Logger.addListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 406,
						"name": "Logger.addListener"
					}
				},
				{
					"id": 623,
					"name": "emit",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 859,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 624,
							"name": "emit",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Synchronously calls each of the listeners registered for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", in the order they were registered, passing the supplied arguments\nto each.\n\nReturns "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if the event had listeners, "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nconsole.log(myEmitter.listeners('event'));\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 859,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 625,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 626,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 627,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "AnyRest"
										},
										"name": "AnyRest",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 463,
								"name": "Logger.emit"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 462,
						"name": "Logger.emit"
					}
				},
				{
					"id": 649,
					"name": "eventNames",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 922,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 650,
							"name": "eventNames",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or "
									},
									{
										"kind": "code",
										"text": "`Symbol`"
									},
									{
										"kind": "text",
										"text": "s.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 922,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "symbol"
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 489,
								"name": "Logger.eventNames"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 488,
						"name": "Logger.eventNames"
					}
				},
				{
					"id": 613,
					"name": "getMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 774,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 614,
							"name": "getMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the current max listener value for the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " which is either\nset by "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " or defaults to "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "defaultMaxListeners",
										"target": 534
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v1.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 774,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 453,
								"name": "Logger.getMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 452,
						"name": "Logger.getMaxListeners"
					}
				},
				{
					"id": 550,
					"name": "getOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 35,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 551,
							"name": "getOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 35,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Record",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 383,
								"name": "Logger.getOptions"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 382,
						"name": "Logger.getOptions"
					}
				},
				{
					"id": 628,
					"name": "listenerCount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 868,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 629,
							"name": "listenerCount",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the number of listeners listening for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\nIf "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " is provided, it will return how many times the listener is found\nin the list of the listeners of the event."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v3.2.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 868,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 630,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 631,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 632,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event handler function"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Function"
										},
										"name": "Function",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 468,
								"name": "Logger.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 467,
						"name": "Logger.listenerCount"
					}
				},
				{
					"id": 615,
					"name": "listeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 787,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 616,
							"name": "listeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 787,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 617,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 618,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 455,
								"name": "Logger.listeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 454,
						"name": "Logger.listeners"
					}
				},
				{
					"id": 556,
					"name": "log",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 38,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 557,
							"name": "log",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 38,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 558,
									"name": "level",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 322,
										"name": "LogLevel",
										"package": "@apify/log"
									}
								},
								{
									"id": 559,
									"name": "message",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 560,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 396,
								"name": "Logger.log"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 395,
						"name": "Logger.log"
					}
				},
				{
					"id": 599,
					"name": "off",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 747,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 600,
							"name": "off",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.removeListener()`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v10.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 747,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 601,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 602,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 603,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 604,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 117,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 605,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"parameters": [
														{
															"id": 606,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 439,
								"name": "Logger.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 438,
						"name": "Logger.off"
					}
				},
				{
					"id": 575,
					"name": "on",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 629,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 576,
							"name": "on",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the end of the listeners array for the event\nnamed "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has already\nbeen added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " and\n"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple times.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The "
									},
									{
										"kind": "code",
										"text": "`emitter.prependListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.101"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 629,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 577,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 578,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 579,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 580,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 117,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 581,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"parameters": [
														{
															"id": 582,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 415,
								"name": "Logger.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 414,
						"name": "Logger.on"
					}
				},
				{
					"id": 583,
					"name": "once",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 659,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 584,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time** "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". The\nnext time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this listener is removed and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The "
									},
									{
										"kind": "code",
										"text": "`emitter.prependOnceListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 659,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 585,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 586,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 587,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 588,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 117,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 589,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"parameters": [
														{
															"id": 590,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 423,
								"name": "Logger.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 422,
						"name": "Logger.once"
					}
				},
				{
					"id": 633,
					"name": "prependListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 886,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 634,
							"name": "prependListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the _beginning_ of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "\nand "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple times.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 886,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 635,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 636,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 637,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 638,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 117,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 639,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"parameters": [
														{
															"id": 640,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 473,
								"name": "Logger.prependListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 472,
						"name": "Logger.prependListener"
					}
				},
				{
					"id": 641,
					"name": "prependOnceListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 902,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 642,
							"name": "prependOnceListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " to the _beginning_ of the listeners array. The next time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this\nlistener is removed, and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 902,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 643,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 644,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 645,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 646,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 117,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 647,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"parameters": [
														{
															"id": 648,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 481,
								"name": "Logger.prependOnceListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 480,
						"name": "Logger.prependOnceListener"
					}
				},
				{
					"id": 619,
					"name": "rawListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 818,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 620,
							"name": "rawListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ",\nincluding any wrappers (such as those created by "
									},
									{
										"kind": "code",
										"text": "`.once()`"
									},
									{
										"kind": "text",
										"text": ").\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v9.4.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 818,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 621,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 622,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 459,
								"name": "Logger.rawListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 458,
						"name": "Logger.rawListeners"
					}
				},
				{
					"id": 607,
					"name": "removeAllListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 758,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 608,
							"name": "removeAllListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes all listeners, or those of the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 758,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 609,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 447,
								"name": "Logger.removeAllListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 446,
						"name": "Logger.removeAllListeners"
					}
				},
				{
					"id": 591,
					"name": "removeListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 742,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 592,
							"name": "removeListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the specified "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " from the listener array for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", then "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`removeAllListeners()`"
									},
									{
										"kind": "text",
										"text": " calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from"
									},
									{
										"kind": "code",
										"text": "`emit()`"
									},
									{
										"kind": "text",
										"text": " in progress. Subsequent events behave as expected.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```"
									},
									{
										"kind": "text",
										"text": "\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe "
									},
									{
										"kind": "code",
										"text": "`emitter.listeners()`"
									},
									{
										"kind": "text",
										"text": " method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove the most\nrecently added instance. In the example the "
									},
									{
										"kind": "code",
										"text": "`once('ping')`"
									},
									{
										"kind": "text",
										"text": " listener is removed:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 742,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 593,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 594,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 595,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 596,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 117,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 597,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"parameters": [
														{
															"id": 598,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 431,
								"name": "Logger.removeListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 430,
						"name": "Logger.removeListener"
					}
				},
				{
					"id": 610,
					"name": "setMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 768,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 611,
							"name": "setMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s will print a warning if more than "
									},
									{
										"kind": "code",
										"text": "`10`"
									},
									{
										"kind": "text",
										"text": " listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " method allows the limit to be\nmodified for this specific "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance. The value can be set to "
									},
									{
										"kind": "code",
										"text": "`Infinity`"
									},
									{
										"kind": "text",
										"text": " (or "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": ") to indicate an unlimited number of listeners.\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.5"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 768,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 612,
									"name": "n",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 450,
								"name": "Logger.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 449,
						"name": "Logger.setMaxListeners"
					}
				},
				{
					"id": 547,
					"name": "setOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 34,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 548,
							"name": "setOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 34,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 549,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 380,
								"name": "Logger.setOptions"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 379,
						"name": "Logger.setOptions"
					}
				},
				{
					"id": 524,
					"name": "addAbortListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 437,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 525,
							"name": "addAbortListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Listens once to the "
									},
									{
										"kind": "code",
										"text": "`abort`"
									},
									{
										"kind": "text",
										"text": " event on the provided "
									},
									{
										"kind": "code",
										"text": "`signal`"
									},
									{
										"kind": "text",
										"text": ".\n\nListening to the "
									},
									{
										"kind": "code",
										"text": "`abort`"
									},
									{
										"kind": "text",
										"text": " event on abort signals is unsafe and may\nlead to resource leaks since another third party with the signal can\ncall "
									},
									{
										"kind": "code",
										"text": "`e.stopImmediatePropagation()`"
									},
									{
										"kind": "text",
										"text": ". Unfortunately Node.js cannot change\nthis since it would violate the web standard. Additionally, the original\nAPI makes it easy to forget to remove listeners.\n\nThis API allows safely using "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": "s in Node.js APIs by solving these\ntwo issues by listening to the event such that "
									},
									{
										"kind": "code",
										"text": "`stopImmediatePropagation`"
									},
									{
										"kind": "text",
										"text": " does\nnot prevent the listener from running.\n\nReturns a disposable so that it may be unsubscribed from more easily.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { addAbortListener } from 'node:events';\n\nfunction example(signal) {\n  let disposable;\n  try {\n    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());\n    disposable = addAbortListener(signal, (e) => {\n      // Do something when signal is aborted.\n    });\n  } finally {\n    disposable?.[Symbol.dispose]();\n  }\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v20.5.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Disposable that removes the "
											},
											{
												"kind": "code",
												"text": "`abort`"
											},
											{
												"kind": "text",
												"text": " listener."
											}
										]
									}
								],
								"modifierTags": [
									"@experimental"
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 437,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 526,
									"name": "signal",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "AbortSignal"
										},
										"name": "AbortSignal",
										"package": "typescript"
									}
								},
								{
									"id": 527,
									"name": "resource",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 528,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 437,
													"character": 63
												}
											],
											"signatures": [
												{
													"id": 529,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 437,
															"character": 63
														}
													],
													"parameters": [
														{
															"id": 530,
															"name": "event",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
																	"qualifiedName": "Event"
																},
																"name": "Event",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.esnext.disposable.d.ts",
									"qualifiedName": "Disposable"
								},
								"name": "Disposable",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 365,
								"name": "Logger.addAbortListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 364,
						"name": "Logger.addAbortListener"
					}
				},
				{
					"id": 513,
					"name": "getEventListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 358,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 514,
							"name": "getEventListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s this behaves exactly the same as calling "
									},
									{
										"kind": "code",
										"text": "`.listeners`"
									},
									{
										"kind": "text",
										"text": " on\nthe emitter.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventTarget`"
									},
									{
										"kind": "text",
										"text": "s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.2.0, v14.17.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 358,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 515,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@types/node/events.d.ts",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../node_modules/@types/node/events.d.ts",
															"qualifiedName": "DefaultEventMap"
														},
														"name": "DefaultEventMap",
														"package": "@types/node"
													}
												],
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "EventTarget"
												},
												"name": "EventTarget",
												"package": "typescript"
											}
										]
									}
								},
								{
									"id": 516,
									"name": "name",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 354,
								"name": "Logger.getEventListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 353,
						"name": "Logger.getEventListeners"
					}
				},
				{
					"id": 517,
					"name": "getMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 387,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 518,
							"name": "getMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the currently set max amount of listeners.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s this behaves exactly the same as calling "
									},
									{
										"kind": "code",
										"text": "`.getMaxListeners`"
									},
									{
										"kind": "text",
										"text": " on\nthe emitter.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventTarget`"
									},
									{
										"kind": "text",
										"text": "s this is the only way to get the max event listeners for the\nevent target. If the number of event handlers on a single EventTarget exceeds\nthe max set, the EventTarget will print a warning.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  console.log(getMaxListeners(ee)); // 10\n  setMaxListeners(11, ee);\n  console.log(getMaxListeners(ee)); // 11\n}\n{\n  const et = new EventTarget();\n  console.log(getMaxListeners(et)); // 10\n  setMaxListeners(11, et);\n  console.log(getMaxListeners(et)); // 11\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v19.9.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 387,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 519,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@types/node/events.d.ts",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../node_modules/@types/node/events.d.ts",
															"qualifiedName": "DefaultEventMap"
														},
														"name": "DefaultEventMap",
														"package": "@types/node"
													}
												],
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "EventTarget"
												},
												"name": "EventTarget",
												"package": "typescript"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 358,
								"name": "Logger.getMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 357,
						"name": "Logger.getMaxListeners"
					}
				},
				{
					"id": 509,
					"name": "listenerCount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 330,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 510,
							"name": "listenerCount",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A class method that returns the number of listeners for the given "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " registered on the given "
									},
									{
										"kind": "code",
										"text": "`emitter`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.9.12"
											}
										]
									},
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "Since v3.2.0 - Use "
											},
											{
												"kind": "code",
												"text": "`listenerCount`"
											},
											{
												"kind": "text",
												"text": " instead."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 330,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 511,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The emitter to query"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "__global.NodeJS.EventEmitter"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@types/node/events.d.ts",
													"qualifiedName": "DefaultEventMap"
												},
												"name": "DefaultEventMap",
												"package": "@types/node"
											}
										],
										"name": "EventEmitter",
										"package": "@types/node",
										"qualifiedName": "__global.NodeJS.EventEmitter"
									}
								},
								{
									"id": 512,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event name"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 350,
								"name": "Logger.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 349,
						"name": "Logger.listenerCount"
					}
				},
				{
					"id": 500,
					"name": "on",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 303,
							"character": 15
						},
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 308,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 501,
							"name": "on",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns an "
									},
									{
										"kind": "code",
										"text": "`AsyncIterator`"
									},
									{
										"kind": "text",
										"text": " that iterates "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " events. It will throw\nif the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": ". It removes all listeners when\nexiting the loop. The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting on events:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```"
									},
									{
										"kind": "text",
										"text": "\n\nUse the "
									},
									{
										"kind": "code",
										"text": "`close`"
									},
									{
										"kind": "text",
										"text": " option to specify an array of event names that will end the iteration:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n  ee.emit('close');\n});\n\nfor await (const event of on(ee, 'foo', { close: ['close'] })) {\n  console.log(event); // prints ['bar'] [42]\n}\n// the loop will exit after 'close' is emitted\nconsole.log('done'); // prints 'done'\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.6.0, v12.16.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An "
											},
											{
												"kind": "code",
												"text": "`AsyncIterator`"
											},
											{
												"kind": "text",
												"text": " that iterates "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " events emitted by the "
											},
											{
												"kind": "code",
												"text": "`emitter`"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 303,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 502,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "__global.NodeJS.EventEmitter"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@types/node/events.d.ts",
													"qualifiedName": "DefaultEventMap"
												},
												"name": "DefaultEventMap",
												"package": "@types/node"
											}
										],
										"name": "EventEmitter",
										"package": "@types/node",
										"qualifiedName": "__global.NodeJS.EventEmitter"
									}
								},
								{
									"id": 503,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 504,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "StaticEventEmitterIteratorOptions"
										},
										"name": "StaticEventEmitterIteratorOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/@types/node/compatibility/iterators.d.ts",
									"qualifiedName": "NodeJS.AsyncIterator"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "AsyncIterator",
								"package": "@types/node",
								"qualifiedName": "NodeJS.AsyncIterator"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 341,
								"name": "Logger.on"
							}
						},
						{
							"id": 505,
							"name": "on",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 308,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 506,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "EventTarget"
										},
										"name": "EventTarget",
										"package": "typescript"
									}
								},
								{
									"id": 507,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 508,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "StaticEventEmitterIteratorOptions"
										},
										"name": "StaticEventEmitterIteratorOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/@types/node/compatibility/iterators.d.ts",
									"qualifiedName": "NodeJS.AsyncIterator"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "AsyncIterator",
								"package": "@types/node",
								"qualifiedName": "NodeJS.AsyncIterator"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 345,
								"name": "Logger.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 340,
						"name": "Logger.on"
					}
				},
				{
					"id": 491,
					"name": "once",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 217,
							"character": 15
						},
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 222,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 492,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " that is fulfilled when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits the given\nevent or that is rejected if the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " while waiting.\nThe "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special"
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event\nsemantics and does not listen to the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe special handling of the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event is only used when "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": " is used to wait for another event. If "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": " is used to wait for the\n'"
									},
									{
										"kind": "code",
										"text": "`error'`"
									},
									{
										"kind": "text",
										"text": " event itself, then it is treated as any other kind of event without\nspecial handling:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.error('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```"
									},
									{
										"kind": "text",
										"text": "\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting for the event:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v11.13.0, v10.16.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 217,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 493,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "__global.NodeJS.EventEmitter"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@types/node/events.d.ts",
													"qualifiedName": "DefaultEventMap"
												},
												"name": "DefaultEventMap",
												"package": "@types/node"
											}
										],
										"name": "EventEmitter",
										"package": "@types/node",
										"qualifiedName": "__global.NodeJS.EventEmitter"
									}
								},
								{
									"id": 494,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 495,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "StaticEventEmitterOptions"
										},
										"name": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 332,
								"name": "Logger.once"
							}
						},
						{
							"id": 496,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 222,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 497,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "EventTarget"
										},
										"name": "EventTarget",
										"package": "typescript"
									}
								},
								{
									"id": 498,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 499,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "StaticEventEmitterOptions"
										},
										"name": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 336,
								"name": "Logger.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 331,
						"name": "Logger.once"
					}
				},
				{
					"id": 520,
					"name": "setMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 402,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 521,
							"name": "setMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.4.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 402,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 522,
									"name": "n",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A non-negative number. The maximum number of listeners per "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": " event."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 523,
									"name": "eventTargets",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Zero or more {EventTarget} or {EventEmitter} instances. If none are specified, "
											},
											{
												"kind": "code",
												"text": "`n`"
											},
											{
												"kind": "text",
												"text": " is set as the default max for all newly created {EventTarget} and {EventEmitter}\nobjects."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "reference",
													"target": {
														"sourceFileName": "../node_modules/@types/node/events.d.ts",
														"qualifiedName": "__global.NodeJS.EventEmitter"
													},
													"typeArguments": [
														{
															"type": "reference",
															"target": {
																"sourceFileName": "../node_modules/@types/node/events.d.ts",
																"qualifiedName": "DefaultEventMap"
															},
															"name": "DefaultEventMap",
															"package": "@types/node"
														}
													],
													"name": "EventEmitter",
													"package": "@types/node",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												{
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
														"qualifiedName": "EventTarget"
													},
													"name": "EventTarget",
													"package": "typescript"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 361,
								"name": "Logger.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 360,
						"name": "Logger.setMaxListeners"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						535
					]
				},
				{
					"title": "Properties",
					"children": [
						533,
						532,
						534,
						531
					]
				},
				{
					"title": "Methods",
					"children": [
						539,
						552,
						561,
						567,
						623,
						649,
						613,
						550,
						628,
						615,
						556,
						599,
						575,
						583,
						633,
						641,
						619,
						607,
						591,
						610,
						547,
						524,
						513,
						517,
						509,
						500,
						491,
						520
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@apify/log/cjs/index.d.ts",
					"line": 240,
					"character": 14
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 330,
					"name": "Logger",
					"package": "@apify/log"
				}
			]
		},
		{
			"id": 651,
			"name": "LoggerText",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This is an abstract class that should\nbe extended by custom logger classes.\n\nthis._log() method must be implemented by them."
					}
				]
			},
			"children": [
				{
					"id": 696,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 246,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 697,
							"name": "new LoggerText",
							"variant": "signature",
							"kind": 16384,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 246,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 698,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 699,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											}
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 651,
								"name": "LoggerText",
								"package": "@apify/log"
							},
							"overwrites": {
								"type": "reference",
								"target": 376,
								"name": "Logger.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": 375,
						"name": "Logger.constructor"
					}
				},
				{
					"id": 694,
					"name": "captureRejections",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Value: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n\nChange the default "
							},
							{
								"kind": "code",
								"text": "`captureRejections`"
							},
							{
								"kind": "text",
								"text": " option on all new "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " objects."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.4.0, v12.16.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 459,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 373,
						"name": "Logger.captureRejections"
					}
				},
				{
					"id": 693,
					"name": "captureRejectionSymbol",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Value: "
							},
							{
								"kind": "code",
								"text": "`Symbol.for('nodejs.rejection')`"
							},
							{
								"kind": "text",
								"text": "\n\nSee how to write a custom "
							},
							{
								"kind": "code",
								"text": "`rejection handler`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.4.0, v12.16.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 452,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"target": 372,
							"name": "captureRejectionSymbol",
							"package": "@types/node",
							"qualifiedName": "EventEmitter.captureRejectionSymbol"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 372,
						"name": "Logger.captureRejectionSymbol"
					}
				},
				{
					"id": 695,
					"name": "defaultMaxListeners",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "By default, a maximum of "
							},
							{
								"kind": "code",
								"text": "`10`"
							},
							{
								"kind": "text",
								"text": " listeners can be registered for any single\nevent. This limit can be changed for individual "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances\nusing the "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners(n)`"
							},
							{
								"kind": "text",
								"text": " method. To change the default\nfor _all_"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances, the "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": " property\ncan be used. If this value is not a positive number, a "
							},
							{
								"kind": "code",
								"text": "`RangeError`"
							},
							{
								"kind": "text",
								"text": " is thrown.\n\nTake caution when setting the "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": " because the\nchange affects _all_ "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances, including those created before\nthe change is made. However, calling "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners(n)`"
							},
							{
								"kind": "text",
								"text": " still has\nprecedence over "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": ".\n\nThis is not a hard limit. The "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a \"possible EventEmitter memory leak\" has been detected. For any single\n"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": ", the "
							},
							{
								"kind": "code",
								"text": "`emitter.getMaxListeners()`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners()`"
							},
							{
								"kind": "text",
								"text": " methods can be used to\ntemporarily avoid this warning:\n\n"
							},
							{
								"kind": "code",
								"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once('event', () => {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n```"
							},
							{
								"kind": "text",
								"text": "\n\nThe "
							},
							{
								"kind": "code",
								"text": "`--trace-warnings`"
							},
							{
								"kind": "text",
								"text": " command-line flag can be used to display the\nstack trace for such warnings.\n\nThe emitted warning can be inspected with "
							},
							{
								"kind": "code",
								"text": "`process.on('warning')`"
							},
							{
								"kind": "text",
								"text": " and will\nhave the additional "
							},
							{
								"kind": "code",
								"text": "`emitter`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`type`"
							},
							{
								"kind": "text",
								"text": ", and "
							},
							{
								"kind": "code",
								"text": "`count`"
							},
							{
								"kind": "text",
								"text": " properties, referring to\nthe event emitter instance, the event's name and the number of attached\nlisteners, respectively.\nIts "
							},
							{
								"kind": "code",
								"text": "`name`"
							},
							{
								"kind": "text",
								"text": " property is set to "
							},
							{
								"kind": "code",
								"text": "`'MaxListenersExceededWarning'`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v0.11.2"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 498,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 374,
						"name": "Logger.defaultMaxListeners"
					}
				},
				{
					"id": 692,
					"name": "errorMonitor",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This symbol shall be used to install a listener for only monitoring "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " events. Listeners installed using this symbol are called before the regular "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " event is emitted. Therefore, the process will still crash if no\nregular "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listener is installed."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.6.0, v12.17.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 445,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"target": 371,
							"name": "errorMonitor",
							"package": "@types/node",
							"qualifiedName": "EventEmitter.errorMonitor"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 371,
						"name": "Logger.errorMonitor"
					}
				},
				{
					"id": 700,
					"name": "_log",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 247,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 701,
							"name": "_log",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 247,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 702,
									"name": "level",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 322,
										"name": "LogLevel",
										"package": "@apify/log"
									}
								},
								{
									"id": 703,
									"name": "message",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 704,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 705,
									"name": "exception",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								},
								{
									"id": 706,
									"name": "opts",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"target": 389,
								"name": "Logger._log"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": 388,
						"name": "Logger._log"
					}
				},
				{
					"id": 718,
					"name": "_outputWithConsole",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 36,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 719,
							"name": "_outputWithConsole",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 36,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 720,
									"name": "level",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 322,
										"name": "LogLevel",
										"package": "@apify/log"
									}
								},
								{
									"id": 721,
									"name": "line",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 385,
								"name": "Logger._outputWithConsole"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 384,
						"name": "Logger._outputWithConsole"
					}
				},
				{
					"id": 727,
					"name": "[captureRejectionSymbol]",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 136,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 728,
							"name": "[captureRejectionSymbol]",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 136,
									"character": 8
								}
							],
							"typeParameters": [
								{
									"id": 729,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 730,
									"name": "error",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Error"
										},
										"name": "Error",
										"package": "typescript"
									}
								},
								{
									"id": 731,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 732,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "AnyRest"
										},
										"name": "AnyRest",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 401,
								"name": "Logger.[captureRejectionSymbol]"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 400,
						"name": "Logger.[captureRejectionSymbol]"
					}
				},
				{
					"id": 733,
					"name": "addListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 597,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 734,
							"name": "addListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.on(eventName, listener)`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 597,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 735,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 736,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 737,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 738,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 117,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 739,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"parameters": [
														{
															"id": 740,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 407,
								"name": "Logger.addListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 406,
						"name": "Logger.addListener"
					}
				},
				{
					"id": 789,
					"name": "emit",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 859,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 790,
							"name": "emit",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Synchronously calls each of the listeners registered for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", in the order they were registered, passing the supplied arguments\nto each.\n\nReturns "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if the event had listeners, "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nconsole.log(myEmitter.listeners('event'));\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 859,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 791,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 792,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 793,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "AnyRest"
										},
										"name": "AnyRest",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 463,
								"name": "Logger.emit"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 462,
						"name": "Logger.emit"
					}
				},
				{
					"id": 815,
					"name": "eventNames",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 922,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 816,
							"name": "eventNames",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or "
									},
									{
										"kind": "code",
										"text": "`Symbol`"
									},
									{
										"kind": "text",
										"text": "s.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 922,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "symbol"
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 489,
								"name": "Logger.eventNames"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 488,
						"name": "Logger.eventNames"
					}
				},
				{
					"id": 779,
					"name": "getMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 774,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 780,
							"name": "getMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the current max listener value for the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " which is either\nset by "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " or defaults to "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "defaultMaxListeners",
										"target": 695
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v1.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 774,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 453,
								"name": "Logger.getMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 452,
						"name": "Logger.getMaxListeners"
					}
				},
				{
					"id": 716,
					"name": "getOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 35,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 717,
							"name": "getOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 35,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Record",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 383,
								"name": "Logger.getOptions"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 382,
						"name": "Logger.getOptions"
					}
				},
				{
					"id": 794,
					"name": "listenerCount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 868,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 795,
							"name": "listenerCount",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the number of listeners listening for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\nIf "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " is provided, it will return how many times the listener is found\nin the list of the listeners of the event."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v3.2.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 868,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 796,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 797,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 798,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event handler function"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Function"
										},
										"name": "Function",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 468,
								"name": "Logger.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 467,
						"name": "Logger.listenerCount"
					}
				},
				{
					"id": 781,
					"name": "listeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 787,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 782,
							"name": "listeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 787,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 783,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 784,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 455,
								"name": "Logger.listeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 454,
						"name": "Logger.listeners"
					}
				},
				{
					"id": 722,
					"name": "log",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 38,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 723,
							"name": "log",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 38,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 724,
									"name": "level",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": 322,
										"name": "LogLevel",
										"package": "@apify/log"
									}
								},
								{
									"id": 725,
									"name": "message",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 726,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 396,
								"name": "Logger.log"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 395,
						"name": "Logger.log"
					}
				},
				{
					"id": 765,
					"name": "off",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 747,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 766,
							"name": "off",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.removeListener()`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v10.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 747,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 767,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 768,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 769,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 770,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 117,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 771,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"parameters": [
														{
															"id": 772,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 439,
								"name": "Logger.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 438,
						"name": "Logger.off"
					}
				},
				{
					"id": 741,
					"name": "on",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 629,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 742,
							"name": "on",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the end of the listeners array for the event\nnamed "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has already\nbeen added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " and\n"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple times.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The "
									},
									{
										"kind": "code",
										"text": "`emitter.prependListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.101"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 629,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 743,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 744,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 745,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 746,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 117,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 747,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"parameters": [
														{
															"id": 748,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 415,
								"name": "Logger.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 414,
						"name": "Logger.on"
					}
				},
				{
					"id": 749,
					"name": "once",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 659,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 750,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time** "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". The\nnext time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this listener is removed and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The "
									},
									{
										"kind": "code",
										"text": "`emitter.prependOnceListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 659,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 751,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 752,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 753,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 754,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 117,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 755,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"parameters": [
														{
															"id": 756,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 423,
								"name": "Logger.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 422,
						"name": "Logger.once"
					}
				},
				{
					"id": 799,
					"name": "prependListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 886,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 800,
							"name": "prependListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the _beginning_ of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "\nand "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple times.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 886,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 801,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 802,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 803,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 804,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 117,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 805,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"parameters": [
														{
															"id": 806,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 473,
								"name": "Logger.prependListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 472,
						"name": "Logger.prependListener"
					}
				},
				{
					"id": 807,
					"name": "prependOnceListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 902,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 808,
							"name": "prependOnceListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " to the _beginning_ of the listeners array. The next time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this\nlistener is removed, and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 902,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 809,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 810,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 811,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 812,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 117,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 813,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"parameters": [
														{
															"id": 814,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 481,
								"name": "Logger.prependOnceListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 480,
						"name": "Logger.prependOnceListener"
					}
				},
				{
					"id": 785,
					"name": "rawListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 818,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 786,
							"name": "rawListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ",\nincluding any wrappers (such as those created by "
									},
									{
										"kind": "code",
										"text": "`.once()`"
									},
									{
										"kind": "text",
										"text": ").\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v9.4.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 818,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 787,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 788,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 459,
								"name": "Logger.rawListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 458,
						"name": "Logger.rawListeners"
					}
				},
				{
					"id": 773,
					"name": "removeAllListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 758,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 774,
							"name": "removeAllListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes all listeners, or those of the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 758,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 775,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 447,
								"name": "Logger.removeAllListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 446,
						"name": "Logger.removeAllListeners"
					}
				},
				{
					"id": 757,
					"name": "removeListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 742,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 758,
							"name": "removeListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the specified "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " from the listener array for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", then "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`removeAllListeners()`"
									},
									{
										"kind": "text",
										"text": " calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from"
									},
									{
										"kind": "code",
										"text": "`emit()`"
									},
									{
										"kind": "text",
										"text": " in progress. Subsequent events behave as expected.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```"
									},
									{
										"kind": "text",
										"text": "\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe "
									},
									{
										"kind": "code",
										"text": "`emitter.listeners()`"
									},
									{
										"kind": "text",
										"text": " method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove the most\nrecently added instance. In the example the "
									},
									{
										"kind": "code",
										"text": "`once('ping')`"
									},
									{
										"kind": "text",
										"text": " listener is removed:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 742,
									"character": 16
								}
							],
							"typeParameters": [
								{
									"id": 759,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 760,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 761,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 762,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 117,
													"character": 42
												}
											],
											"signatures": [
												{
													"id": 763,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"parameters": [
														{
															"id": 764,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 431,
								"name": "Logger.removeListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 430,
						"name": "Logger.removeListener"
					}
				},
				{
					"id": 776,
					"name": "setMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 768,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 777,
							"name": "setMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s will print a warning if more than "
									},
									{
										"kind": "code",
										"text": "`10`"
									},
									{
										"kind": "text",
										"text": " listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " method allows the limit to be\nmodified for this specific "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance. The value can be set to "
									},
									{
										"kind": "code",
										"text": "`Infinity`"
									},
									{
										"kind": "text",
										"text": " (or "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": ") to indicate an unlimited number of listeners.\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.5"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 768,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 778,
									"name": "n",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 450,
								"name": "Logger.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 449,
						"name": "Logger.setMaxListeners"
					}
				},
				{
					"id": 713,
					"name": "setOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 34,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 714,
							"name": "setOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@apify/log/cjs/index.d.ts",
									"line": 34,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 715,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 380,
								"name": "Logger.setOptions"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 379,
						"name": "Logger.setOptions"
					}
				},
				{
					"id": 685,
					"name": "addAbortListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 437,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 686,
							"name": "addAbortListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Listens once to the "
									},
									{
										"kind": "code",
										"text": "`abort`"
									},
									{
										"kind": "text",
										"text": " event on the provided "
									},
									{
										"kind": "code",
										"text": "`signal`"
									},
									{
										"kind": "text",
										"text": ".\n\nListening to the "
									},
									{
										"kind": "code",
										"text": "`abort`"
									},
									{
										"kind": "text",
										"text": " event on abort signals is unsafe and may\nlead to resource leaks since another third party with the signal can\ncall "
									},
									{
										"kind": "code",
										"text": "`e.stopImmediatePropagation()`"
									},
									{
										"kind": "text",
										"text": ". Unfortunately Node.js cannot change\nthis since it would violate the web standard. Additionally, the original\nAPI makes it easy to forget to remove listeners.\n\nThis API allows safely using "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": "s in Node.js APIs by solving these\ntwo issues by listening to the event such that "
									},
									{
										"kind": "code",
										"text": "`stopImmediatePropagation`"
									},
									{
										"kind": "text",
										"text": " does\nnot prevent the listener from running.\n\nReturns a disposable so that it may be unsubscribed from more easily.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { addAbortListener } from 'node:events';\n\nfunction example(signal) {\n  let disposable;\n  try {\n    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());\n    disposable = addAbortListener(signal, (e) => {\n      // Do something when signal is aborted.\n    });\n  } finally {\n    disposable?.[Symbol.dispose]();\n  }\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v20.5.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Disposable that removes the "
											},
											{
												"kind": "code",
												"text": "`abort`"
											},
											{
												"kind": "text",
												"text": " listener."
											}
										]
									}
								],
								"modifierTags": [
									"@experimental"
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 437,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 687,
									"name": "signal",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "AbortSignal"
										},
										"name": "AbortSignal",
										"package": "typescript"
									}
								},
								{
									"id": 688,
									"name": "resource",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 689,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 437,
													"character": 63
												}
											],
											"signatures": [
												{
													"id": 690,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 437,
															"character": 63
														}
													],
													"parameters": [
														{
															"id": 691,
															"name": "event",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
																	"qualifiedName": "Event"
																},
																"name": "Event",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.esnext.disposable.d.ts",
									"qualifiedName": "Disposable"
								},
								"name": "Disposable",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 365,
								"name": "Logger.addAbortListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 364,
						"name": "Logger.addAbortListener"
					}
				},
				{
					"id": 674,
					"name": "getEventListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 358,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 675,
							"name": "getEventListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s this behaves exactly the same as calling "
									},
									{
										"kind": "code",
										"text": "`.listeners`"
									},
									{
										"kind": "text",
										"text": " on\nthe emitter.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventTarget`"
									},
									{
										"kind": "text",
										"text": "s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.2.0, v14.17.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 358,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 676,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@types/node/events.d.ts",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../node_modules/@types/node/events.d.ts",
															"qualifiedName": "DefaultEventMap"
														},
														"name": "DefaultEventMap",
														"package": "@types/node"
													}
												],
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "EventTarget"
												},
												"name": "EventTarget",
												"package": "typescript"
											}
										]
									}
								},
								{
									"id": 677,
									"name": "name",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 354,
								"name": "Logger.getEventListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 353,
						"name": "Logger.getEventListeners"
					}
				},
				{
					"id": 678,
					"name": "getMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 387,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 679,
							"name": "getMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the currently set max amount of listeners.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s this behaves exactly the same as calling "
									},
									{
										"kind": "code",
										"text": "`.getMaxListeners`"
									},
									{
										"kind": "text",
										"text": " on\nthe emitter.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventTarget`"
									},
									{
										"kind": "text",
										"text": "s this is the only way to get the max event listeners for the\nevent target. If the number of event handlers on a single EventTarget exceeds\nthe max set, the EventTarget will print a warning.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  console.log(getMaxListeners(ee)); // 10\n  setMaxListeners(11, ee);\n  console.log(getMaxListeners(ee)); // 11\n}\n{\n  const et = new EventTarget();\n  console.log(getMaxListeners(et)); // 10\n  setMaxListeners(11, et);\n  console.log(getMaxListeners(et)); // 11\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v19.9.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 387,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 680,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@types/node/events.d.ts",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../node_modules/@types/node/events.d.ts",
															"qualifiedName": "DefaultEventMap"
														},
														"name": "DefaultEventMap",
														"package": "@types/node"
													}
												],
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "EventTarget"
												},
												"name": "EventTarget",
												"package": "typescript"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 358,
								"name": "Logger.getMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 357,
						"name": "Logger.getMaxListeners"
					}
				},
				{
					"id": 670,
					"name": "listenerCount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 330,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 671,
							"name": "listenerCount",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A class method that returns the number of listeners for the given "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " registered on the given "
									},
									{
										"kind": "code",
										"text": "`emitter`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.9.12"
											}
										]
									},
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "Since v3.2.0 - Use "
											},
											{
												"kind": "code",
												"text": "`listenerCount`"
											},
											{
												"kind": "text",
												"text": " instead."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 330,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 672,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The emitter to query"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "__global.NodeJS.EventEmitter"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@types/node/events.d.ts",
													"qualifiedName": "DefaultEventMap"
												},
												"name": "DefaultEventMap",
												"package": "@types/node"
											}
										],
										"name": "EventEmitter",
										"package": "@types/node",
										"qualifiedName": "__global.NodeJS.EventEmitter"
									}
								},
								{
									"id": 673,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event name"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 350,
								"name": "Logger.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 349,
						"name": "Logger.listenerCount"
					}
				},
				{
					"id": 661,
					"name": "on",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 303,
							"character": 15
						},
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 308,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 662,
							"name": "on",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns an "
									},
									{
										"kind": "code",
										"text": "`AsyncIterator`"
									},
									{
										"kind": "text",
										"text": " that iterates "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " events. It will throw\nif the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": ". It removes all listeners when\nexiting the loop. The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting on events:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```"
									},
									{
										"kind": "text",
										"text": "\n\nUse the "
									},
									{
										"kind": "code",
										"text": "`close`"
									},
									{
										"kind": "text",
										"text": " option to specify an array of event names that will end the iteration:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n  ee.emit('close');\n});\n\nfor await (const event of on(ee, 'foo', { close: ['close'] })) {\n  console.log(event); // prints ['bar'] [42]\n}\n// the loop will exit after 'close' is emitted\nconsole.log('done'); // prints 'done'\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.6.0, v12.16.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An "
											},
											{
												"kind": "code",
												"text": "`AsyncIterator`"
											},
											{
												"kind": "text",
												"text": " that iterates "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " events emitted by the "
											},
											{
												"kind": "code",
												"text": "`emitter`"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 303,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 663,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "__global.NodeJS.EventEmitter"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@types/node/events.d.ts",
													"qualifiedName": "DefaultEventMap"
												},
												"name": "DefaultEventMap",
												"package": "@types/node"
											}
										],
										"name": "EventEmitter",
										"package": "@types/node",
										"qualifiedName": "__global.NodeJS.EventEmitter"
									}
								},
								{
									"id": 664,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 665,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "StaticEventEmitterIteratorOptions"
										},
										"name": "StaticEventEmitterIteratorOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/@types/node/compatibility/iterators.d.ts",
									"qualifiedName": "NodeJS.AsyncIterator"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "AsyncIterator",
								"package": "@types/node",
								"qualifiedName": "NodeJS.AsyncIterator"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 341,
								"name": "Logger.on"
							}
						},
						{
							"id": 666,
							"name": "on",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 308,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 667,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "EventTarget"
										},
										"name": "EventTarget",
										"package": "typescript"
									}
								},
								{
									"id": 668,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 669,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "StaticEventEmitterIteratorOptions"
										},
										"name": "StaticEventEmitterIteratorOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/@types/node/compatibility/iterators.d.ts",
									"qualifiedName": "NodeJS.AsyncIterator"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "AsyncIterator",
								"package": "@types/node",
								"qualifiedName": "NodeJS.AsyncIterator"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 345,
								"name": "Logger.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 340,
						"name": "Logger.on"
					}
				},
				{
					"id": 652,
					"name": "once",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 217,
							"character": 15
						},
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 222,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 653,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " that is fulfilled when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits the given\nevent or that is rejected if the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " while waiting.\nThe "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special"
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event\nsemantics and does not listen to the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe special handling of the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event is only used when "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": " is used to wait for another event. If "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": " is used to wait for the\n'"
									},
									{
										"kind": "code",
										"text": "`error'`"
									},
									{
										"kind": "text",
										"text": " event itself, then it is treated as any other kind of event without\nspecial handling:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.error('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```"
									},
									{
										"kind": "text",
										"text": "\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting for the event:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v11.13.0, v10.16.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 217,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 654,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "__global.NodeJS.EventEmitter"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@types/node/events.d.ts",
													"qualifiedName": "DefaultEventMap"
												},
												"name": "DefaultEventMap",
												"package": "@types/node"
											}
										],
										"name": "EventEmitter",
										"package": "@types/node",
										"qualifiedName": "__global.NodeJS.EventEmitter"
									}
								},
								{
									"id": 655,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 656,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "StaticEventEmitterOptions"
										},
										"name": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 332,
								"name": "Logger.once"
							}
						},
						{
							"id": 657,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 222,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 658,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "EventTarget"
										},
										"name": "EventTarget",
										"package": "typescript"
									}
								},
								{
									"id": 659,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 660,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@types/node/events.d.ts",
											"qualifiedName": "StaticEventEmitterOptions"
										},
										"name": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 336,
								"name": "Logger.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 331,
						"name": "Logger.once"
					}
				},
				{
					"id": 681,
					"name": "setMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 402,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 682,
							"name": "setMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.4.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 402,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 683,
									"name": "n",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A non-negative number. The maximum number of listeners per "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": " event."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 684,
									"name": "eventTargets",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Zero or more {EventTarget} or {EventEmitter} instances. If none are specified, "
											},
											{
												"kind": "code",
												"text": "`n`"
											},
											{
												"kind": "text",
												"text": " is set as the default max for all newly created {EventTarget} and {EventEmitter}\nobjects."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "reference",
													"target": {
														"sourceFileName": "../node_modules/@types/node/events.d.ts",
														"qualifiedName": "__global.NodeJS.EventEmitter"
													},
													"typeArguments": [
														{
															"type": "reference",
															"target": {
																"sourceFileName": "../node_modules/@types/node/events.d.ts",
																"qualifiedName": "DefaultEventMap"
															},
															"name": "DefaultEventMap",
															"package": "@types/node"
														}
													],
													"name": "EventEmitter",
													"package": "@types/node",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												{
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
														"qualifiedName": "EventTarget"
													},
													"name": "EventTarget",
													"package": "typescript"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 361,
								"name": "Logger.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": 360,
						"name": "Logger.setMaxListeners"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						696
					]
				},
				{
					"title": "Properties",
					"children": [
						694,
						693,
						695,
						692
					]
				},
				{
					"title": "Methods",
					"children": [
						700,
						718,
						727,
						733,
						789,
						815,
						779,
						716,
						794,
						781,
						722,
						765,
						741,
						749,
						799,
						807,
						785,
						773,
						757,
						776,
						713,
						685,
						674,
						678,
						670,
						661,
						652,
						681
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@apify/log/cjs/index.d.ts",
					"line": 245,
					"character": 14
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 330,
					"name": "Logger",
					"package": "@apify/log"
				}
			]
		},
		{
			"id": 1685,
			"name": "PlatformEventManager",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Gets an instance of a Node.js'\n[EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter)\nclass that emits various events from the SDK or the Apify platform.\nThe event emitter is initialized by calling the "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "Actor.main"
					},
					{
						"kind": "text",
						"text": " function.\n\n**Example usage:**\n\n"
					},
					{
						"kind": "code",
						"text": "```javascript\nActor.on('cpuInfo', (data) => {\n  if (data.isCpuOverloaded) console.log('Oh no, the CPU is overloaded!');\n});\n```"
					},
					{
						"kind": "text",
						"text": "\n\nThe following events are emitted:\n\n- "
					},
					{
						"kind": "code",
						"text": "`cpuInfo`"
					},
					{
						"kind": "text",
						"text": ": "
					},
					{
						"kind": "code",
						"text": "`{ \"isCpuOverloaded\": Boolean }`"
					},
					{
						"kind": "text",
						"text": "\n  The event is emitted approximately every second\n  and it indicates whether the Actor is using the maximum of available CPU resources.\n  If that's the case, the Actor should not add more workload.\n  For example, this event is used by the "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "AutoscaledPool"
					},
					{
						"kind": "text",
						"text": " class.\n- "
					},
					{
						"kind": "code",
						"text": "`migrating`"
					},
					{
						"kind": "text",
						"text": ": "
					},
					{
						"kind": "code",
						"text": "`void`"
					},
					{
						"kind": "text",
						"text": "\n  Emitted when the Actor running on the Apify platform is going to be migrated to another worker server soon.\n  You can use it to persist the state of the Actor and gracefully stop your in-progress tasks,\n  so that they are not interrupted by the migration.\n  For example, this is used by the "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "RequestList"
					},
					{
						"kind": "text",
						"text": " class.\n- "
					},
					{
						"kind": "code",
						"text": "`aborting`"
					},
					{
						"kind": "text",
						"text": ": "
					},
					{
						"kind": "code",
						"text": "`void`"
					},
					{
						"kind": "text",
						"text": "\n  When a user aborts an Actor run on the Apify platform, they can choose to abort gracefully to allow\n  the Actor some time before getting killed. This graceful abort emits the "
					},
					{
						"kind": "code",
						"text": "`aborting`"
					},
					{
						"kind": "text",
						"text": " event which the SDK\n  uses to gracefully stop running crawls and you can use it to do your own cleanup as well.\n- "
					},
					{
						"kind": "code",
						"text": "`persistState`"
					},
					{
						"kind": "text",
						"text": ": "
					},
					{
						"kind": "code",
						"text": "`{ \"isMigrating\": Boolean }`"
					},
					{
						"kind": "text",
						"text": "\n  Emitted in regular intervals (by default 60 seconds) to notify all components of Apify SDK that it is time to persist\n  their state, in order to avoid repeating all work when the Actor restarts.\n  This event is automatically emitted together with the "
					},
					{
						"kind": "code",
						"text": "`migrating`"
					},
					{
						"kind": "text",
						"text": " event,\n  in which case the "
					},
					{
						"kind": "code",
						"text": "`isMigrating`"
					},
					{
						"kind": "text",
						"text": " flag is set to "
					},
					{
						"kind": "code",
						"text": "`true`"
					},
					{
						"kind": "text",
						"text": ". Otherwise the flag is "
					},
					{
						"kind": "code",
						"text": "`false`"
					},
					{
						"kind": "text",
						"text": ".\n  Note that the "
					},
					{
						"kind": "code",
						"text": "`persistState`"
					},
					{
						"kind": "text",
						"text": " event is provided merely for user convenience,\n  you can achieve the same effect using "
					},
					{
						"kind": "code",
						"text": "`setInterval()`"
					},
					{
						"kind": "text",
						"text": " and listening for the "
					},
					{
						"kind": "code",
						"text": "`migrating`"
					},
					{
						"kind": "text",
						"text": " event."
					}
				]
			},
			"children": [
				{
					"id": 1686,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/platform_event_manager.ts",
							"line": 50,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/platform_event_manager.ts#L50"
						}
					],
					"signatures": [
						{
							"id": 1687,
							"name": "new PlatformEventManager",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"sources": [
								{
									"fileName": "packages/apify/src/platform_event_manager.ts",
									"line": 50,
									"character": 4,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/platform_event_manager.ts#L50"
								}
							],
							"parameters": [
								{
									"id": 1688,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 1422,
										"name": "Configuration",
										"package": "apify"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"target": 1685,
								"name": "PlatformEventManager",
								"package": "apify"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "EventManager.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "EventManager.constructor"
					}
				},
				{
					"id": 1690,
					"name": "config",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isReadonly": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/platform_event_manager.ts",
							"line": 50,
							"character": 34,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/platform_event_manager.ts#L50"
						}
					],
					"type": {
						"type": "reference",
						"target": 1422,
						"name": "Configuration",
						"package": "apify"
					},
					"defaultValue": "...",
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventManager.config"
					}
				},
				{
					"id": 1696,
					"name": "close",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/platform_event_manager.ts",
							"line": 112,
							"character": 19,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/platform_event_manager.ts#L112"
						}
					],
					"signatures": [
						{
							"id": 1697,
							"name": "close",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Closes websocket providing events from Actor infrastructure and also stops sending internal events\nof Apify package such as "
									},
									{
										"kind": "code",
										"text": "`persistState`"
									},
									{
										"kind": "text",
										"text": ".\nThis is automatically called at the end of "
									},
									{
										"kind": "code",
										"text": "`Actor.main()`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/platform_event_manager.ts",
									"line": 112,
									"character": 19,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/platform_event_manager.ts#L112"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "EventManager.close"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "EventManager.close"
					}
				},
				{
					"id": 1717,
					"name": "emit",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/events/event_manager.d.ts",
							"line": 36,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1718,
							"name": "emit",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/events/event_manager.d.ts",
									"line": 36,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1719,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
											"qualifiedName": "EventTypeName"
										},
										"name": "EventTypeName",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 1720,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "unknown"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventManager.emit"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventManager.emit"
					}
				},
				{
					"id": 1691,
					"name": "init",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/platform_event_manager.ts",
							"line": 58,
							"character": 19,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/platform_event_manager.ts#L58"
						}
					],
					"signatures": [
						{
							"id": 1692,
							"name": "init",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Initializes "
									},
									{
										"kind": "code",
										"text": "`Actor.events`"
									},
									{
										"kind": "text",
										"text": " event emitter by creating a connection to a websocket that provides them.\nThis is an internal function that is automatically called by "
									},
									{
										"kind": "code",
										"text": "`Actor.main()`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/platform_event_manager.ts",
									"line": 58,
									"character": 19,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/platform_event_manager.ts#L58"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "EventManager.init"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "EventManager.init"
					}
				},
				{
					"id": 1721,
					"name": "isInitialized",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/events/event_manager.d.ts",
							"line": 37,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1722,
							"name": "isInitialized",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/events/event_manager.d.ts",
									"line": 37,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventManager.isInitialized"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventManager.isInitialized"
					}
				},
				{
					"id": 1710,
					"name": "off",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/events/event_manager.d.ts",
							"line": 35,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1711,
							"name": "off",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/events/event_manager.d.ts",
									"line": 35,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1712,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
											"qualifiedName": "EventTypeName"
										},
										"name": "EventTypeName",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 1713,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1714,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@crawlee/core/events/event_manager.d.ts",
													"line": 35,
													"character": 41
												}
											],
											"signatures": [
												{
													"id": 1715,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@crawlee/core/events/event_manager.d.ts",
															"line": 35,
															"character": 41
														}
													],
													"parameters": [
														{
															"id": 1716,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventManager.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventManager.off"
					}
				},
				{
					"id": 1703,
					"name": "on",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/events/event_manager.d.ts",
							"line": 34,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1704,
							"name": "on",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/events/event_manager.d.ts",
									"line": 34,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 1705,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
											"qualifiedName": "EventTypeName"
										},
										"name": "EventTypeName",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 1706,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1707,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@crawlee/core/events/event_manager.d.ts",
													"line": 34,
													"character": 39
												}
											],
											"signatures": [
												{
													"id": 1708,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@crawlee/core/events/event_manager.d.ts",
															"line": 34,
															"character": 39
														}
													],
													"parameters": [
														{
															"id": 1709,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventManager.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventManager.on"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1686
					]
				},
				{
					"title": "Properties",
					"children": [
						1690
					]
				},
				{
					"title": "Methods",
					"children": [
						1696,
						1717,
						1691,
						1721,
						1710,
						1703
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/platform_event_manager.ts",
					"line": 46,
					"character": 13,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/platform_event_manager.ts#L46"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
						"qualifiedName": "EventManager"
					},
					"name": "EventManager",
					"package": "@crawlee/core"
				}
			]
		},
		{
			"id": 1610,
			"name": "ProxyConfiguration",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Configures connection to a proxy server with the provided options. Proxy servers are used to prevent target websites from blocking\nyour crawlers based on IP address rate limits or blacklists. Setting proxy configuration in your crawlers automatically configures\nthem to use the selected proxies for all connections. You can get information about the currently used proxy by inspecting\nthe "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "ProxyInfo"
					},
					{
						"kind": "text",
						"text": " property in your crawler's page function. There, you can inspect the proxy's URL and other attributes.\n\nThe proxy servers are managed by [Apify Proxy](https://docs.apify.com/proxy). To be able to use Apify Proxy,\nyou need an Apify account and access to the selected proxies. If you provide no configuration option,\nthe proxies will be managed automatically using a smart algorithm.\n\nIf you want to use your own proxies, use the "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "ProxyConfigurationOptions.proxyUrls"
					},
					{
						"kind": "text",
						"text": " option. Your list of proxy URLs will\nbe rotated by the configuration if this option is provided.\n\n**Example usage:**\n\n"
					},
					{
						"kind": "code",
						"text": "```javascript\n\nconst proxyConfiguration = await Actor.createProxyConfiguration({\n  groups: ['GROUP1', 'GROUP2'] // List of Apify Proxy groups\n  countryCode: 'US',\n});\n\nconst crawler = new CheerioCrawler({\n  // ...\n  proxyConfiguration,\n  requestHandler({ proxyInfo }) {\n     const usedProxyUrl = proxyInfo.url; // Getting the proxy URL\n  }\n})\n\n```"
					}
				]
			},
			"children": [
				{
					"id": 1621,
					"name": "config",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 171,
							"character": 66,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/proxy_configuration.ts#L171"
						}
					],
					"type": {
						"type": "reference",
						"target": 1422,
						"name": "Configuration",
						"package": "apify"
					},
					"defaultValue": "..."
				},
				{
					"id": 1654,
					"name": "isManInTheMiddle",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/proxy_configuration.d.ts",
							"line": 157,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreProxyConfiguration.isManInTheMiddle"
					}
				},
				{
					"id": 1622,
					"name": "initialize",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 234,
							"character": 10,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/proxy_configuration.ts#L234"
						}
					],
					"signatures": [
						{
							"id": 1623,
							"name": "initialize",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Loads proxy password if token is provided and checks access to Apify Proxy and provided proxy groups\nif Apify Proxy configuration is used.\nAlso checks if country has access to Apify Proxy groups if the country code is provided.\n\nYou should use the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "createProxyConfiguration"
									},
									{
										"kind": "text",
										"text": " function to create a pre-initialized\n"
									},
									{
										"kind": "code",
										"text": "`ProxyConfiguration`"
									},
									{
										"kind": "text",
										"text": " instance instead of calling this manually."
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/proxy_configuration.ts",
									"line": 234,
									"character": 10,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/proxy_configuration.ts#L234"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1624,
					"name": "newProxyInfo",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 260,
							"character": 19,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/proxy_configuration.ts#L260"
						}
					],
					"signatures": [
						{
							"id": 1625,
							"name": "newProxyInfo",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This function creates a new "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "ProxyInfo"
									},
									{
										"kind": "text",
										"text": " info object.\nIt is used by CheerioCrawler and PuppeteerCrawler to generate proxy URLs and also to allow the user to inspect\nthe currently used proxy via the requestHandler parameter "
									},
									{
										"kind": "code",
										"text": "`proxyInfo`"
									},
									{
										"kind": "text",
										"text": ".\nUse it if you want to work with a rich representation of a proxy URL.\nIf you need the URL string only, use "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "ProxyConfiguration.newUrl"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Represents information about used proxy and its configuration."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/proxy_configuration.ts",
									"line": 260,
									"character": 19,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/proxy_configuration.ts#L260"
								}
							],
							"parameters": [
								{
									"id": 1626,
									"name": "sessionId",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Represents the identifier of user "
											},
											{
												"kind": "inline-tag",
												"tag": "@apilink",
												"text": "Session"
											},
											{
												"kind": "text",
												"text": " that can be managed by the "
											},
											{
												"kind": "inline-tag",
												"tag": "@apilink",
												"text": "SessionPool"
											},
											{
												"kind": "text",
												"text": " or\n you can use the Apify Proxy [Session](https://docs.apify.com/proxy#sessions) identifier.\n When the provided sessionId is a number, it's converted to a string. Property sessionId of\n "
											},
											{
												"kind": "inline-tag",
												"tag": "@apilink",
												"text": "ProxyInfo"
											},
											{
												"kind": "text",
												"text": " is always returned as a type string.\n\n All the HTTP requests going through the proxy with the same session identifier\n will use the same target proxy server (i.e. the same IP address).\n The identifier must not be longer than 50 characters and include only the following: "
											},
											{
												"kind": "code",
												"text": "`0-9`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`a-z`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`A-Z`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`\".\"`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`\"_\"`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`\"~\"`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 1627,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/proxy_configuration.ts",
											"qualifiedName": "TieredProxyOptions"
										},
										"name": "TieredProxyOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"target": 1600,
												"name": "ProxyInfo",
												"package": "apify"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "CoreProxyConfiguration.newProxyInfo"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "CoreProxyConfiguration.newProxyInfo"
					}
				},
				{
					"id": 1628,
					"name": "newUrl",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 294,
							"character": 19,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/proxy_configuration.ts#L294"
						}
					],
					"signatures": [
						{
							"id": 1629,
							"name": "newUrl",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a new proxy URL based on provided configuration options and the "
									},
									{
										"kind": "code",
										"text": "`sessionId`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A string with a proxy URL, including authentication credentials and port number.\n For example, "
											},
											{
												"kind": "code",
												"text": "`http://bob:password123@proxy.example.com:8000`"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "packages/apify/src/proxy_configuration.ts",
									"line": 294,
									"character": 19,
									"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/proxy_configuration.ts#L294"
								}
							],
							"parameters": [
								{
									"id": 1630,
									"name": "sessionId",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Represents the identifier of user "
											},
											{
												"kind": "inline-tag",
												"tag": "@apilink",
												"text": "Session"
											},
											{
												"kind": "text",
												"text": " that can be managed by the "
											},
											{
												"kind": "inline-tag",
												"tag": "@apilink",
												"text": "SessionPool"
											},
											{
												"kind": "text",
												"text": " or\n you can use the Apify Proxy [Session](https://docs.apify.com/proxy#sessions) identifier.\n When the provided sessionId is a number, it's converted to a string.\n\n All the HTTP requests going through the proxy with the same session identifier\n will use the same target proxy server (i.e. the same IP address).\n The identifier must not be longer than 50 characters and include only the following: "
											},
											{
												"kind": "code",
												"text": "`0-9`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`a-z`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`A-Z`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`\".\"`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`\"_\"`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`\"~\"`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 1631,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/proxy_configuration.ts",
											"qualifiedName": "TieredProxyOptions"
										},
										"name": "TieredProxyOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "CoreProxyConfiguration.newUrl"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "CoreProxyConfiguration.newUrl"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1621,
						1654
					]
				},
				{
					"title": "Methods",
					"children": [
						1622,
						1624,
						1628
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/proxy_configuration.ts",
					"line": 160,
					"character": 13,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/proxy_configuration.ts#L160"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../node_modules/@crawlee/src/proxy_configuration.ts",
						"qualifiedName": "ProxyConfiguration"
					},
					"name": "ProxyConfiguration",
					"package": "@crawlee/core"
				}
			]
		},
		{
			"id": 131,
			"name": "RequestQueue",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Represents a queue of URLs to crawl, which is used for deep crawling of websites\nwhere you start with several URLs and then recursively\nfollow links to other pages. The data structure supports both breadth-first and depth-first crawling orders.\n\nEach URL is represented using an instance of the "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "Request"
					},
					{
						"kind": "text",
						"text": " class.\nThe queue can only contain unique URLs. More precisely, it can only contain "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "Request"
					},
					{
						"kind": "text",
						"text": " instances\nwith distinct "
					},
					{
						"kind": "code",
						"text": "`uniqueKey`"
					},
					{
						"kind": "text",
						"text": " properties. By default, "
					},
					{
						"kind": "code",
						"text": "`uniqueKey`"
					},
					{
						"kind": "text",
						"text": " is generated from the URL, but it can also be overridden.\nTo add a single URL multiple times to the queue,\ncorresponding "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "Request"
					},
					{
						"kind": "text",
						"text": " objects will need to have different "
					},
					{
						"kind": "code",
						"text": "`uniqueKey`"
					},
					{
						"kind": "text",
						"text": " properties.\n\nDo not instantiate this class directly, use the "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "RequestQueue.open"
					},
					{
						"kind": "text",
						"text": " function instead.\n\n"
					},
					{
						"kind": "code",
						"text": "`RequestQueue`"
					},
					{
						"kind": "text",
						"text": " is used by "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "BasicCrawler"
					},
					{
						"kind": "text",
						"text": ", "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "CheerioCrawler"
					},
					{
						"kind": "text",
						"text": ", "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "PuppeteerCrawler"
					},
					{
						"kind": "text",
						"text": "\nand "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "PlaywrightCrawler"
					},
					{
						"kind": "text",
						"text": " as a source of URLs to crawl.\nUnlike "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "RequestList"
					},
					{
						"kind": "text",
						"text": ", "
					},
					{
						"kind": "code",
						"text": "`RequestQueue`"
					},
					{
						"kind": "text",
						"text": " supports dynamic adding and removing of requests.\nOn the other hand, the queue is not optimized for operations that add or remove a large number of URLs in a batch.\n\n**Example usage:**\n\n"
					},
					{
						"kind": "code",
						"text": "```javascript\n// Open the default request queue associated with the crawler run\nconst queue = await RequestQueue.open();\n\n// Open a named request queue\nconst queueWithName = await RequestQueue.open('some-name');\n\n// Enqueue few requests\nawait queue.addRequest({ url: 'http://example.com/aaa' });\nawait queue.addRequest({ url: 'http://example.com/bbb' });\nawait queue.addRequest({ url: 'http://example.com/foo/bar' }, { forefront: true });\n```"
					}
				]
			},
			"children": [
				{
					"id": 135,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue_v2.d.ts",
							"line": 45,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 136,
							"name": "new RequestQueue",
							"variant": "signature",
							"kind": 16384,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/request_queue_v2.d.ts",
									"line": 45,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 137,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
											"qualifiedName": "RequestProviderOptions"
										},
										"name": "RequestProviderOptions",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 138,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
											"qualifiedName": "Configuration"
										},
										"name": "Configuration",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 131,
								"name": "RequestQueue",
								"package": "@crawlee/core"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "RequestProvider.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.constructor"
					}
				},
				{
					"id": 189,
					"name": "assumedHandledCount",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 21,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.assumedHandledCount"
					}
				},
				{
					"id": 188,
					"name": "assumedTotalCount",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 20,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.assumedTotalCount"
					}
				},
				{
					"id": 183,
					"name": "client",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 15,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/storages.ts",
							"qualifiedName": "RequestQueueClient"
						},
						"name": "RequestQueueClient",
						"package": "@crawlee/types"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.client"
					}
				},
				{
					"id": 182,
					"name": "clientKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 14,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.clientKey"
					}
				},
				{
					"id": 178,
					"name": "config",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isReadonly": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 10,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
							"qualifiedName": "Configuration"
						},
						"name": "Configuration",
						"package": "@crawlee/core"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.config"
					}
				},
				{
					"id": 179,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 11,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.id"
					}
				},
				{
					"id": 186,
					"name": "internalTimeoutMillis",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 18,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.internalTimeoutMillis"
					}
				},
				{
					"id": 185,
					"name": "log",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 17,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": 252,
						"name": "Log",
						"package": "@apify/log"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.log"
					}
				},
				{
					"id": 180,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 12,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.name"
					}
				},
				{
					"id": 187,
					"name": "requestLockSecs",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 19,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.requestLockSecs"
					}
				},
				{
					"id": 181,
					"name": "timeoutSecs",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 13,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.timeoutSecs"
					}
				},
				{
					"id": 147,
					"name": "addRequest",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue_v2.d.ts",
							"line": 53,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 148,
							"name": "addRequest",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@inheritDoc",
										"content": []
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/request_queue_v2.d.ts",
									"line": 53,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 149,
									"name": "requestLike",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/request.ts",
											"qualifiedName": "Source"
										},
										"name": "Source",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 150,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 227,
										"name": "RequestQueueOperationOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
											"qualifiedName": "RequestQueueOperationInfo"
										},
										"name": "RequestQueueOperationInfo",
										"package": "@crawlee/core"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "RequestProvider.addRequest"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.addRequest"
					}
				},
				{
					"id": 151,
					"name": "addRequests",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue_v2.d.ts",
							"line": 57,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 152,
							"name": "addRequests",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@inheritDoc",
										"content": []
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/request_queue_v2.d.ts",
									"line": 57,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 153,
									"name": "requestsLike",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "../node_modules/@crawlee/src/request.ts",
												"qualifiedName": "Source"
											},
											"name": "Source",
											"package": "@crawlee/core"
										}
									}
								},
								{
									"id": 154,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": 227,
										"name": "RequestQueueOperationOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/storages.ts",
											"qualifiedName": "BatchAddRequestsResult"
										},
										"name": "BatchAddRequestsResult",
										"package": "@crawlee/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "RequestProvider.addRequests"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.addRequests"
					}
				},
				{
					"id": 199,
					"name": "addRequestsBatched",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 76,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 200,
							"name": "addRequestsBatched",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds requests to the queue in batches. By default, it will resolve after the initial batch is added, and continue\nadding the rest in the background. You can configure the batch size via "
									},
									{
										"kind": "code",
										"text": "`batchSize`"
									},
									{
										"kind": "text",
										"text": " option and the sleep time in between\nthe batches via "
									},
									{
										"kind": "code",
										"text": "`waitBetweenBatchesMillis`"
									},
									{
										"kind": "text",
										"text": ". If you want to wait for all batches to be added to the queue, you can use\nthe "
									},
									{
										"kind": "code",
										"text": "`waitForAllRequestsToBeAdded`"
									},
									{
										"kind": "text",
										"text": " promise you get in the response object."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
									"line": 76,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 201,
									"name": "requests",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The requests to add"
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"target": {
														"sourceFileName": "../node_modules/@crawlee/src/request.ts",
														"qualifiedName": "Source"
													},
													"name": "Source",
													"package": "@crawlee/core"
												}
											]
										}
									}
								},
								{
									"id": 202,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Options for the request queue"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
											"qualifiedName": "AddRequestsBatchedOptions"
										},
										"name": "AddRequestsBatchedOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
											"qualifiedName": "AddRequestsBatchedResult"
										},
										"name": "AddRequestsBatchedResult",
										"package": "@crawlee/core"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "RequestProvider.addRequestsBatched"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.addRequestsBatched"
					}
				},
				{
					"id": 209,
					"name": "drop",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 144,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 210,
							"name": "drop",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the queue either from the Apify Cloud storage or from the local database,\ndepending on the mode of operation."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
									"line": 144,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "RequestProvider.drop"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.drop"
					}
				},
				{
					"id": 155,
					"name": "fetchNextRequest",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue_v2.d.ts",
							"line": 61,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 156,
							"name": "fetchNextRequest",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@inheritDoc",
										"content": []
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/request_queue_v2.d.ts",
									"line": 61,
									"character": 4
								}
							],
							"typeParameters": [
								{
									"id": 157,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@crawlee/src/request.ts",
													"qualifiedName": "Request"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 157,
														"name": "T",
														"package": "@crawlee/core",
														"refersToTypeParameter": true
													}
												],
												"name": "Request",
												"package": "@crawlee/core"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "RequestProvider.fetchNextRequest"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.fetchNextRequest"
					}
				},
				{
					"id": 213,
					"name": "getInfo",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 179,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 214,
							"name": "getInfo",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an object containing general information about the request queue.\n\nThe function returns the same object as the Apify API Client's\n[getQueue](https://docs.apify.com/api/apify-client-js/latest#ApifyClient-requestQueues)\nfunction, which in turn calls the\n[Get request queue](https://apify.com/docs/api/v2#/reference/request-queues/queue/get-request-queue)\nAPI endpoint.\n\n**Example:**\n"
									},
									{
										"kind": "code",
										"text": "```\n{\n  id: \"WkzbQMuFYuamGv3YF\",\n  name: \"my-queue\",\n  userId: \"wRsJZtadYvn4mBZmm\",\n  createdAt: new Date(\"2015-12-12T07:34:14.202Z\"),\n  modifiedAt: new Date(\"2015-12-13T08:36:13.202Z\"),\n  accessedAt: new Date(\"2015-12-14T08:36:13.202Z\"),\n  totalRequestCount: 25,\n  handledRequestCount: 5,\n  pendingRequestCount: 20,\n}\n```"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
									"line": 179,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@crawlee/src/storages.ts",
													"qualifiedName": "RequestQueueInfo"
												},
												"name": "RequestQueueInfo",
												"package": "@crawlee/types"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "RequestProvider.getInfo"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.getInfo"
					}
				},
				{
					"id": 203,
					"name": "getRequest",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 83,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 204,
							"name": "getRequest",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets the request from the queue specified by ID."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Returns the request object, or "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": " if it was not found."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
									"line": 83,
									"character": 4
								}
							],
							"typeParameters": [
								{
									"id": 205,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
											"qualifiedName": "Dictionary"
										},
										"name": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"parameters": [
								{
									"id": 206,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "ID of the request."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@crawlee/src/request.ts",
													"qualifiedName": "Request"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 205,
														"name": "T",
														"package": "@crawlee/core",
														"refersToTypeParameter": true
													}
												],
												"name": "Request",
												"package": "@crawlee/core"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "RequestProvider.getRequest"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.getRequest"
					}
				},
				{
					"id": 197,
					"name": "getTotalCount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 36,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 198,
							"name": "getTotalCount",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an offline approximation of the total number of requests in the queue (i.e. pending + handled).\n\nSurvives restarts and actor migrations."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
									"line": 36,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "RequestProvider.getTotalCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.getTotalCount"
					}
				},
				{
					"id": 211,
					"name": "handledCount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 154,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 212,
							"name": "handledCount",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the number of handled requests.\n\nThis function is just a convenient shortcut for:\n\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst { handledRequestCount } = await queue.getInfo();\n```"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
									"line": 154,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "RequestProvider.handledCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.handledCount"
					}
				},
				{
					"id": 207,
					"name": "isEmpty",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 123,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 208,
							"name": "isEmpty",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Resolves to "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if the next call to "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "RequestQueue.fetchNextRequest"
									},
									{
										"kind": "text",
										"text": "\nwould return "
									},
									{
										"kind": "code",
										"text": "`null`"
									},
									{
										"kind": "text",
										"text": ", otherwise it resolves to "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": ".\nNote that even if the queue is empty, there might be some pending requests currently being processed.\nIf you need to ensure that there is no activity in the queue, use "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "RequestQueue.isFinished"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
									"line": 123,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "RequestProvider.isEmpty"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.isEmpty"
					}
				},
				{
					"id": 161,
					"name": "isFinished",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue_v2.d.ts",
							"line": 69,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 162,
							"name": "isFinished",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@inheritDoc",
										"content": []
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/request_queue_v2.d.ts",
									"line": 69,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "RequestProvider.isFinished"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.isFinished"
					}
				},
				{
					"id": 158,
					"name": "markRequestHandled",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue_v2.d.ts",
							"line": 65,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 159,
							"name": "markRequestHandled",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@inheritDoc",
										"content": []
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/request_queue_v2.d.ts",
									"line": 65,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 160,
									"name": "request",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../node_modules/@crawlee/src/request.ts",
											"qualifiedName": "Request"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
													"qualifiedName": "Dictionary"
												},
												"name": "Dictionary",
												"package": "@crawlee/types"
											}
										],
										"name": "Request",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
													"qualifiedName": "RequestQueueOperationInfo"
												},
												"name": "RequestQueueOperationInfo",
												"package": "@crawlee/core"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "RequestProvider.markRequestHandled"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.markRequestHandled"
					}
				},
				{
					"id": 163,
					"name": "reclaimRequest",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue_v2.d.ts",
							"line": 73,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 164,
							"name": "reclaimRequest",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@inheritDoc",
										"content": []
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/request_queue_v2.d.ts",
									"line": 73,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 165,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "namedTupleMember",
												"name": "request",
												"isOptional": false,
												"element": {
													"type": "reference",
													"target": {
														"sourceFileName": "../node_modules/@crawlee/src/request.ts",
														"qualifiedName": "Request"
													},
													"typeArguments": [
														{
															"type": "reference",
															"target": {
																"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
																"qualifiedName": "Dictionary"
															},
															"name": "Dictionary",
															"package": "@crawlee/types"
														}
													],
													"name": "Request",
													"package": "@crawlee/core"
												}
											},
											{
												"type": "namedTupleMember",
												"name": "options",
												"isOptional": true,
												"element": {
													"type": "reference",
													"target": 227,
													"name": "RequestQueueOperationOptions",
													"package": "@crawlee/core"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
													"qualifiedName": "RequestQueueOperationInfo"
												},
												"name": "RequestQueueOperationInfo",
												"package": "@crawlee/core"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "RequestProvider.reclaimRequest"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.reclaimRequest"
					}
				},
				{
					"id": 132,
					"name": "open",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue_v2.d.ts",
							"line": 85,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 133,
							"name": "open",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@inheritDoc",
										"content": []
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@crawlee/core/storages/request_queue_v2.d.ts",
									"line": 85,
									"character": 11
								}
							],
							"parameters": [
								{
									"id": 134,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "namedTupleMember",
												"name": "queueIdOrName",
												"isOptional": true,
												"element": {
													"type": "union",
													"types": [
														{
															"type": "literal",
															"value": null
														},
														{
															"type": "intrinsic",
															"name": "string"
														}
													]
												}
											},
											{
												"type": "namedTupleMember",
												"name": "options",
												"isOptional": true,
												"element": {
													"type": "reference",
													"target": {
														"sourceFileName": "../node_modules/@crawlee/src/storages/storage_manager.ts",
														"qualifiedName": "StorageManagerOptions"
													},
													"name": "StorageManagerOptions",
													"package": "@crawlee/core"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 131,
										"name": "RequestQueue",
										"package": "@crawlee/core"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "RequestProvider.open"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "RequestProvider.open"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						135
					]
				},
				{
					"title": "Properties",
					"children": [
						189,
						188,
						183,
						182,
						178,
						179,
						186,
						185,
						180,
						187,
						181
					]
				},
				{
					"title": "Methods",
					"children": [
						147,
						151,
						199,
						209,
						155,
						213,
						203,
						197,
						211,
						207,
						161,
						158,
						163,
						132
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/request_queue_v2.d.ts",
					"line": 40,
					"character": 21
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
						"qualifiedName": "RequestProvider"
					},
					"name": "RequestProvider",
					"package": "@crawlee/core"
				}
			]
		},
		{
			"id": 1247,
			"name": "AbortOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 1250,
					"name": "gracefully",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/run.d.ts",
							"line": 89,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RunAbortOptions.gracefully"
					}
				},
				{
					"id": 1249,
					"name": "statusMessage",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Exit with given status message"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1912,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1912"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1248,
					"name": "token",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "User API token that is used to run the Actor. By default, it is taken from the "
							},
							{
								"kind": "code",
								"text": "`APIFY_TOKEN`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1909,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1909"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1250,
						1249,
						1248
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1905,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1905"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../node_modules/apify-client/src/resource_clients/run.ts",
						"qualifiedName": "RunAbortOptions"
					},
					"name": "RunAbortOptions",
					"package": "apify-client"
				}
			]
		},
		{
			"id": 1349,
			"name": "ActorPricingInfo",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 1352,
					"name": "isPayPerEvent",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/charging.ts",
							"line": 306,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L306"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1351,
					"name": "maxTotalChargeUsd",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/charging.ts",
							"line": 305,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L305"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1353,
					"name": "perEventPrices",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/charging.ts",
							"line": 307,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L307"
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 1350,
					"name": "pricingModel",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/charging.ts",
							"line": 304,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L304"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "PAY_PER_EVENT"
							},
							{
								"type": "literal",
								"value": "PRICE_PER_DATASET_ITEM"
							},
							{
								"type": "literal",
								"value": "FLAT_PRICE_PER_MONTH"
							},
							{
								"type": "literal",
								"value": "FREE"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1352,
						1351,
						1353,
						1350
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/charging.ts",
					"line": 303,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L303"
				}
			]
		},
		{
			"id": 1269,
			"name": "ActorRun",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1283,
					"name": "actId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 180,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "ActorRunListItem.actId"
					}
				},
				{
					"id": 1284,
					"name": "actorTaskId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 181,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "ActorRunListItem.actorTaskId"
					}
				},
				{
					"id": 1289,
					"name": "buildId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 186,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "ActorRunListItem.buildId"
					}
				},
				{
					"id": 1290,
					"name": "buildNumber",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 187,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "ActorRunListItem.buildNumber"
					}
				},
				{
					"id": 1275,
					"name": "containerUrl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 199,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1292,
					"name": "defaultDatasetId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 189,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "ActorRunListItem.defaultDatasetId"
					}
				},
				{
					"id": 1291,
					"name": "defaultKeyValueStoreId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 188,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "ActorRunListItem.defaultKeyValueStoreId"
					}
				},
				{
					"id": 1293,
					"name": "defaultRequestQueueId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 190,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "ActorRunListItem.defaultRequestQueueId"
					}
				},
				{
					"id": 1274,
					"name": "exitCode",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 198,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1286,
					"name": "finishedAt",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 183,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Date"
						},
						"name": "Date",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "ActorRunListItem.finishedAt"
					}
				},
				{
					"id": 1277,
					"name": "gitBranchName",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 201,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1281,
					"name": "chargedEventCounts",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 205,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 1282,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 179,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "ActorRunListItem.id"
					}
				},
				{
					"id": 1276,
					"name": "isContainerServerReady",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 200,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1288,
					"name": "meta",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 185,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
							"qualifiedName": "ActorRunMeta"
						},
						"name": "ActorRunMeta",
						"package": "apify-client"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "ActorRunListItem.meta"
					}
				},
				{
					"id": 1273,
					"name": "options",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 197,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
							"qualifiedName": "ActorRunOptions"
						},
						"name": "ActorRunOptions",
						"package": "apify-client"
					}
				},
				{
					"id": 1280,
					"name": "pricingInfo",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 204,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
							"qualifiedName": "ActorRunPricingInfo"
						},
						"name": "ActorRunPricingInfo",
						"package": "apify-client"
					}
				},
				{
					"id": 1285,
					"name": "startedAt",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 182,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Date"
						},
						"name": "Date",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "ActorRunListItem.startedAt"
					}
				},
				{
					"id": 1272,
					"name": "stats",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 196,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
							"qualifiedName": "ActorRunStats"
						},
						"name": "ActorRunStats",
						"package": "apify-client"
					}
				},
				{
					"id": 1287,
					"name": "status",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 184,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "READY"
							},
							{
								"type": "literal",
								"value": "RUNNING"
							},
							{
								"type": "literal",
								"value": "SUCCEEDED"
							},
							{
								"type": "literal",
								"value": "FAILED"
							},
							{
								"type": "literal",
								"value": "ABORTING"
							},
							{
								"type": "literal",
								"value": "ABORTED"
							},
							{
								"type": "literal",
								"value": "TIMING-OUT"
							},
							{
								"type": "literal",
								"value": "TIMED-OUT"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "ActorRunListItem.status"
					}
				},
				{
					"id": 1271,
					"name": "statusMessage",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 195,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1278,
					"name": "usage",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 202,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
							"qualifiedName": "ActorRunUsage"
						},
						"name": "ActorRunUsage",
						"package": "apify-client"
					}
				},
				{
					"id": 1294,
					"name": "usageTotalUsd",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 191,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "ActorRunListItem.usageTotalUsd"
					}
				},
				{
					"id": 1279,
					"name": "usageUsd",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 203,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
							"qualifiedName": "ActorRunUsage"
						},
						"name": "ActorRunUsage",
						"package": "apify-client"
					}
				},
				{
					"id": 1270,
					"name": "userId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 194,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1283,
						1284,
						1289,
						1290,
						1275,
						1292,
						1291,
						1293,
						1274,
						1286,
						1277,
						1281,
						1282,
						1276,
						1288,
						1273,
						1280,
						1285,
						1272,
						1287,
						1271,
						1278,
						1294,
						1279,
						1270
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
					"line": 193,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
						"qualifiedName": "ActorRunListItem"
					},
					"name": "ActorRunListItem",
					"package": "apify-client"
				}
			]
		},
		{
			"id": 891,
			"name": "ApifyClientOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 892,
					"name": "baseUrl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nhttps://api.apify.com\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 138,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 893,
					"name": "maxRetries",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n8\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 140,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 894,
					"name": "minDelayBetweenRetriesMillis",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n500\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 142,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 895,
					"name": "requestInterceptors",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n[]\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 144,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "undefined"
								},
								{
									"type": "literal",
									"value": null
								},
								{
									"type": "reflection",
									"declaration": {
										"id": 896,
										"name": "__type",
										"variant": "declaration",
										"kind": 65536,
										"flags": {
											"isExternal": true
										},
										"sources": [
											{
												"fileName": "node_modules/axios/index.d.ts",
												"line": 480,
												"character": 21
											}
										],
										"signatures": [
											{
												"id": 897,
												"name": "__type",
												"variant": "signature",
												"kind": 4096,
												"flags": {
													"isExternal": true
												},
												"sources": [
													{
														"fileName": "node_modules/axios/index.d.ts",
														"line": 480,
														"character": 21
													}
												],
												"parameters": [
													{
														"id": 898,
														"name": "value",
														"variant": "param",
														"kind": 32768,
														"flags": {
															"isExternal": true
														},
														"type": {
															"type": "reference",
															"target": {
																"sourceFileName": "../node_modules/apify-client/src/http_client.ts",
																"qualifiedName": "ApifyRequestConfig"
															},
															"name": "ApifyRequestConfig",
															"package": "apify-client"
														}
													}
												],
												"type": {
													"type": "union",
													"types": [
														{
															"type": "reference",
															"target": {
																"sourceFileName": "../node_modules/apify-client/src/http_client.ts",
																"qualifiedName": "ApifyRequestConfig"
															},
															"name": "ApifyRequestConfig",
															"package": "apify-client"
														},
														{
															"type": "reference",
															"target": {
																"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
																"qualifiedName": "Promise"
															},
															"typeArguments": [
																{
																	"type": "reference",
																	"target": {
																		"sourceFileName": "../node_modules/apify-client/src/http_client.ts",
																		"qualifiedName": "ApifyRequestConfig"
																	},
																	"name": "ApifyRequestConfig",
																	"package": "apify-client"
																}
															],
															"name": "Promise",
															"package": "typescript"
														}
													]
												}
											}
										]
									}
								}
							]
						}
					}
				},
				{
					"id": 899,
					"name": "timeoutSecs",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n360\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 146,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 900,
					"name": "token",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 147,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 901,
					"name": "userAgentSuffix",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 148,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						892,
						893,
						894,
						895,
						899,
						900,
						901
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
					"line": 136,
					"character": 17
				}
			]
		},
		{
			"id": 1186,
			"name": "ApifyEnv",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Parsed representation of the Apify environment variables.\nThis object is returned by the "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "Actor.getEnv"
					},
					{
						"kind": "text",
						"text": " function."
					}
				]
			},
			"children": [
				{
					"id": 1190,
					"name": "actorBuildId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "ID of the Actor build used in the run. (ACTOR_BUILD_ID)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1779,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1779"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1220,
					"name": "actorBuildNumber",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1881,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1881"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1221,
					"name": "actorEventsWsUrl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1882,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1882"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1187,
					"name": "actorId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "ID of the Actor (ACTOR_ID)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1764,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1764"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1222,
					"name": "actorMaxPaidDatasetItems",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1883,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1883"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 1188,
					"name": "actorRunId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "ID of the Actor run (ACTOR_RUN_ID)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1769,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1769"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1189,
					"name": "actorTaskId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "ID of the Actor task (ACTOR_TASK_ID)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1774,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1774"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1204,
					"name": "apiBaseUrl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1844,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1844"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1205,
					"name": "apiPublicBaseUrl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1845,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1845"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1223,
					"name": "containerPort",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1884,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1884"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 1224,
					"name": "containerUrl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1885,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1885"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1207,
					"name": "dedicatedCpus",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1847,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1847"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1196,
					"name": "defaultDatasetId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "ID of the dataset where input and output data of this\nActor is stored (ACTOR_DEFAULT_DATASET_ID)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1813,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1813"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1195,
					"name": "defaultKeyValueStoreId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "ID of the key-value store where input and output data of this\nActor is stored (ACTOR_DEFAULT_KEY_VALUE_STORE_ID)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1807,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1807"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1225,
					"name": "defaultRequestQueueId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1886,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1886"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1208,
					"name": "disableOutdatedWarning",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1848,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1848"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "literal",
								"value": 1
							}
						]
					}
				},
				{
					"id": 1209,
					"name": "fact",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1849,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1849"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1198,
					"name": "headless",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If set to \"1\", the web browsers inside the Actor should run in headless\nmode because there is no windowing system available. (APIFY_HEADLESS)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1825,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1825"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1206,
					"name": "chromeExecutablePath",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1846,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1846"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1216,
					"name": "inputKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The key of the input record in the Actor’s default key-value store (ACTOR_INPUT_KEY)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1877,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1877"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1210,
					"name": "inputSecretsPrivateKeyFile",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1850,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1850"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1211,
					"name": "inputSecretsPrivateKeyPassphrase",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1851,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1851"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1199,
					"name": "isAtHome",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Is set to \"1\" if the Actor is running on Apify servers.\n(APIFY_IS_AT_HOME)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1831,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1831"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1212,
					"name": "localStorageDir",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines the path to a local directory where KeyValueStore, Dataset, and RequestQueue\nstore their data. Typically, it is set to ./storage. If omitted, you should define the\nAPIFY_TOKEN environment variable instead. See more info on combination of this and\nAPIFY_TOKEN [here](https://docs.apify.com/sdk/js/docs/guides/environment-variables#combinations-of-apify_local_storage_dir-and-apify_token)(CRAWLEE_STORAGE_DIR)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1859,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1859"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1214,
					"name": "logFormat",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1866,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1866"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1213,
					"name": "logLevel",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Specifies the minimum log level, which can be one of the following values (in order of severity): DEBUG, INFO, WARNING and ERROR\n(APIFY_LOG_LEVEL)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1865,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1865"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1197,
					"name": "memoryMbytes",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Amount of memory allocated for the Actor,\nin megabytes (ACTOR_MEMORY_MBYTES)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1819,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1819"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 1215,
					"name": "metaOrigin",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Origin for the Actor run, i.e. how it was started. See [here](https://docs.apify.com/sdk/python/reference/enum/MetaOrigin)\nfor more details. (APIFY_META_ORIGIN)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1872,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1872"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1201,
					"name": "proxyHostname",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1837,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1837"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1200,
					"name": "proxyPassword",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The Apify Proxy password of the user who started the Actor. (APIFY_PROXY_PASSWORD)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1836,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1836"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1202,
					"name": "proxyPort",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1838,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1838"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1203,
					"name": "proxyStatusUrl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "You can visit this page to troubleshoot your proxy connection. (APIFY_PROXY_STATUS_URL)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1843,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1843"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1217,
					"name": "sdkLatestVersion",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1878,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1878"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1193,
					"name": "startedAt",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Date when the Actor was started (ACTOR_STARTED_AT)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1796,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1796"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Date"
								},
								"name": "Date",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 1218,
					"name": "systemInfoIntervalMillis",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1879,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1879"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1194,
					"name": "timeoutAt",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Date when the Actor will time out (ACTOR_TIMEOUT_AT)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1801,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1801"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Date"
								},
								"name": "Date",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 1192,
					"name": "token",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Authentication token representing privileges given to the Actor run,\nit can be passed to various Apify APIs (APIFY_TOKEN)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1791,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1791"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1191,
					"name": "userId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "ID of the user who started the Actor - note that it might be\ndifferent than the owner of the Actor (APIFY_USER_ID)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1785,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1785"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1219,
					"name": "workflowKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1880,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1880"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1190,
						1220,
						1221,
						1187,
						1222,
						1188,
						1189,
						1204,
						1205,
						1223,
						1224,
						1207,
						1196,
						1195,
						1225,
						1208,
						1209,
						1198,
						1206,
						1216,
						1210,
						1211,
						1199,
						1212,
						1214,
						1213,
						1197,
						1215,
						1201,
						1200,
						1202,
						1203,
						1217,
						1193,
						1218,
						1194,
						1192,
						1191,
						1219
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1757,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1757"
				}
			]
		},
		{
			"id": 1230,
			"name": "CallOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 1233,
					"name": "build",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Tag or number of the actor build to run (e.g. "
							},
							{
								"kind": "code",
								"text": "`beta`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`1.2.345`"
							},
							{
								"kind": "text",
								"text": ").\nIf not provided, the run uses build tag or number from the default actor run configuration (typically "
							},
							{
								"kind": "code",
								"text": "`latest`"
							},
							{
								"kind": "text",
								"text": ")."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 137,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "ActorCallOptions.build"
					}
				},
				{
					"id": 1234,
					"name": "contentType",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Content type for the "
							},
							{
								"kind": "code",
								"text": "`input`"
							},
							{
								"kind": "text",
								"text": ". If not specified,\n"
							},
							{
								"kind": "code",
								"text": "`input`"
							},
							{
								"kind": "text",
								"text": " is expected to be an object that will be stringified to JSON and content type set to\n"
							},
							{
								"kind": "code",
								"text": "`application/json; charset=utf-8`"
							},
							{
								"kind": "text",
								"text": ". If "
							},
							{
								"kind": "code",
								"text": "`options.contentType`"
							},
							{
								"kind": "text",
								"text": " is specified, then "
							},
							{
								"kind": "code",
								"text": "`input`"
							},
							{
								"kind": "text",
								"text": " must be a\n"
							},
							{
								"kind": "code",
								"text": "`String`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`Buffer`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 144,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "ActorCallOptions.contentType"
					}
				},
				{
					"id": 1238,
					"name": "maxItems",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Specifies maximum number of items that the actor run should return.\nThis is used by pay per result actors to limit the maximum number of results that will be charged to customer.\nValue can be accessed in actor run using "
							},
							{
								"kind": "code",
								"text": "`ACTOR_MAX_PAID_DATASET_ITEMS`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 173,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "ActorCallOptions.maxItems"
					}
				},
				{
					"id": 1235,
					"name": "memory",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Memory in megabytes which will be allocated for the new actor run.\nIf not provided, the run uses memory of the default actor run configuration."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 149,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "ActorCallOptions.memory"
					}
				},
				{
					"id": 1236,
					"name": "timeout",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Timeout for the actor run in seconds. Zero value means there is no timeout.\nIf not provided, the run uses timeout of the default actor run configuration."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 154,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "ActorCallOptions.timeout"
					}
				},
				{
					"id": 1231,
					"name": "token",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "User API token that is used to run the Actor. By default, it is taken from the "
							},
							{
								"kind": "code",
								"text": "`APIFY_TOKEN`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1895,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1895"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1232,
					"name": "waitSecs",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 176,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "ActorCallOptions.waitSecs"
					}
				},
				{
					"id": 1237,
					"name": "webhooks",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Specifies optional webhooks associated with the actor run, which can be used\nto receive a notification e.g. when the actor finished or failed, see\n[ad hook webhooks documentation](https://docs.apify.com/webhooks/ad-hoc-webhooks) for detailed description."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 167,
							"character": 4
						}
					],
					"type": {
						"type": "typeOperator",
						"operator": "readonly",
						"target": {
							"type": "array",
							"elementType": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/webhook.ts",
									"qualifiedName": "WebhookUpdateData"
								},
								"name": "WebhookUpdateData",
								"package": "apify-client"
							}
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "ActorCallOptions.webhooks"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1233,
						1234,
						1238,
						1235,
						1236,
						1231,
						1232,
						1237
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1891,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1891"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
						"qualifiedName": "ActorCallOptions"
					},
					"name": "ActorCallOptions",
					"package": "apify-client"
				}
			]
		},
		{
			"id": 1239,
			"name": "CallTaskOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 1242,
					"name": "build",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Tag or number of the actor build to run (e.g. "
							},
							{
								"kind": "code",
								"text": "`beta`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`1.2.345`"
							},
							{
								"kind": "text",
								"text": ").\nIf not provided, the run uses build tag or number from the default actor run configuration (typically "
							},
							{
								"kind": "code",
								"text": "`latest`"
							},
							{
								"kind": "text",
								"text": ")."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 137,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TaskCallOptions.build"
					}
				},
				{
					"id": 1246,
					"name": "maxItems",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Specifies maximum number of items that the actor run should return.\nThis is used by pay per result actors to limit the maximum number of results that will be charged to customer.\nValue can be accessed in actor run using "
							},
							{
								"kind": "code",
								"text": "`ACTOR_MAX_PAID_DATASET_ITEMS`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 173,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TaskCallOptions.maxItems"
					}
				},
				{
					"id": 1243,
					"name": "memory",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Memory in megabytes which will be allocated for the new actor run.\nIf not provided, the run uses memory of the default actor run configuration."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 149,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TaskCallOptions.memory"
					}
				},
				{
					"id": 1244,
					"name": "timeout",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Timeout for the actor run in seconds. Zero value means there is no timeout.\nIf not provided, the run uses timeout of the default actor run configuration."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 154,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TaskCallOptions.timeout"
					}
				},
				{
					"id": 1240,
					"name": "token",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "User API token that is used to run the Actor. By default, it is taken from the "
							},
							{
								"kind": "code",
								"text": "`APIFY_TOKEN`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1902,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1902"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1241,
					"name": "waitSecs",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/task.d.ts",
							"line": 87,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TaskCallOptions.waitSecs"
					}
				},
				{
					"id": 1245,
					"name": "webhooks",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Specifies optional webhooks associated with the actor run, which can be used\nto receive a notification e.g. when the actor finished or failed, see\n[ad hook webhooks documentation](https://docs.apify.com/webhooks/ad-hoc-webhooks) for detailed description."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 167,
							"character": 4
						}
					],
					"type": {
						"type": "typeOperator",
						"operator": "readonly",
						"target": {
							"type": "array",
							"elementType": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/webhook.ts",
									"qualifiedName": "WebhookUpdateData"
								},
								"name": "WebhookUpdateData",
								"package": "apify-client"
							}
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "TaskCallOptions.webhooks"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1242,
						1246,
						1243,
						1244,
						1240,
						1241,
						1245
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1898,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1898"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../node_modules/apify-client/src/resource_clients/task.ts",
						"qualifiedName": "TaskCallOptions"
					},
					"name": "TaskCallOptions",
					"package": "apify-client"
				}
			]
		},
		{
			"id": 1354,
			"name": "ConfigurationOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 1356,
					"name": "actorEventsWsUrl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 13,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L13"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1358,
					"name": "actorId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 15,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L15"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1359,
					"name": "actorRunId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 16,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L16"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1360,
					"name": "actorTaskId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 17,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L17"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1361,
					"name": "apiBaseUrl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 18,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L18"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1362,
					"name": "apiPublicBaseUrl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 21,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L21"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1387,
					"name": "availableMemoryRatio",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Sets the ratio, defining the amount of system memory that could be used by the "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "AutoscaledPool"
							},
							{
								"kind": "text",
								"text": ".\nWhen the memory usage is more than the provided ratio, the memory is considered overloaded.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_AVAILABLE_MEMORY_RATIO`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n0.25\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 66,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfigurationOptions.availableMemoryRatio"
					}
				},
				{
					"id": 1421,
					"name": "containerized",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Used in place of "
							},
							{
								"kind": "code",
								"text": "`isContainerized()`"
							},
							{
								"kind": "text",
								"text": " when collecting system metrics.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_CONTAINERIZED`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 150,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfigurationOptions.containerized"
					}
				},
				{
					"id": 1363,
					"name": "containerPort",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 22,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L22"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1364,
					"name": "containerUrl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 23,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L23"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1395,
					"name": "defaultBrowserPath",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines a path to default browser executable.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_DEFAULT_BROWSER_PATH`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 119,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfigurationOptions.defaultBrowserPath"
					}
				},
				{
					"id": 1382,
					"name": "defaultDatasetId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Default dataset id.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_DEFAULT_DATASET_ID`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n'default'\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 31,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfigurationOptions.defaultDatasetId"
					}
				},
				{
					"id": 1384,
					"name": "defaultKeyValueStoreId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Default key-value store id.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_DEFAULT_KEY_VALUE_STORE_ID`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n'default'\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 45,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfigurationOptions.defaultKeyValueStoreId"
					}
				},
				{
					"id": 1385,
					"name": "defaultRequestQueueId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Default request queue id.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_DEFAULT_REQUEST_QUEUE_ID`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n'default'\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 52,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfigurationOptions.defaultRequestQueueId"
					}
				},
				{
					"id": 1396,
					"name": "disableBrowserSandbox",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines whether to disable browser sandbox by adding "
							},
							{
								"kind": "code",
								"text": "`--no-sandbox`"
							},
							{
								"kind": "text",
								"text": " flag to "
							},
							{
								"kind": "code",
								"text": "`launchOptions`"
							},
							{
								"kind": "text",
								"text": ".\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_DISABLE_BROWSER_SANDBOX`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 125,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfigurationOptions.disableBrowserSandbox"
					}
				},
				{
					"id": 1380,
					"name": "eventManager",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines the Event Manager to be used."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "EventManager"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 19,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
							"qualifiedName": "EventManager"
						},
						"name": "EventManager",
						"package": "@crawlee/core"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfigurationOptions.eventManager"
					}
				},
				{
					"id": 1392,
					"name": "headless",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines whether web browsers launched by Crawlee will run in the headless mode.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_HEADLESS`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\ntrue\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 100,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfigurationOptions.headless"
					}
				},
				{
					"id": 1394,
					"name": "chromeExecutablePath",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines a path to Chrome executable.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_CHROME_EXECUTABLE_PATH`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 113,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfigurationOptions.chromeExecutablePath"
					}
				},
				{
					"id": 1391,
					"name": "inputKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines the default input key, i.e. the key that is used to get the crawler input value\nfrom the default "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "KeyValueStore"
							},
							{
								"kind": "text",
								"text": " associated with the current crawler run.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_INPUT_KEY`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n'INPUT'\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 93,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfigurationOptions.inputKey"
					}
				},
				{
					"id": 1374,
					"name": "inputSecretsPrivateKeyFile",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 36,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L36"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1373,
					"name": "inputSecretsPrivateKeyPassphrase",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 35,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L35"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1371,
					"name": "isAtHome",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 33,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L33"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1397,
					"name": "logLevel",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Sets the log level to the given value.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_LOG_LEVEL`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n'INFO'\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 132,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": 322,
								"name": "LogLevel",
								"package": "@apify/log"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1398,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 564,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 1399,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Returns a string representation of an object."
													}
												]
											},
											"sources": [
												{
													"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 564,
													"character": 4
												}
											],
											"parameters": [
												{
													"id": 1400,
													"name": "radix",
													"variant": "param",
													"kind": 32768,
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
															}
														]
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1401,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 570,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 1402,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Returns a string representing a number in fixed-point notation."
													}
												]
											},
											"sources": [
												{
													"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 570,
													"character": 4
												}
											],
											"parameters": [
												{
													"id": 1403,
													"name": "fractionDigits",
													"variant": "param",
													"kind": 32768,
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
															}
														]
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1404,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 576,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 1405,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Returns a string containing a number represented in exponential notation."
													}
												]
											},
											"sources": [
												{
													"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 576,
													"character": 4
												}
											],
											"parameters": [
												{
													"id": 1406,
													"name": "fractionDigits",
													"variant": "param",
													"kind": 32768,
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
															}
														]
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1407,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 582,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 1408,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits."
													}
												]
											},
											"sources": [
												{
													"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 582,
													"character": 4
												}
											],
											"parameters": [
												{
													"id": 1409,
													"name": "precision",
													"variant": "param",
													"kind": 32768,
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Number of significant digits. Must be in the range 1 - 21, inclusive."
															}
														]
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1410,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 585,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 1411,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Returns the primitive value of the specified object."
													}
												]
											},
											"sources": [
												{
													"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 585,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								}
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1412,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 4540,
											"character": 4
										},
										{
											"fileName": "website/node_modules/typescript/lib/lib.es2020.number.d.ts",
											"line": 27,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 1413,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Converts a number to a string by using the current or specified locale."
													}
												]
											},
											"sources": [
												{
													"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 4540,
													"character": 4
												}
											],
											"parameters": [
												{
													"id": 1414,
													"name": "locales",
													"variant": "param",
													"kind": 32768,
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
															}
														]
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														]
													}
												},
												{
													"id": 1415,
													"name": "options",
													"variant": "param",
													"kind": 32768,
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "An object that contains one or more properties that specify comparison options."
															}
														]
													},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Intl.NumberFormatOptions"
														},
														"name": "NumberFormatOptions",
														"package": "typescript",
														"qualifiedName": "Intl.NumberFormatOptions"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1416,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Converts a number to a string by using the current or specified locale."
													}
												]
											},
											"sources": [
												{
													"fileName": "website/node_modules/typescript/lib/lib.es2020.number.d.ts",
													"line": 27,
													"character": 4
												}
											],
											"parameters": [
												{
													"id": 1417,
													"name": "locales",
													"variant": "param",
													"kind": 32768,
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
															}
														]
													},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/typescript/lib/lib.es2020.intl.d.ts",
															"qualifiedName": "Intl.LocalesArgument"
														},
														"name": "LocalesArgument",
														"package": "typescript",
														"qualifiedName": "Intl.LocalesArgument"
													}
												},
												{
													"id": 1418,
													"name": "options",
													"variant": "param",
													"kind": 32768,
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "An object that contains one or more properties that specify comparison options."
															}
														]
													},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Intl.NumberFormatOptions"
														},
														"name": "NumberFormatOptions",
														"package": "typescript",
														"qualifiedName": "Intl.NumberFormatOptions"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfigurationOptions.logLevel"
					}
				},
				{
					"id": 1375,
					"name": "maxTotalChargeUsd",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 37,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L37"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1386,
					"name": "maxUsedCpuRatio",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Sets the ratio, defining the maximum CPU usage.\nWhen the CPU usage is higher than the provided ratio, the CPU is considered overloaded."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n0.95\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 58,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfigurationOptions.maxUsedCpuRatio"
					}
				},
				{
					"id": 1388,
					"name": "memoryMbytes",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Sets the amount of system memory in megabytes to be used by the "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "AutoscaledPool"
							},
							{
								"kind": "text",
								"text": ".\nBy default, the maximum memory is set to one quarter of total system memory.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_MEMORY_MBYTES`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 73,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfigurationOptions.memoryMbytes"
					}
				},
				{
					"id": 1355,
					"name": "metamorphAfterSleepMillis",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 12,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L12"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1376,
					"name": "metaOrigin",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 38,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L38"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "DEVELOPMENT"
							},
							{
								"type": "literal",
								"value": "WEB"
							},
							{
								"type": "literal",
								"value": "API"
							},
							{
								"type": "literal",
								"value": "SCHEDULER"
							},
							{
								"type": "literal",
								"value": "TEST"
							},
							{
								"type": "literal",
								"value": "WEBHOOK"
							},
							{
								"type": "literal",
								"value": "ACTOR"
							},
							{
								"type": "literal",
								"value": "CLI"
							},
							{
								"type": "literal",
								"value": "STANDBY"
							}
						]
					}
				},
				{
					"id": 1389,
					"name": "persistStateIntervalMillis",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines the interval of emitting the "
							},
							{
								"kind": "code",
								"text": "`persistState`"
							},
							{
								"kind": "text",
								"text": " event.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_PERSIST_STATE_INTERVAL_MILLIS`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n60_000\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 80,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfigurationOptions.persistStateIntervalMillis"
					}
				},
				{
					"id": 1419,
					"name": "persistStorage",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines whether the storage client used should persist the data it stores.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_PERSIST_STORAGE`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 138,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfigurationOptions.persistStorage"
					}
				},
				{
					"id": 1365,
					"name": "proxyHostname",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 24,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L24"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1366,
					"name": "proxyPassword",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 25,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L25"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1367,
					"name": "proxyPort",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 26,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L26"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1368,
					"name": "proxyStatusUrl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 27,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L27"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1383,
					"name": "purgeOnStart",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines whether to purge the default storage folders before starting the crawler run.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_PURGE_ON_START`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\ntrue\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 38,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfigurationOptions.purgeOnStart"
					}
				},
				{
					"id": 1369,
					"name": "standbyPort",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@deprecated",
								"content": [
									{
										"kind": "text",
										"text": "use "
									},
									{
										"kind": "code",
										"text": "`containerPort`"
									},
									{
										"kind": "text",
										"text": " instead"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 31,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L31"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1370,
					"name": "standbyUrl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 32,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L32"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1379,
					"name": "storageClient",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines storage client to be used."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "MemoryStorage"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 14,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/storages.ts",
							"qualifiedName": "StorageClient"
						},
						"name": "StorageClient",
						"package": "@crawlee/types"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfigurationOptions.storageClient"
					}
				},
				{
					"id": 1381,
					"name": "storageClientOptions",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Could be used to adjust the storage client behavior\ne.g. "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "MemoryStorageOptions"
							},
							{
								"kind": "text",
								"text": " could be used to adjust the "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "MemoryStorage"
							},
							{
								"kind": "text",
								"text": " behavior."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 24,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
							"qualifiedName": "Dictionary"
						},
						"name": "Dictionary",
						"package": "@crawlee/types"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfigurationOptions.storageClientOptions"
					}
				},
				{
					"id": 1390,
					"name": "systemInfoIntervalMillis",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines the interval of emitting the "
							},
							{
								"kind": "code",
								"text": "`systemInfo`"
							},
							{
								"kind": "text",
								"text": " event."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n1_000\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 85,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfigurationOptions.systemInfoIntervalMillis"
					}
				},
				{
					"id": 1420,
					"name": "systemInfoV2",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines whether to use the systemInfoV2 metric collection experiment.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_SYSTEM_INFO_V2`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 144,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfigurationOptions.systemInfoV2"
					}
				},
				{
					"id": 1377,
					"name": "testPayPerEvent",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 39,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L39"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1357,
					"name": "token",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 14,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L14"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1378,
					"name": "useChargingLogDataset",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 40,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L40"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1372,
					"name": "userId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 34,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L34"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1393,
					"name": "xvfb",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines whether to run X virtual framebuffer on the web browsers launched by Crawlee.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_XVFB`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nfalse\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 107,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreConfigurationOptions.xvfb"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1356,
						1358,
						1359,
						1360,
						1361,
						1362,
						1387,
						1421,
						1363,
						1364,
						1395,
						1382,
						1384,
						1385,
						1396,
						1380,
						1392,
						1394,
						1391,
						1374,
						1373,
						1371,
						1397,
						1375,
						1386,
						1388,
						1355,
						1376,
						1389,
						1419,
						1365,
						1366,
						1367,
						1368,
						1383,
						1369,
						1370,
						1379,
						1381,
						1390,
						1420,
						1377,
						1357,
						1378,
						1372,
						1393
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/configuration.ts",
					"line": 11,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/configuration.ts#L11"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
						"qualifiedName": "ConfigurationOptions"
					},
					"name": "ConfigurationOptions",
					"package": "@crawlee/core"
				}
			]
		},
		{
			"id": 101,
			"name": "DatasetConsumer",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "User-function used in the "
					},
					{
						"kind": "code",
						"text": "`Dataset.forEach()`"
					},
					{
						"kind": "text",
						"text": " API."
					}
				]
			},
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
					"line": 382,
					"character": 17
				}
			],
			"typeParameters": [
				{
					"id": 102,
					"name": "Data",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				}
			],
			"signatures": [
				{
					"id": 103,
					"name": "DatasetConsumer",
					"variant": "signature",
					"kind": 4096,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 387,
							"character": 4
						}
					],
					"parameters": [
						{
							"id": 104,
							"name": "item",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Current "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " entry being processed."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 102,
								"name": "Data",
								"package": "@crawlee/core",
								"qualifiedName": "DatasetConsumer.Data",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 105,
							"name": "index",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Position of current "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " entry."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/typedefs.ts",
							"qualifiedName": "Awaitable"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Awaitable",
						"package": "@crawlee/core"
					}
				}
			]
		},
		{
			"id": 123,
			"name": "DatasetContent",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 125,
					"name": "count",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Count of dataset entries returned in this set."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 420,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 129,
					"name": "desc",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Should the results be in descending order."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 428,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 128,
					"name": "items",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Dataset entries based on chosen format parameter."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 426,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 130,
							"name": "Data",
							"package": "@crawlee/core",
							"qualifiedName": "DatasetContent.Data",
							"refersToTypeParameter": true
						}
					}
				},
				{
					"id": 127,
					"name": "limit",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Maximum number of dataset entries requested."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 424,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 126,
					"name": "offset",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Position of the first returned entry in the dataset."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 422,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 124,
					"name": "total",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Total count of entries in the dataset."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 418,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						125,
						129,
						128,
						127,
						126,
						124
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
					"line": 416,
					"character": 17
				}
			],
			"typeParameters": [
				{
					"id": 130,
					"name": "Data",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				}
			]
		},
		{
			"id": 82,
			"name": "DatasetDataOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 88,
					"name": "clean",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": " then the function returns only non-empty items and skips hidden fields (i.e. fields starting with "
							},
							{
								"kind": "code",
								"text": "`#`"
							},
							{
								"kind": "text",
								"text": " character).\nNote that the "
							},
							{
								"kind": "code",
								"text": "`clean`"
							},
							{
								"kind": "text",
								"text": " parameter is a shortcut for "
							},
							{
								"kind": "code",
								"text": "`skipHidden: true`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`skipEmpty: true`"
							},
							{
								"kind": "text",
								"text": " options."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nfalse\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 56,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 85,
					"name": "desc",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": " then the objects are sorted by "
							},
							{
								"kind": "code",
								"text": "`createdAt`"
							},
							{
								"kind": "text",
								"text": " in descending order.\nOtherwise they are sorted in ascending order."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nfalse\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 41,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 86,
					"name": "fields",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of field names that will be included in the result. If omitted, all fields are included in the results."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 45,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 84,
					"name": "limit",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Maximum number of array elements to return."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n250000\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 35,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 83,
					"name": "offset",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Number of array elements that should be skipped at the start."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n0\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 30,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 90,
					"name": "skipEmpty",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": " then the function doesn't return empty items.\nNote that in this case the returned number of items might be lower than limit parameter and pagination must be done using the "
							},
							{
								"kind": "code",
								"text": "`limit`"
							},
							{
								"kind": "text",
								"text": " value."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nfalse\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 67,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 89,
					"name": "skipHidden",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": " then the function doesn't return hidden fields (fields starting with \"#\" character)."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nfalse\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 61,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 87,
					"name": "unwind",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Specifies a name of the field in the result objects that will be used to unwind the resulting objects.\nBy default, the results are returned as they are."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 50,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						88,
						85,
						86,
						84,
						83,
						90,
						89,
						87
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
					"line": 25,
					"character": 17
				}
			]
		},
		{
			"id": 91,
			"name": "DatasetIteratorOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 98,
					"name": "desc",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": " then the objects are sorted by "
							},
							{
								"kind": "code",
								"text": "`createdAt`"
							},
							{
								"kind": "text",
								"text": " in descending order.\nOtherwise they are sorted in ascending order."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nfalse\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 41,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Omit.desc"
					}
				},
				{
					"id": 99,
					"name": "fields",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of field names that will be included in the result. If omitted, all fields are included in the results."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 45,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Omit.fields"
					}
				},
				{
					"id": 100,
					"name": "unwind",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Specifies a name of the field in the result objects that will be used to unwind the resulting objects.\nBy default, the results are returned as they are."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 50,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Omit.unwind"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						98,
						99,
						100
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
					"line": 71,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
						"qualifiedName": "Omit"
					},
					"typeArguments": [
						{
							"type": "reference",
							"target": 82,
							"name": "DatasetDataOptions",
							"package": "@crawlee/core"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "offset"
								},
								{
									"type": "literal",
									"value": "limit"
								},
								{
									"type": "literal",
									"value": "clean"
								},
								{
									"type": "literal",
									"value": "skipHidden"
								},
								{
									"type": "literal",
									"value": "skipEmpty"
								}
							]
						}
					],
					"name": "Omit",
					"package": "typescript"
				}
			]
		},
		{
			"id": 106,
			"name": "DatasetMapper",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "User-function used in the "
					},
					{
						"kind": "code",
						"text": "`Dataset.map()`"
					},
					{
						"kind": "text",
						"text": " API."
					}
				]
			},
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
					"line": 392,
					"character": 17
				}
			],
			"typeParameters": [
				{
					"id": 107,
					"name": "Data",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				},
				{
					"id": 108,
					"name": "R",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				}
			],
			"signatures": [
				{
					"id": 109,
					"name": "DatasetMapper",
					"variant": "signature",
					"kind": 4096,
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "User-function used in the "
							},
							{
								"kind": "code",
								"text": "`Dataset.map()`"
							},
							{
								"kind": "text",
								"text": " API."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 398,
							"character": 4
						}
					],
					"parameters": [
						{
							"id": 110,
							"name": "item",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Current "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " entry being processed."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 107,
								"name": "Data",
								"package": "@crawlee/core",
								"qualifiedName": "DatasetMapper.Data",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 111,
							"name": "index",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Position of current "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " entry."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/typedefs.ts",
							"qualifiedName": "Awaitable"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 108,
								"name": "R",
								"package": "@crawlee/core",
								"qualifiedName": "DatasetMapper.R",
								"refersToTypeParameter": true
							}
						],
						"name": "Awaitable",
						"package": "@crawlee/core"
					}
				}
			]
		},
		{
			"id": 119,
			"name": "DatasetOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 122,
					"name": "client",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 414,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/storages.ts",
							"qualifiedName": "StorageClient"
						},
						"name": "StorageClient",
						"package": "@crawlee/types"
					}
				},
				{
					"id": 120,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 412,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 121,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 413,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						122,
						120,
						121
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
					"line": 411,
					"character": 17
				}
			]
		},
		{
			"id": 112,
			"name": "DatasetReducer",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "User-function used in the "
					},
					{
						"kind": "code",
						"text": "`Dataset.reduce()`"
					},
					{
						"kind": "text",
						"text": " API."
					}
				]
			},
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
					"line": 403,
					"character": 17
				}
			],
			"typeParameters": [
				{
					"id": 113,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				},
				{
					"id": 114,
					"name": "Data",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {
						"isExternal": true
					}
				}
			],
			"signatures": [
				{
					"id": 115,
					"name": "DatasetReducer",
					"variant": "signature",
					"kind": 4096,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 409,
							"character": 4
						}
					],
					"parameters": [
						{
							"id": 116,
							"name": "memo",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Previous state of the reduction."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 113,
								"name": "T",
								"package": "@crawlee/core",
								"qualifiedName": "DatasetReducer.T",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 117,
							"name": "item",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Current "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " entry being processed."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 114,
								"name": "Data",
								"package": "@crawlee/core",
								"qualifiedName": "DatasetReducer.Data",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 118,
							"name": "index",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Position of current "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " entry."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/typedefs.ts",
							"qualifiedName": "Awaitable"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 113,
								"name": "T",
								"package": "@crawlee/core",
								"qualifiedName": "DatasetReducer.T",
								"refersToTypeParameter": true
							}
						],
						"name": "Awaitable",
						"package": "@crawlee/core"
					}
				}
			]
		},
		{
			"id": 1262,
			"name": "ExitOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 1266,
					"name": "exit",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Call "
							},
							{
								"kind": "code",
								"text": "`process.exit()`"
							},
							{
								"kind": "text",
								"text": "? Defaults to true"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1981,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1981"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1265,
					"name": "exitCode",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Exit code, defaults to 0"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1979,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1979"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1263,
					"name": "statusMessage",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Exit with given status message"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1972,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1972"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1264,
					"name": "timeoutSecs",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Amount of time, in seconds, to wait for all event handlers to finish before exiting the process."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n30\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1977,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1977"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1266,
						1265,
						1263,
						1264
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1970,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1970"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"target": 1180,
					"name": "MainOptions"
				}
			]
		},
		{
			"id": 1342,
			"name": "ChargeOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 1344,
					"name": "count",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/charging.ts",
							"line": 294,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L294"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1343,
					"name": "eventName",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/charging.ts",
							"line": 293,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L293"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1344,
						1343
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/charging.ts",
					"line": 292,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L292"
				}
			]
		},
		{
			"id": 1345,
			"name": "ChargeResult",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 1346,
					"name": "eventChargeLimitReached",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/charging.ts",
							"line": 298,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L298"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1348,
					"name": "chargeableWithinLimit",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/charging.ts",
							"line": 300,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L300"
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 1347,
					"name": "chargedCount",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/charging.ts",
							"line": 299,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L299"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1346,
						1348,
						1347
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/charging.ts",
					"line": 297,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/charging.ts#L297"
				}
			]
		},
		{
			"id": 1178,
			"name": "InitOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 1179,
					"name": "storage",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1748,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1748"
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/storages.ts",
							"qualifiedName": "StorageClient"
						},
						"name": "StorageClient",
						"package": "@crawlee/types"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1179
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1747,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1747"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"target": 1180,
					"name": "MainOptions"
				}
			]
		},
		{
			"id": 235,
			"name": "KeyConsumer",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "User-function used in the  "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "KeyValueStore.forEachKey"
					},
					{
						"kind": "text",
						"text": " method."
					}
				]
			},
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
					"line": 369,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 236,
					"name": "KeyConsumer",
					"variant": "signature",
					"kind": 4096,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 376,
							"character": 4
						}
					],
					"parameters": [
						{
							"id": 237,
							"name": "key",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Current "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore"
									},
									{
										"kind": "text",
										"text": " key being processed."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 238,
							"name": "index",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Position of the current key in "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 239,
							"name": "info",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Information about the current "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore"
									},
									{
										"kind": "text",
										"text": " entry."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 240,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {
										"isExternal": true
									},
									"children": [
										{
											"id": 241,
											"name": "size",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Size of the value associated with the current key in bytes."
													}
												]
											},
											"sources": [
												{
													"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
													"line": 377,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												241
											]
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
											"line": 376,
											"character": 39
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/typedefs.ts",
							"qualifiedName": "Awaitable"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Awaitable",
						"package": "@crawlee/core"
					}
				}
			]
		},
		{
			"id": 249,
			"name": "KeyValueStoreIteratorOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 250,
					"name": "exclusiveStartKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "All keys up to this one (including) are skipped from the result."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 396,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						250
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
					"line": 392,
					"character": 17
				}
			]
		},
		{
			"id": 242,
			"name": "KeyValueStoreOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 245,
					"name": "client",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 383,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/storages.ts",
							"qualifiedName": "StorageClient"
						},
						"name": "StorageClient",
						"package": "@crawlee/types"
					}
				},
				{
					"id": 243,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 381,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 244,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 382,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 246,
					"name": "storageObject",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 384,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						245,
						243,
						244,
						246
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
					"line": 380,
					"character": 17
				}
			]
		},
		{
			"id": 314,
			"name": "LoggerOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 321,
					"name": "data",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Additional data to be added to each log line."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 61,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 315,
					"name": "level",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Sets the log level to the given value, preventing messages from less important log levels\nfrom being printed to the console. Use in conjunction with the "
							},
							{
								"kind": "code",
								"text": "`log.LEVELS`"
							},
							{
								"kind": "text",
								"text": " constants."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 46,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 320,
					"name": "logger",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Logger implementation to be used. Default one is log.LoggerText to log messages as easily readable\nstrings. Optionally you can use "
							},
							{
								"kind": "code",
								"text": "`log.LoggerJson`"
							},
							{
								"kind": "text",
								"text": " that formats each log line as a JSON."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 59,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": 330,
						"name": "Logger",
						"package": "@apify/log"
					}
				},
				{
					"id": 316,
					"name": "maxDepth",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Max depth of data object that will be logged. Anything deeper than the limit will be stripped off."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 48,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 317,
					"name": "maxStringLength",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Max length of the string to be logged. Longer strings will be truncated."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 50,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 318,
					"name": "prefix",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Prefix to be prepended the each logged line."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 52,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 319,
					"name": "suffix",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Suffix that will be appended the each logged line."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/cjs/index.d.ts",
							"line": 54,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						321,
						315,
						320,
						316,
						317,
						318,
						319
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@apify/log/cjs/index.d.ts",
					"line": 41,
					"character": 10
				}
			]
		},
		{
			"id": 1180,
			"name": "MainOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 1184,
					"name": "exit",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Call "
							},
							{
								"kind": "code",
								"text": "`process.exit()`"
							},
							{
								"kind": "text",
								"text": "? Defaults to true"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1981,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1981"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 1266,
						"name": "ExitOptions.exit"
					}
				},
				{
					"id": 1183,
					"name": "exitCode",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Exit code, defaults to 0"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1979,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1979"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 1265,
						"name": "ExitOptions.exitCode"
					}
				},
				{
					"id": 1181,
					"name": "statusMessage",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Exit with given status message"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1972,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1972"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 1263,
						"name": "ExitOptions.statusMessage"
					}
				},
				{
					"id": 1185,
					"name": "storage",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1748,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1748"
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/storages.ts",
							"qualifiedName": "StorageClient"
						},
						"name": "StorageClient",
						"package": "@crawlee/types"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 1179,
						"name": "InitOptions.storage"
					}
				},
				{
					"id": 1182,
					"name": "timeoutSecs",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Amount of time, in seconds, to wait for all event handlers to finish before exiting the process."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n30\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1977,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1977"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": 1264,
						"name": "ExitOptions.timeoutSecs"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1184,
						1183,
						1181,
						1185,
						1182
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1751,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1751"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 1262,
					"name": "ExitOptions",
					"package": "apify"
				},
				{
					"type": "reference",
					"target": 1178,
					"name": "InitOptions",
					"package": "apify"
				}
			]
		},
		{
			"id": 1256,
			"name": "MetamorphOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 1258,
					"name": "build",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Tag or number of the target Actor build to metamorph into (e.g. "
							},
							{
								"kind": "code",
								"text": "`beta`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`1.2.345`"
							},
							{
								"kind": "text",
								"text": ").\nIf not provided, the run uses build tag or number from the default Actor run configuration (typically "
							},
							{
								"kind": "code",
								"text": "`latest`"
							},
							{
								"kind": "text",
								"text": ")."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1959,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1959"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1257,
					"name": "contentType",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Content type for the "
							},
							{
								"kind": "code",
								"text": "`input`"
							},
							{
								"kind": "text",
								"text": ". If not specified,\n"
							},
							{
								"kind": "code",
								"text": "`input`"
							},
							{
								"kind": "text",
								"text": " is expected to be an object that will be stringified to JSON and content type set to\n"
							},
							{
								"kind": "code",
								"text": "`application/json; charset=utf-8`"
							},
							{
								"kind": "text",
								"text": ". If "
							},
							{
								"kind": "code",
								"text": "`options.contentType`"
							},
							{
								"kind": "text",
								"text": " is specified, then "
							},
							{
								"kind": "code",
								"text": "`input`"
							},
							{
								"kind": "text",
								"text": " must be a\n"
							},
							{
								"kind": "code",
								"text": "`String`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`Buffer`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1953,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1953"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1258,
						1257
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1946,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1946"
				}
			]
		},
		{
			"id": 1267,
			"name": "OpenStorageOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 1268,
					"name": "forceCloud",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If set to "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": " then the cloud storage is used even if the "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_STORAGE_DIR`"
							},
							{
								"kind": "text",
								"text": "\nenvironment variable is set. This way it is possible to combine local and cloud storage."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nfalse\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1990,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1990"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1268
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1984,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1984"
				}
			]
		},
		{
			"id": 1590,
			"name": "ProxyConfigurationOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 1595,
					"name": "apifyProxyCountry",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Same option as "
							},
							{
								"kind": "code",
								"text": "`countryCode`"
							},
							{
								"kind": "text",
								"text": " which can be used to\nconfigurate the proxy by UI input schema. You should use the "
							},
							{
								"kind": "code",
								"text": "`countryCode`"
							},
							{
								"kind": "text",
								"text": " option in your crawler code."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 59,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/proxy_configuration.ts#L59"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1594,
					"name": "apifyProxyGroups",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Same option as "
							},
							{
								"kind": "code",
								"text": "`groups`"
							},
							{
								"kind": "text",
								"text": " which can be used to\nconfigurate the proxy by UI input schema. You should use the "
							},
							{
								"kind": "code",
								"text": "`groups`"
							},
							{
								"kind": "text",
								"text": " option in your crawler code."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 53,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/proxy_configuration.ts#L53"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 1593,
					"name": "countryCode",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If set and relevant proxies are available in your Apify account, all proxied requests will\nuse IP addresses that are geolocated to the specified country. For example "
							},
							{
								"kind": "code",
								"text": "`GB`"
							},
							{
								"kind": "text",
								"text": " for IPs\nfrom Great Britain. Note that online services often have their own rules for handling\ngeolocation and thus the country selection is a best attempt at geolocation, rather than\na guaranteed hit. This parameter is optional, by default, each proxied request is assigned\nan IP address from a random country. The country code needs to be a two letter ISO country code. See the\n[full list of available country codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements).\nThis parameter is optional, by default, the proxy uses all available proxy servers from all countries.\non the Apify cloud, or when using the [Apify CLI](https://github.com/apify/apify-cli)."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 47,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/proxy_configuration.ts#L47"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1592,
					"name": "groups",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of proxy groups to be used by the [Apify Proxy](https://docs.apify.com/proxy).\nIf not provided, the proxy will select the groups automatically."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 34,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/proxy_configuration.ts#L34"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 1598,
					"name": "newUrlFunction",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Custom function that allows you to generate the new proxy URL dynamically. It gets the "
							},
							{
								"kind": "code",
								"text": "`sessionId`"
							},
							{
								"kind": "text",
								"text": " as a parameter and an optional parameter with the "
							},
							{
								"kind": "code",
								"text": "`Request`"
							},
							{
								"kind": "text",
								"text": " object when applicable.\nCan return either stringified proxy URL or "
							},
							{
								"kind": "code",
								"text": "`null`"
							},
							{
								"kind": "text",
								"text": " if the proxy should not be used. Can be asynchronous.\n\nThis function is used to generate the URL when "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "ProxyConfiguration.newUrl"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "ProxyConfiguration.newProxyInfo"
							},
							{
								"kind": "text",
								"text": " is called."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/proxy_configuration.d.ts",
							"line": 20,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/proxy_configuration.ts",
							"qualifiedName": "ProxyConfigurationFunction"
						},
						"name": "ProxyConfigurationFunction",
						"package": "@crawlee/core"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreProxyConfigurationOptions.newUrlFunction"
					}
				},
				{
					"id": 1591,
					"name": "password",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "User's password for the proxy. By default, it is taken from the "
							},
							{
								"kind": "code",
								"text": "`APIFY_PROXY_PASSWORD`"
							},
							{
								"kind": "text",
								"text": "\nenvironment variable, which is automatically set by the system when running the Actors."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 28,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/proxy_configuration.ts#L28"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1597,
					"name": "proxyUrls",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of custom proxy URLs to be rotated.\nCustom proxies are not compatible with Apify Proxy and an attempt to use both\nconfiguration options will cause an error to be thrown on initialize."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/proxy_configuration.d.ts",
							"line": 13,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreProxyConfigurationOptions.proxyUrls"
					}
				},
				{
					"id": 1596,
					"name": "tieredProxyConfig",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Multiple different ProxyConfigurationOptions stratified into tiers. Crawlee crawlers will switch between those tiers\nbased on the blocked request statistics."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 65,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/proxy_configuration.ts#L65"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
								"qualifiedName": "Omit"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 1590,
									"name": "ProxyConfigurationOptions",
									"package": "apify"
								},
								{
									"type": "union",
									"types": [
										{
											"type": "unknown",
											"name": "keyof ProxyConfigurationOptions"
										},
										{
											"type": "literal",
											"value": "tieredProxyConfig"
										}
									]
								}
							],
							"name": "Omit",
							"package": "typescript"
						}
					}
				},
				{
					"id": 1599,
					"name": "tieredProxyUrls",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of custom proxy URLs to be rotated stratified in tiers.\nThis is a more advanced version of "
							},
							{
								"kind": "code",
								"text": "`proxyUrls`"
							},
							{
								"kind": "text",
								"text": " that allows you to define a hierarchy of proxy URLs\nIf everything goes well, all the requests will be sent through the first proxy URL in the list.\nWhenever the crawler encounters a problem with the current proxy on the given domain, it will switch to the higher tier for this domain.\nThe crawler probes lower-level proxies at intervals to check if it can make the tier downshift.\n\nThis feature is useful when you have a set of proxies with different performance characteristics (speed, price, antibot performance etc.) and you want to use the best one for each domain.\n\nUse "
							},
							{
								"kind": "code",
								"text": "`null`"
							},
							{
								"kind": "text",
								"text": " as a proxy URL to disable the proxy for the given tier."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/proxy_configuration.d.ts",
							"line": 32,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "array",
							"elementType": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreProxyConfigurationOptions.tieredProxyUrls"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1595,
						1594,
						1593,
						1592,
						1598,
						1591,
						1597,
						1596,
						1599
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/proxy_configuration.ts",
					"line": 23,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/proxy_configuration.ts#L23"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../node_modules/@crawlee/src/proxy_configuration.ts",
						"qualifiedName": "ProxyConfigurationOptions"
					},
					"name": "ProxyConfigurationOptions",
					"package": "@crawlee/core"
				}
			]
		},
		{
			"id": 1600,
			"name": "ProxyInfo",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The main purpose of the ProxyInfo object is to provide information\nabout the current proxy connection used by the crawler for the request.\nOutside of crawlers, you can get this object by calling "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "ProxyConfiguration.newProxyInfo"
					},
					{
						"kind": "text",
						"text": ".\n\n**Example usage:**\n\n"
					},
					{
						"kind": "code",
						"text": "```javascript\n\nconst proxyConfiguration = await Actor.createProxyConfiguration({\n  groups: ['GROUP1', 'GROUP2'] // List of Apify Proxy groups\n  countryCode: 'US',\n});\n\n// Getting proxyInfo object by calling class method directly\nconst proxyInfo = proxyConfiguration.newProxyInfo();\n\n// In crawler\nconst crawler = new CheerioCrawler({\n  // ...\n  proxyConfiguration,\n  requestHandler({ proxyInfo }) {\n      // Getting used proxy URL\n      const proxyUrl = proxyInfo.url;\n\n      // Getting ID of used Session\n      const sessionIdentifier = proxyInfo.sessionId;\n  }\n})\n\n```"
					}
				]
			},
			"children": [
				{
					"id": 1602,
					"name": "countryCode",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If set and relevant proxies are available in your Apify account, all proxied requests will\nuse IP addresses that are geolocated to the specified country. For example "
							},
							{
								"kind": "code",
								"text": "`GB`"
							},
							{
								"kind": "text",
								"text": " for IPs\nfrom Great Britain. Note that online services often have their own rules for handling\ngeolocation and thus the country selection is a best attempt at geolocation, rather than\na guaranteed hit. This parameter is optional, by default, each proxied request is assigned\nan IP address from a random country. The country code needs to be a two letter ISO country code. See the\n[full list of available country codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements).\nThis parameter is optional, by default, the proxy uses all available proxy servers from all countries."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 117,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/proxy_configuration.ts#L117"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1601,
					"name": "groups",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of proxy groups to be used by the [Apify Proxy](https://docs.apify.com/proxy).\nIf not provided, the proxy will select the groups automatically."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 105,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/proxy_configuration.ts#L105"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 1607,
					"name": "hostname",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hostname of your proxy."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/proxy_configuration.d.ts",
							"line": 88,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreProxyInfo.hostname"
					}
				},
				{
					"id": 1603,
					"name": "password",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "User's password for the proxy. By default, it is taken from the "
							},
							{
								"kind": "code",
								"text": "`APIFY_PROXY_PASSWORD`"
							},
							{
								"kind": "text",
								"text": "\nenvironment variable, which is automatically set by the system when running the Actors\non the Apify cloud, or when using the [Apify CLI](https://github.com/apify/apify-cli)."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 124,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/proxy_configuration.ts#L124"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "CoreProxyInfo.password"
					}
				},
				{
					"id": 1608,
					"name": "port",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Proxy port."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/proxy_configuration.d.ts",
							"line": 92,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreProxyInfo.port"
					}
				},
				{
					"id": 1609,
					"name": "proxyTier",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Proxy tier for the current proxy, if applicable (only for "
							},
							{
								"kind": "code",
								"text": "`tieredProxyUrls`"
							},
							{
								"kind": "text",
								"text": ")."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/proxy_configuration.d.ts",
							"line": 96,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreProxyInfo.proxyTier"
					}
				},
				{
					"id": 1604,
					"name": "sessionId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The identifier of used "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "Session"
							},
							{
								"kind": "text",
								"text": ", if used."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/proxy_configuration.d.ts",
							"line": 72,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreProxyInfo.sessionId"
					}
				},
				{
					"id": 1605,
					"name": "url",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The URL of the proxy."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/proxy_configuration.d.ts",
							"line": 76,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreProxyInfo.url"
					}
				},
				{
					"id": 1606,
					"name": "username",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Username for the proxy."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/proxy_configuration.d.ts",
							"line": 80,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "CoreProxyInfo.username"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1602,
						1601,
						1607,
						1603,
						1608,
						1609,
						1604,
						1605,
						1606
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/proxy_configuration.ts",
					"line": 100,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/proxy_configuration.ts#L100"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../node_modules/@crawlee/src/proxy_configuration.ts",
						"qualifiedName": "ProxyInfo"
					},
					"name": "ProxyInfo",
					"package": "@crawlee/core"
				}
			]
		},
		{
			"id": 223,
			"name": "QueueOperationInfo",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A helper class that is used to report results from various\n"
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "RequestQueue"
					},
					{
						"kind": "text",
						"text": " functions as well as "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "enqueueLinks"
					},
					{
						"kind": "text",
						"text": "."
					}
				]
			},
			"children": [
				{
					"id": 226,
					"name": "requestId",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the added request"
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/types/storages.d.ts",
							"line": 12,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 225,
					"name": "wasAlreadyHandled",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates if request was already marked as handled."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/types/storages.d.ts",
							"line": 10,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 224,
					"name": "wasAlreadyPresent",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates if request was already present in the queue."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/types/storages.d.ts",
							"line": 8,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						226,
						225,
						224
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/types/storages.d.ts",
					"line": 6,
					"character": 17
				}
			]
		},
		{
			"id": 1260,
			"name": "RebootOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1965,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1965"
				}
			]
		},
		{
			"id": 247,
			"name": "RecordOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 248,
					"name": "contentType",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Specifies a custom MIME content type of the record."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 390,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						248
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
					"line": 386,
					"character": 17
				}
			]
		},
		{
			"id": 227,
			"name": "RequestQueueOperationOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 228,
					"name": "forefront",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If set to "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": ":\n  - while adding the request to the queue: the request will be added to the foremost position in the queue.\n  - while reclaiming the request: the request will be placed to the beginning of the queue, so that it's returned\n  in the next call to "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "RequestQueue.fetchNextRequest"
							},
							{
								"kind": "text",
								"text": ".\nBy default, it's put to the end of the queue.\n\nIn case the request is already present in the queue, this option has no effect.\n\nIf more requests are added with this option at once, their order in the following "
							},
							{
								"kind": "code",
								"text": "`fetchNextRequest`"
							},
							{
								"kind": "text",
								"text": " call\nis arbitrary."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nfalse\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 256,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						228
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
					"line": 242,
					"character": 17
				}
			]
		},
		{
			"id": 230,
			"name": "RequestQueueOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [],
				"blockTags": [
					{
						"tag": "@deprecated",
						"content": [
							{
								"kind": "text",
								"text": "Use "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "RequestProviderOptions"
							},
							{
								"kind": "text",
								"text": " instead."
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 233,
					"name": "client",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 221,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/storages.ts",
							"qualifiedName": "StorageClient"
						},
						"name": "StorageClient",
						"package": "@crawlee/types"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RequestProviderOptions.client"
					}
				},
				{
					"id": 231,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 219,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RequestProviderOptions.id"
					}
				},
				{
					"id": 232,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 220,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RequestProviderOptions.name"
					}
				},
				{
					"id": 234,
					"name": "proxyConfiguration",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isInherited": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Used to pass the proxy configuration for the "
							},
							{
								"kind": "code",
								"text": "`requestsFromUrl`"
							},
							{
								"kind": "text",
								"text": " objects.\nTakes advantage of the internal address rotation and authentication process.\nIf undefined, the "
							},
							{
								"kind": "code",
								"text": "`requestsFromUrl`"
							},
							{
								"kind": "text",
								"text": " requests will be made without proxy."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
							"line": 227,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../node_modules/@crawlee/src/proxy_configuration.ts",
							"qualifiedName": "ProxyConfiguration"
						},
						"name": "ProxyConfiguration",
						"package": "@crawlee/core"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "RequestProviderOptions.proxyConfiguration"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						233,
						231,
						232,
						234
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/request_provider.d.ts",
					"line": 232,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
						"qualifiedName": "RequestProviderOptions"
					},
					"name": "RequestProviderOptions",
					"package": "@crawlee/core"
				}
			]
		},
		{
			"id": 1251,
			"name": "WebhookOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 1252,
					"name": "eventTypes",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Array of event types, which you can set for Actor run, see\nthe [Actor run events](https://docs.apify.com/webhooks/events#actor-run) in the Apify doc."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1920,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1920"
						}
					],
					"type": {
						"type": "typeOperator",
						"operator": "readonly",
						"target": {
							"type": "array",
							"elementType": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/apify-client/src/resource_clients/webhook.ts",
									"qualifiedName": "WebhookEventType"
								},
								"name": "WebhookEventType",
								"package": "apify-client"
							}
						}
					}
				},
				{
					"id": 1255,
					"name": "idempotencyKey",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Idempotency key enables you to ensure that a webhook will not be added multiple times in case of\nan Actor restart or other situation that would cause the "
							},
							{
								"kind": "code",
								"text": "`addWebhook()`"
							},
							{
								"kind": "text",
								"text": " function to be called again.\nWe suggest using the Actor run ID as the idempotency key. You can get the run ID by calling\n"
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "Actor.getEnv"
							},
							{
								"kind": "text",
								"text": " function."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1943,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1943"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1254,
					"name": "payloadTemplate",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Payload template is a JSON-like string that describes the structure of the webhook POST request payload.\nIt uses JSON syntax, extended with a double curly braces syntax for injecting variables "
							},
							{
								"kind": "code",
								"text": "`{{variable}}`"
							},
							{
								"kind": "text",
								"text": ".\nThose variables are resolved at the time of the webhook's dispatch, and a list of available variables with their descriptions\nis available in the [Apify webhook documentation](https://docs.apify.com/webhooks).\nIf "
							},
							{
								"kind": "code",
								"text": "`payloadTemplate`"
							},
							{
								"kind": "text",
								"text": " is omitted, the default payload template is used\n([view docs](https://docs.apify.com/webhooks/actions#payload-template))."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1935,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1935"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1253,
					"name": "requestUrl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "URL which will be requested using HTTP POST request, when Actor run will reach the set event type."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1925,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1925"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1252,
						1255,
						1254,
						1253
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1915,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1915"
				}
			]
		},
		{
			"id": 1226,
			"name": "UserFunc",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1889,
					"character": 12,
					"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1889"
				}
			],
			"typeParameters": [
				{
					"id": 1229,
					"name": "T",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"default": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1227,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1889,
							"character": 36,
							"url": "https://github.com/apify/apify-sdk-js/blob/master/packages/apify/src/actor.ts#L1889"
						}
					],
					"signatures": [
						{
							"id": 1228,
							"name": "__type",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../node_modules/@crawlee/src/utility-types.ts",
									"qualifiedName": "Awaitable"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1229,
										"name": "T",
										"package": "apify",
										"refersToTypeParameter": true
									}
								],
								"name": "Awaitable",
								"package": "@crawlee/types"
							}
						}
					]
				}
			}
		},
		{
			"id": 251,
			"name": "log",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isExternal": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "node_modules/@apify/log/cjs/index.d.ts",
					"line": 252,
					"character": 14
				}
			],
			"type": {
				"type": "reference",
				"target": 252,
				"name": "Log",
				"package": "@apify/log"
			}
		}
	],
	"groups": [
		{
			"title": "Enumerations",
			"children": [
				322
			]
		},
		{
			"title": "Classes",
			"children": [
				902,
				817,
				1422,
				1,
				1300,
				1733,
				252,
				330,
				490,
				651,
				1685,
				1610,
				131
			]
		},
		{
			"title": "Interfaces",
			"children": [
				1247,
				1349,
				1269,
				891,
				1186,
				1230,
				1239,
				1354,
				101,
				123,
				82,
				91,
				106,
				119,
				112,
				1262,
				1342,
				1345,
				1178,
				235,
				249,
				242,
				314,
				1180,
				1256,
				1267,
				1590,
				1600,
				223,
				1260,
				247,
				227,
				230,
				1251
			]
		},
		{
			"title": "Type Aliases",
			"children": [
				1226
			]
		},
		{
			"title": "Variables",
			"children": [
				251
			]
		}
	],
	"categories": [
		{
			"title": "Result Stores",
			"children": [
				1
			]
		},
		{
			"title": "Scaling",
			"children": [
				1610
			]
		},
		{
			"title": "Sources",
			"children": [
				131
			]
		},
		{
			"title": "__CATEGORY__",
			"children": [
				322,
				902,
				817,
				1422,
				1300,
				1733,
				252,
				330,
				490,
				651,
				1685,
				1247,
				1349,
				1269,
				891,
				1186,
				1230,
				1239,
				1354,
				101,
				123,
				82,
				91,
				106,
				119,
				112,
				1262,
				1342,
				1345,
				1178,
				235,
				249,
				242,
				314,
				1180,
				1256,
				1267,
				1590,
				1600,
				223,
				1260,
				247,
				227,
				230,
				1251,
				1226,
				251
			]
		}
	],
	"packageName": "apify",
	"packageVersion": "3.4.0",
	"readme": [
		{
			"kind": "text",
			"text": "# Apify SDK\n\n[![npm version](https://badge.fury.io/js/apify.svg)](https://www.npmjs.com/package/apify)\n[![Downloads](https://img.shields.io/npm/dm/apify.svg)](https://www.npmjs.com/package/apify)\n[![Chat on discord](https://img.shields.io/discord/801163717915574323?label=discord)](https://discord.gg/jyEM2PRvMU)\n[![Build Status](https://github.com/apify/apify-sdk-js/actions/workflows/test-and-release.yaml/badge.svg?branch=master)](https://github.com/apify/apify-sdk-js/actions/workflows/test-and-release.yaml)\n\nApify SDK provides the tools required to run your own Apify Actors. The crawlers and scraping related tools, previously included in Apify SDK (v2), have been split into a brand-new module - ["
		},
		{
			"kind": "code",
			"text": "`crawlee`"
		},
		{
			"kind": "text",
			"text": "](https://npmjs.org/crawlee), while keeping the Apify specific parts in this module.\n\n> Would you like to work with us on Crawlee, Apify SDK or similar projects? We are hiring [Node.js engineers](https://apify.com/jobs#senior-node.js-engineer).\n\n## Upgrading from v2\n\nA lot of things have changed since version 2 of the Apify SDK, including the split of the crawlers to the new ["
		},
		{
			"kind": "code",
			"text": "`crawlee`"
		},
		{
			"kind": "text",
			"text": "](https://npmjs.org/crawlee) module. We've written a guide to help you easily migrate from v2 to v3. Visit the [Upgrading Guide](https://docs.apify.com/sdk/js/docs/upgrading/upgrading-to-v3) to find out what changes you need to make (especially the section related to this very [Apify SDK](https://docs.apify.com/sdk/js/docs/upgrading/upgrading-to-v3#apify-sdk)), and, if you encounter any issues, join our [Discord server](https://discord.gg/jyEM2PRvMU) for help!\n\n## Quick Start\n\nThis short tutorial will set you up to start using Apify SDK in a minute or two.\nIf you want to learn more, proceed to the [Apify Platform](https://docs.apify.com/sdk/js/docs/guides/apify-platform)\nguide that will take you step by step through running your Actor on Apify's platform.\n\nApify SDK requires [Node.js](https://nodejs.org/en/) 16 or later. Add Apify SDK to any Node.js project by running:\n\n"
		},
		{
			"kind": "code",
			"text": "```bash\nnpm install apify crawlee playwright\n```"
		},
		{
			"kind": "text",
			"text": "\n\n> For this example, we'll also install the ["
		},
		{
			"kind": "code",
			"text": "`crawlee`"
		},
		{
			"kind": "text",
			"text": "](https://npmjs.org/crawlee) module, as it now provides the crawlers that were previously exported by Apify SDK. If you don't plan to use crawlers in your Actors, then you don't need to install it. Keep in mind that neither "
		},
		{
			"kind": "code",
			"text": "`playwright`"
		},
		{
			"kind": "text",
			"text": " nor "
		},
		{
			"kind": "code",
			"text": "`puppeteer`"
		},
		{
			"kind": "text",
			"text": " are bundled with "
		},
		{
			"kind": "code",
			"text": "`crawlee`"
		},
		{
			"kind": "text",
			"text": " in order to reduce install size and allow greater flexibility. That's why we manually install it with NPM. You can choose one, both, or neither.\n\nThere are two ways to initialize your Actor: by using the "
		},
		{
			"kind": "code",
			"text": "`Actor.main()`"
		},
		{
			"kind": "text",
			"text": " function you're probably used to, or by calling "
		},
		{
			"kind": "code",
			"text": "`Actor.init()`"
		},
		{
			"kind": "text",
			"text": " and "
		},
		{
			"kind": "code",
			"text": "`Actor.exit()`"
		},
		{
			"kind": "text",
			"text": " manually. We prefer explicitly calling "
		},
		{
			"kind": "code",
			"text": "`init`"
		},
		{
			"kind": "text",
			"text": " and "
		},
		{
			"kind": "code",
			"text": "`exit`"
		},
		{
			"kind": "text",
			"text": ".\n\n### Using "
		},
		{
			"kind": "code",
			"text": "`Actor.init()`"
		},
		{
			"kind": "text",
			"text": " and "
		},
		{
			"kind": "code",
			"text": "`Actor.exit()`"
		},
		{
			"kind": "text",
			"text": "\n\n"
		},
		{
			"kind": "code",
			"text": "```typescript\nimport { Actor } from 'apify';\nimport { PlaywrightCrawler } from 'crawlee';\n\nawait Actor.init()\n\nconst crawler = new PlaywrightCrawler({\n    async requestHandler({ request, page, enqueueLinks }) {\n        // Extract HTML title of the page.\n        const title = await page.title();\n        console.log(`Title of ${request.url}: ${title}`);\n\n        // Add URLs that point to the same hostname.\n        await enqueueLinks();\n    },\n});\n\nawait crawler.run(['https://crawlee.dev/']);\n\nawait Actor.exit();\n```"
		},
		{
			"kind": "text",
			"text": "\n\n### Using "
		},
		{
			"kind": "code",
			"text": "`Actor.main()`"
		},
		{
			"kind": "text",
			"text": "\n\n"
		},
		{
			"kind": "code",
			"text": "```typescript\nimport { Actor } from 'apify';\nimport { PlaywrightCrawler } from 'crawlee';\n\nawait Actor.main(async () => {\n    const crawler = new PlaywrightCrawler({\n        async requestHandler({ request, page, enqueueLinks }) {\n            // Extract HTML title of the page.\n            const title = await page.title();\n            console.log(`Title of ${request.url}: ${title}`);\n\n            // Add URLs that point to the same hostname.\n            await enqueueLinks();\n        },\n    });\n\n    await crawler.run(['https://crawlee.dev/']);\n});\n```"
		},
		{
			"kind": "text",
			"text": "\n\n## Support\n\nIf you find any bug or issue with the Apify SDK, please [submit an issue on GitHub](https://github.com/apify/apify-sdk-js/issues).\nFor questions, you can ask on [Stack Overflow](https://stackoverflow.com/questions/tagged/apify) or contact support@apify.com\n\n## Contributing\n\nYour code contributions are welcome, and you'll be praised to eternity!\nIf you have any ideas for improvements, either submit an issue or create a pull request.\nFor contribution guidelines and the code of conduct,\nsee [CONTRIBUTING.md](https://github.com/apify/apify-sdk-js/blob/master/CONTRIBUTING.md).\n\n## License\n\nThis project is licensed under the Apache License 2.0 -\nsee the [LICENSE.md](https://github.com/apify/apify-sdk-js/blob/master/LICENSE.md) file for details.\n\n## Acknowledgments\n\nMany thanks to [Chema Balsas](https://www.npmjs.com/~jbalsas) for giving up the "
		},
		{
			"kind": "code",
			"text": "`apify`"
		},
		{
			"kind": "text",
			"text": " package name\non NPM and renaming his project to [jsdocify](https://www.npmjs.com/package/jsdocify)."
		}
	],
	"symbolIdMap": {
		"0": {
			"sourceFileName": "../packages/apify/src/index.ts",
			"qualifiedName": ""
		},
		"1": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset"
		},
		"2": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.exportToJSON"
		},
		"3": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.exportToJSON"
		},
		"4": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "key"
		},
		"5": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "options"
		},
		"6": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.exportToCSV"
		},
		"7": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.exportToCSV"
		},
		"8": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "key"
		},
		"9": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "options"
		},
		"10": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.open"
		},
		"11": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.open"
		},
		"12": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Data"
		},
		"13": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "datasetIdOrName"
		},
		"14": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "options"
		},
		"19": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.getData"
		},
		"20": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.getData"
		},
		"21": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Data"
		},
		"22": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "options"
		},
		"28": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.config"
		},
		"29": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.id"
		},
		"30": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.name"
		},
		"31": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.client"
		},
		"32": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.log"
		},
		"33": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.pushData"
		},
		"34": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.pushData"
		},
		"35": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "data"
		},
		"36": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.getData"
		},
		"37": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.getData"
		},
		"38": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "options"
		},
		"39": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.export"
		},
		"40": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.export"
		},
		"41": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "options"
		},
		"42": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.exportTo"
		},
		"43": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.exportTo"
		},
		"44": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "key"
		},
		"45": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "options"
		},
		"46": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "contentType"
		},
		"47": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.exportToJSON"
		},
		"48": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.exportToJSON"
		},
		"49": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "key"
		},
		"50": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "options"
		},
		"51": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.exportToCSV"
		},
		"52": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.exportToCSV"
		},
		"53": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "key"
		},
		"54": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "options"
		},
		"55": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.getInfo"
		},
		"56": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.getInfo"
		},
		"57": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.forEach"
		},
		"58": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.forEach"
		},
		"59": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "iteratee"
		},
		"60": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "options"
		},
		"61": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "index"
		},
		"62": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.map"
		},
		"63": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.map"
		},
		"64": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "R"
		},
		"65": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "iteratee"
		},
		"66": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "options"
		},
		"67": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.reduce"
		},
		"68": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.reduce"
		},
		"69": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "iteratee"
		},
		"70": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.reduce"
		},
		"71": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "iteratee"
		},
		"72": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "memo"
		},
		"73": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "options"
		},
		"74": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.reduce"
		},
		"75": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "T"
		},
		"76": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "iteratee"
		},
		"77": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "memo"
		},
		"78": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "options"
		},
		"79": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.drop"
		},
		"80": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.drop"
		},
		"81": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "Dataset.Data"
		},
		"82": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetDataOptions"
		},
		"83": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetDataOptions.offset"
		},
		"84": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetDataOptions.limit"
		},
		"85": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetDataOptions.desc"
		},
		"86": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetDataOptions.fields"
		},
		"87": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetDataOptions.unwind"
		},
		"88": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetDataOptions.clean"
		},
		"89": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetDataOptions.skipHidden"
		},
		"90": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetDataOptions.skipEmpty"
		},
		"91": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetIteratorOptions"
		},
		"98": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "desc"
		},
		"99": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "fields"
		},
		"100": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "unwind"
		},
		"101": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetConsumer"
		},
		"102": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetConsumer.Data"
		},
		"103": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetConsumer"
		},
		"104": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "item"
		},
		"105": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "index"
		},
		"106": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetMapper"
		},
		"107": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetMapper.Data"
		},
		"108": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetMapper.R"
		},
		"109": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetMapper"
		},
		"110": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "item"
		},
		"111": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "index"
		},
		"112": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetReducer"
		},
		"113": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetReducer.T"
		},
		"114": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetReducer.Data"
		},
		"115": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetReducer"
		},
		"116": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "memo"
		},
		"117": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "item"
		},
		"118": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "index"
		},
		"119": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetOptions"
		},
		"120": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetOptions.id"
		},
		"121": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetOptions.name"
		},
		"122": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetOptions.client"
		},
		"123": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetContent"
		},
		"124": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetContent.total"
		},
		"125": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetContent.count"
		},
		"126": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetContent.offset"
		},
		"127": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetContent.limit"
		},
		"128": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetContent.items"
		},
		"129": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetContent.desc"
		},
		"130": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/dataset.ts",
			"qualifiedName": "DatasetContent.Data"
		},
		"131": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "RequestQueue"
		},
		"132": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "RequestQueue.open"
		},
		"133": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "RequestQueue.open"
		},
		"134": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "args"
		},
		"135": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "RequestQueue.__constructor"
		},
		"136": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "RequestQueue"
		},
		"137": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "options"
		},
		"138": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "config"
		},
		"147": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "RequestQueue.addRequest"
		},
		"148": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "RequestQueue.addRequest"
		},
		"149": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "requestLike"
		},
		"150": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "options"
		},
		"151": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "RequestQueue.addRequests"
		},
		"152": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "RequestQueue.addRequests"
		},
		"153": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "requestsLike"
		},
		"154": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "options"
		},
		"155": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "RequestQueue.fetchNextRequest"
		},
		"156": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "RequestQueue.fetchNextRequest"
		},
		"157": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "T"
		},
		"158": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "RequestQueue.markRequestHandled"
		},
		"159": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "RequestQueue.markRequestHandled"
		},
		"160": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "request"
		},
		"161": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "RequestQueue.isFinished"
		},
		"162": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "RequestQueue.isFinished"
		},
		"163": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "RequestQueue.reclaimRequest"
		},
		"164": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "RequestQueue.reclaimRequest"
		},
		"165": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_queue_v2.ts",
			"qualifiedName": "args"
		},
		"178": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.config"
		},
		"179": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.id"
		},
		"180": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.name"
		},
		"181": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.timeoutSecs"
		},
		"182": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.clientKey"
		},
		"183": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.client"
		},
		"185": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.log"
		},
		"186": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.internalTimeoutMillis"
		},
		"187": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.requestLockSecs"
		},
		"188": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.assumedTotalCount"
		},
		"189": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.assumedHandledCount"
		},
		"197": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.getTotalCount"
		},
		"198": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.getTotalCount"
		},
		"199": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.addRequestsBatched"
		},
		"200": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.addRequestsBatched"
		},
		"201": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "requests"
		},
		"202": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "options"
		},
		"203": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.getRequest"
		},
		"204": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.getRequest"
		},
		"205": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "T"
		},
		"206": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "id"
		},
		"207": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.isEmpty"
		},
		"208": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.isEmpty"
		},
		"209": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.drop"
		},
		"210": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.drop"
		},
		"211": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.handledCount"
		},
		"212": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.handledCount"
		},
		"213": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.getInfo"
		},
		"214": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProvider.getInfo"
		},
		"223": {
			"sourceFileName": "../node_modules/@crawlee/src/storages.ts",
			"qualifiedName": "QueueOperationInfo"
		},
		"224": {
			"sourceFileName": "../node_modules/@crawlee/src/storages.ts",
			"qualifiedName": "QueueOperationInfo.wasAlreadyPresent"
		},
		"225": {
			"sourceFileName": "../node_modules/@crawlee/src/storages.ts",
			"qualifiedName": "QueueOperationInfo.wasAlreadyHandled"
		},
		"226": {
			"sourceFileName": "../node_modules/@crawlee/src/storages.ts",
			"qualifiedName": "QueueOperationInfo.requestId"
		},
		"227": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestQueueOperationOptions"
		},
		"228": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestQueueOperationOptions.forefront"
		},
		"230": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestQueueOptions"
		},
		"231": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProviderOptions.id"
		},
		"232": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProviderOptions.name"
		},
		"233": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProviderOptions.client"
		},
		"234": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/request_provider.ts",
			"qualifiedName": "RequestProviderOptions.proxyConfiguration"
		},
		"235": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyConsumer"
		},
		"236": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyConsumer"
		},
		"237": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "key"
		},
		"238": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "index"
		},
		"239": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "info"
		},
		"240": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "__type"
		},
		"241": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "__type.size"
		},
		"242": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStoreOptions"
		},
		"243": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStoreOptions.id"
		},
		"244": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStoreOptions.name"
		},
		"245": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStoreOptions.client"
		},
		"246": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStoreOptions.storageObject"
		},
		"247": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "RecordOptions"
		},
		"248": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "RecordOptions.contentType"
		},
		"249": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStoreIteratorOptions"
		},
		"250": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStoreIteratorOptions.exclusiveStartKey"
		},
		"251": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "log"
		},
		"252": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log"
		},
		"253": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.__constructor"
		},
		"254": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log"
		},
		"255": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "options"
		},
		"256": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.LEVELS"
		},
		"260": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.getLevel"
		},
		"261": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.getLevel"
		},
		"262": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.setLevel"
		},
		"263": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.setLevel"
		},
		"264": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "level"
		},
		"265": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.internal"
		},
		"266": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.internal"
		},
		"267": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "level"
		},
		"268": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "message"
		},
		"269": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "data"
		},
		"270": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "exception"
		},
		"271": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.setOptions"
		},
		"272": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.setOptions"
		},
		"273": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "options"
		},
		"274": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.getOptions"
		},
		"275": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.getOptions"
		},
		"276": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.child"
		},
		"277": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.child"
		},
		"278": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "options"
		},
		"279": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.error"
		},
		"280": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.error"
		},
		"281": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "message"
		},
		"282": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "data"
		},
		"283": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.exception"
		},
		"284": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.exception"
		},
		"285": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "exception"
		},
		"286": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "message"
		},
		"287": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "data"
		},
		"288": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.softFail"
		},
		"289": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.softFail"
		},
		"290": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "message"
		},
		"291": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "data"
		},
		"292": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.warning"
		},
		"293": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.warning"
		},
		"294": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "message"
		},
		"295": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "data"
		},
		"296": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.info"
		},
		"297": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.info"
		},
		"298": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "message"
		},
		"299": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "data"
		},
		"300": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.debug"
		},
		"301": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.debug"
		},
		"302": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "message"
		},
		"303": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "data"
		},
		"304": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.perf"
		},
		"305": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.perf"
		},
		"306": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "message"
		},
		"307": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "data"
		},
		"308": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.warningOnce"
		},
		"309": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.warningOnce"
		},
		"310": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "message"
		},
		"311": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.deprecated"
		},
		"312": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Log.deprecated"
		},
		"313": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "message"
		},
		"314": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LoggerOptions"
		},
		"315": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LoggerOptions.level"
		},
		"316": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LoggerOptions.maxDepth"
		},
		"317": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LoggerOptions.maxStringLength"
		},
		"318": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LoggerOptions.prefix"
		},
		"319": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LoggerOptions.suffix"
		},
		"320": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LoggerOptions.logger"
		},
		"321": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LoggerOptions.data"
		},
		"322": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LogLevel"
		},
		"323": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LogLevel.OFF"
		},
		"324": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LogLevel.ERROR"
		},
		"325": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LogLevel.SOFT_FAIL"
		},
		"326": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LogLevel.WARNING"
		},
		"327": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LogLevel.INFO"
		},
		"328": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LogLevel.DEBUG"
		},
		"329": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LogLevel.PERF"
		},
		"330": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger"
		},
		"331": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"332": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"333": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"334": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"335": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"336": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"337": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"338": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"339": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"340": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"341": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"342": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"343": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"344": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"345": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"346": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"347": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"348": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"349": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"350": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"351": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"352": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"353": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"354": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"355": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"356": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "name"
		},
		"357": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"358": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"359": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"360": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"361": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"362": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"363": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventTargets"
		},
		"364": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"365": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"366": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "signal"
		},
		"367": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "resource"
		},
		"368": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"369": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"370": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"371": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.errorMonitor"
		},
		"372": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.captureRejectionSymbol"
		},
		"373": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.captureRejections"
		},
		"374": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.defaultMaxListeners"
		},
		"375": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger.__constructor"
		},
		"376": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger"
		},
		"377": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "options"
		},
		"379": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger.setOptions"
		},
		"380": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger.setOptions"
		},
		"381": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "options"
		},
		"382": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger.getOptions"
		},
		"383": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger.getOptions"
		},
		"384": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger._outputWithConsole"
		},
		"385": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger._outputWithConsole"
		},
		"386": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "level"
		},
		"387": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "line"
		},
		"388": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger._log"
		},
		"389": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger._log"
		},
		"390": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "level"
		},
		"391": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "message"
		},
		"392": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "data"
		},
		"393": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "exception"
		},
		"394": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "opts"
		},
		"395": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger.log"
		},
		"396": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger.log"
		},
		"397": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "level"
		},
		"398": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "message"
		},
		"399": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "args"
		},
		"400": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.[captureRejectionSymbol]"
		},
		"401": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.[captureRejectionSymbol]"
		},
		"402": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"403": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "error"
		},
		"404": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"405": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"406": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"407": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"408": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"409": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"410": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"411": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"412": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"413": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"414": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.on"
		},
		"415": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.on"
		},
		"416": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"417": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"418": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"419": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"420": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"421": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"422": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.once"
		},
		"423": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.once"
		},
		"424": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"425": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"426": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"427": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"428": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"429": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"430": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"431": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"432": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"433": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"434": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"435": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"436": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"437": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"438": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.off"
		},
		"439": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.off"
		},
		"440": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"441": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"442": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"443": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"444": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"445": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"446": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeAllListeners"
		},
		"447": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeAllListeners"
		},
		"448": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"449": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"450": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"451": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"452": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"453": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"454": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"455": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"456": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"457": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"458": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"459": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"460": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"461": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"462": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.emit"
		},
		"463": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.emit"
		},
		"464": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"465": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"466": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"467": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"468": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"469": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"470": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"471": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"472": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"473": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"474": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"475": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"476": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"477": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"478": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"479": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"480": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"481": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"482": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"483": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"484": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"485": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"486": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"487": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"488": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"489": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"490": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LoggerJson"
		},
		"491": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"492": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"493": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"494": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"495": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"496": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"497": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"498": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"499": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"500": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"501": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"502": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"503": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"504": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"505": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"506": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"507": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"508": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"509": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"510": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"511": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"512": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"513": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"514": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"515": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"516": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "name"
		},
		"517": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"518": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"519": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"520": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"521": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"522": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"523": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventTargets"
		},
		"524": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"525": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"526": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "signal"
		},
		"527": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "resource"
		},
		"528": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"529": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"530": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"531": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.errorMonitor"
		},
		"532": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.captureRejectionSymbol"
		},
		"533": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.captureRejections"
		},
		"534": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.defaultMaxListeners"
		},
		"535": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LoggerJson.__constructor"
		},
		"536": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LoggerJson"
		},
		"537": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "options"
		},
		"538": {
			"sourceFileName": "",
			"qualifiedName": "__type"
		},
		"539": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LoggerJson._log"
		},
		"540": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LoggerJson._log"
		},
		"541": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "level"
		},
		"542": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "message"
		},
		"543": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "data"
		},
		"544": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "exception"
		},
		"545": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "opts"
		},
		"547": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger.setOptions"
		},
		"548": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger.setOptions"
		},
		"549": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "options"
		},
		"550": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger.getOptions"
		},
		"551": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger.getOptions"
		},
		"552": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger._outputWithConsole"
		},
		"553": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger._outputWithConsole"
		},
		"554": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "level"
		},
		"555": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "line"
		},
		"556": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger.log"
		},
		"557": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger.log"
		},
		"558": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "level"
		},
		"559": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "message"
		},
		"560": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "args"
		},
		"561": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.[captureRejectionSymbol]"
		},
		"562": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.[captureRejectionSymbol]"
		},
		"563": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"564": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "error"
		},
		"565": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"566": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"567": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"568": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"569": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"570": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"571": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"572": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"573": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"574": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"575": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.on"
		},
		"576": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.on"
		},
		"577": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"578": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"579": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"580": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"581": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"582": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"583": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.once"
		},
		"584": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.once"
		},
		"585": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"586": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"587": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"588": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"589": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"590": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"591": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"592": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"593": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"594": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"595": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"596": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"597": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"598": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"599": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.off"
		},
		"600": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.off"
		},
		"601": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"602": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"603": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"604": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"605": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"606": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"607": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeAllListeners"
		},
		"608": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeAllListeners"
		},
		"609": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"610": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"611": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"612": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"613": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"614": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"615": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"616": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"617": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"618": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"619": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"620": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"621": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"622": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"623": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.emit"
		},
		"624": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.emit"
		},
		"625": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"626": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"627": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"628": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"629": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"630": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"631": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"632": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"633": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"634": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"635": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"636": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"637": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"638": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"639": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"640": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"641": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"642": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"643": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"644": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"645": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"646": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"647": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"648": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"649": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"650": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"651": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LoggerText"
		},
		"652": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"653": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"654": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"655": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"656": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"657": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"658": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"659": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"660": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"661": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"662": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"663": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"664": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"665": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"666": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"667": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"668": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"669": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"670": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"671": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"672": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"673": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"674": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"675": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"676": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"677": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "name"
		},
		"678": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"679": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"680": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"681": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"682": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"683": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"684": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventTargets"
		},
		"685": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"686": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"687": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "signal"
		},
		"688": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "resource"
		},
		"689": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"690": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"691": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"692": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.errorMonitor"
		},
		"693": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.captureRejectionSymbol"
		},
		"694": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.captureRejections"
		},
		"695": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.defaultMaxListeners"
		},
		"696": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LoggerText.__constructor"
		},
		"697": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LoggerText"
		},
		"698": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "options"
		},
		"699": {
			"sourceFileName": "",
			"qualifiedName": "__type"
		},
		"700": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LoggerText._log"
		},
		"701": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "LoggerText._log"
		},
		"702": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "level"
		},
		"703": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "message"
		},
		"704": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "data"
		},
		"705": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "exception"
		},
		"706": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "opts"
		},
		"713": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger.setOptions"
		},
		"714": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger.setOptions"
		},
		"715": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "options"
		},
		"716": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger.getOptions"
		},
		"717": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger.getOptions"
		},
		"718": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger._outputWithConsole"
		},
		"719": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger._outputWithConsole"
		},
		"720": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "level"
		},
		"721": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "line"
		},
		"722": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger.log"
		},
		"723": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "Logger.log"
		},
		"724": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "level"
		},
		"725": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "message"
		},
		"726": {
			"sourceFileName": "../node_modules/@apify/log/cjs/index.d.ts",
			"qualifiedName": "args"
		},
		"727": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.[captureRejectionSymbol]"
		},
		"728": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.[captureRejectionSymbol]"
		},
		"729": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"730": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "error"
		},
		"731": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"732": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"733": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"734": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"735": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"736": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"737": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"738": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"739": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"740": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"741": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.on"
		},
		"742": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.on"
		},
		"743": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"744": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"745": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"746": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"747": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"748": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"749": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.once"
		},
		"750": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.once"
		},
		"751": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"752": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"753": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"754": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"755": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"756": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"757": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"758": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"759": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"760": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"761": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"762": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"763": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"764": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"765": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.off"
		},
		"766": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.off"
		},
		"767": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"768": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"769": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"770": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"771": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"772": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"773": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeAllListeners"
		},
		"774": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeAllListeners"
		},
		"775": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"776": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"777": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"778": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"779": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"780": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"781": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"782": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"783": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"784": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"785": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"786": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"787": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"788": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"789": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.emit"
		},
		"790": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.emit"
		},
		"791": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"792": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"793": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"794": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"795": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"796": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"797": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"798": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"799": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"800": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"801": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"802": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"803": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"804": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"805": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"806": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"807": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"808": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"809": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"810": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"811": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"812": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"813": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"814": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"815": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"816": {
			"sourceFileName": "../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"817": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient"
		},
		"818": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.__constructor"
		},
		"819": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient"
		},
		"820": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "options"
		},
		"821": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.baseUrl"
		},
		"822": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.token"
		},
		"823": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.stats"
		},
		"824": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.logger"
		},
		"825": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.httpClient"
		},
		"827": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.actors"
		},
		"828": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.actors"
		},
		"829": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.actor"
		},
		"830": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.actor"
		},
		"831": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "id"
		},
		"832": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.builds"
		},
		"833": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.builds"
		},
		"834": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.build"
		},
		"835": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.build"
		},
		"836": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "id"
		},
		"837": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.datasets"
		},
		"838": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.datasets"
		},
		"839": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.dataset"
		},
		"840": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.dataset"
		},
		"841": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "Data"
		},
		"842": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "id"
		},
		"843": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.keyValueStores"
		},
		"844": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.keyValueStores"
		},
		"845": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.keyValueStore"
		},
		"846": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.keyValueStore"
		},
		"847": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "id"
		},
		"848": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.log"
		},
		"849": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.log"
		},
		"850": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "buildOrRunId"
		},
		"851": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.requestQueues"
		},
		"852": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.requestQueues"
		},
		"853": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.requestQueue"
		},
		"854": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.requestQueue"
		},
		"855": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "id"
		},
		"856": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "options"
		},
		"857": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.runs"
		},
		"858": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.runs"
		},
		"859": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.run"
		},
		"860": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.run"
		},
		"861": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "id"
		},
		"862": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.tasks"
		},
		"863": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.tasks"
		},
		"864": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.task"
		},
		"865": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.task"
		},
		"866": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "id"
		},
		"867": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.schedules"
		},
		"868": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.schedules"
		},
		"869": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.schedule"
		},
		"870": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.schedule"
		},
		"871": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "id"
		},
		"872": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.user"
		},
		"873": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.user"
		},
		"874": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "id"
		},
		"875": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.webhooks"
		},
		"876": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.webhooks"
		},
		"877": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.webhook"
		},
		"878": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.webhook"
		},
		"879": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "id"
		},
		"880": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.webhookDispatches"
		},
		"881": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.webhookDispatches"
		},
		"882": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.webhookDispatch"
		},
		"883": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.webhookDispatch"
		},
		"884": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "id"
		},
		"885": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.store"
		},
		"886": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.store"
		},
		"887": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.setStatusMessage"
		},
		"888": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClient.setStatusMessage"
		},
		"889": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "message"
		},
		"890": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "options"
		},
		"891": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClientOptions"
		},
		"892": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClientOptions.baseUrl"
		},
		"893": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClientOptions.maxRetries"
		},
		"894": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClientOptions.minDelayBetweenRetriesMillis"
		},
		"895": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClientOptions.requestInterceptors"
		},
		"896": {
			"sourceFileName": "../node_modules/axios/index.d.ts",
			"qualifiedName": "__type"
		},
		"897": {
			"sourceFileName": "../node_modules/axios/index.d.ts",
			"qualifiedName": "__type"
		},
		"898": {
			"sourceFileName": "../node_modules/axios/index.d.ts",
			"qualifiedName": "value"
		},
		"899": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClientOptions.timeoutSecs"
		},
		"900": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClientOptions.token"
		},
		"901": {
			"sourceFileName": "../node_modules/apify-client/src/apify_client.ts",
			"qualifiedName": "ApifyClientOptions.userAgentSuffix"
		},
		"902": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor"
		},
		"904": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.useState"
		},
		"905": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.useState"
		},
		"906": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "State"
		},
		"907": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "name"
		},
		"908": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "defaultValue"
		},
		"909": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "options"
		},
		"910": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.main"
		},
		"911": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.main"
		},
		"912": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "T"
		},
		"913": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "userFunc"
		},
		"914": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "options"
		},
		"915": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.init"
		},
		"916": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.init"
		},
		"917": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "options"
		},
		"918": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.exit"
		},
		"919": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.exit"
		},
		"920": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "messageOrOptions"
		},
		"921": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "options"
		},
		"922": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.fail"
		},
		"923": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.fail"
		},
		"924": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "messageOrOptions"
		},
		"925": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "options"
		},
		"926": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.on"
		},
		"927": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.on"
		},
		"928": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "event"
		},
		"929": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "listener"
		},
		"930": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "__type"
		},
		"931": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "__type"
		},
		"932": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "args"
		},
		"933": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.off"
		},
		"934": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.off"
		},
		"935": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "event"
		},
		"936": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "listener"
		},
		"937": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "__type"
		},
		"938": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "__type"
		},
		"939": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "args"
		},
		"940": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.call"
		},
		"941": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.call"
		},
		"942": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "actorId"
		},
		"943": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "input"
		},
		"944": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "options"
		},
		"945": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.callTask"
		},
		"946": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.callTask"
		},
		"947": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "taskId"
		},
		"948": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "input"
		},
		"949": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "options"
		},
		"950": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.start"
		},
		"951": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.start"
		},
		"952": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "actorId"
		},
		"953": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "input"
		},
		"954": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "options"
		},
		"955": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.abort"
		},
		"956": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.abort"
		},
		"957": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "runId"
		},
		"958": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "options"
		},
		"959": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.metamorph"
		},
		"960": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.metamorph"
		},
		"961": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "targetActorId"
		},
		"962": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "input"
		},
		"963": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "options"
		},
		"964": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.reboot"
		},
		"965": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.reboot"
		},
		"966": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "options"
		},
		"967": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.addWebhook"
		},
		"968": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.addWebhook"
		},
		"969": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "options"
		},
		"970": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.setStatusMessage"
		},
		"971": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.setStatusMessage"
		},
		"972": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "statusMessage"
		},
		"973": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "options"
		},
		"974": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.pushData"
		},
		"975": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.pushData"
		},
		"976": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Data"
		},
		"977": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "item"
		},
		"978": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.pushData"
		},
		"979": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Data"
		},
		"980": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "item"
		},
		"981": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "eventName"
		},
		"982": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.openDataset"
		},
		"983": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.openDataset"
		},
		"984": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Data"
		},
		"985": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "datasetIdOrName"
		},
		"986": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "options"
		},
		"987": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.getValue"
		},
		"988": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.getValue"
		},
		"989": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "T"
		},
		"990": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "key"
		},
		"991": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.setValue"
		},
		"992": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.setValue"
		},
		"993": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "T"
		},
		"994": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "key"
		},
		"995": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "value"
		},
		"996": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "options"
		},
		"997": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.getInput"
		},
		"998": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.getInput"
		},
		"999": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "T"
		},
		"1000": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.getInputOrThrow"
		},
		"1001": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.getInputOrThrow"
		},
		"1002": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "T"
		},
		"1003": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.openKeyValueStore"
		},
		"1004": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.openKeyValueStore"
		},
		"1005": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "storeIdOrName"
		},
		"1006": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "options"
		},
		"1007": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.openRequestQueue"
		},
		"1008": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.openRequestQueue"
		},
		"1009": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "queueIdOrName"
		},
		"1010": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "options"
		},
		"1011": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.createProxyConfiguration"
		},
		"1012": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.createProxyConfiguration"
		},
		"1013": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "proxyConfigurationOptions"
		},
		"1014": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "__type"
		},
		"1015": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "__type.useApifyProxy"
		},
		"1016": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.charge"
		},
		"1017": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.charge"
		},
		"1018": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "options"
		},
		"1019": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.getChargingManager"
		},
		"1020": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.getChargingManager"
		},
		"1021": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.getEnv"
		},
		"1022": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.getEnv"
		},
		"1023": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.newClient"
		},
		"1024": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.newClient"
		},
		"1025": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "options"
		},
		"1026": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.isAtHome"
		},
		"1027": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.isAtHome"
		},
		"1028": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.apifyClient"
		},
		"1029": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.apifyClient"
		},
		"1030": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.config"
		},
		"1031": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.config"
		},
		"1034": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.__constructor"
		},
		"1035": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor"
		},
		"1036": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.Data"
		},
		"1037": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "options"
		},
		"1041": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.initialized"
		},
		"1132": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.getInputOrThrow"
		},
		"1133": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.getInputOrThrow"
		},
		"1134": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "T"
		},
		"1162": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.useState"
		},
		"1163": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.useState"
		},
		"1164": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "State"
		},
		"1165": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "name"
		},
		"1166": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "defaultValue"
		},
		"1167": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "options"
		},
		"1177": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "Actor.Data"
		},
		"1178": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "InitOptions"
		},
		"1179": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "InitOptions.storage"
		},
		"1180": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "MainOptions"
		},
		"1181": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ExitOptions.statusMessage"
		},
		"1182": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ExitOptions.timeoutSecs"
		},
		"1183": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ExitOptions.exitCode"
		},
		"1184": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ExitOptions.exit"
		},
		"1185": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "InitOptions.storage"
		},
		"1186": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv"
		},
		"1187": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.actorId"
		},
		"1188": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.actorRunId"
		},
		"1189": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.actorTaskId"
		},
		"1190": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.actorBuildId"
		},
		"1191": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.userId"
		},
		"1192": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.token"
		},
		"1193": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.startedAt"
		},
		"1194": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.timeoutAt"
		},
		"1195": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.defaultKeyValueStoreId"
		},
		"1196": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.defaultDatasetId"
		},
		"1197": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.memoryMbytes"
		},
		"1198": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.headless"
		},
		"1199": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.isAtHome"
		},
		"1200": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.proxyPassword"
		},
		"1201": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.proxyHostname"
		},
		"1202": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.proxyPort"
		},
		"1203": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.proxyStatusUrl"
		},
		"1204": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.apiBaseUrl"
		},
		"1205": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.apiPublicBaseUrl"
		},
		"1206": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.chromeExecutablePath"
		},
		"1207": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.dedicatedCpus"
		},
		"1208": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.disableOutdatedWarning"
		},
		"1209": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.fact"
		},
		"1210": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.inputSecretsPrivateKeyFile"
		},
		"1211": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.inputSecretsPrivateKeyPassphrase"
		},
		"1212": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.localStorageDir"
		},
		"1213": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.logLevel"
		},
		"1214": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.logFormat"
		},
		"1215": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.metaOrigin"
		},
		"1216": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.inputKey"
		},
		"1217": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.sdkLatestVersion"
		},
		"1218": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.systemInfoIntervalMillis"
		},
		"1219": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.workflowKey"
		},
		"1220": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.actorBuildNumber"
		},
		"1221": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.actorEventsWsUrl"
		},
		"1222": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.actorMaxPaidDatasetItems"
		},
		"1223": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.containerPort"
		},
		"1224": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.containerUrl"
		},
		"1225": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ApifyEnv.defaultRequestQueueId"
		},
		"1226": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "UserFunc"
		},
		"1227": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "__type"
		},
		"1228": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "__type"
		},
		"1229": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "T"
		},
		"1230": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "CallOptions"
		},
		"1231": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "CallOptions.token"
		},
		"1232": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorCallOptions.waitSecs"
		},
		"1233": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "build"
		},
		"1234": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "contentType"
		},
		"1235": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "memory"
		},
		"1236": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "timeout"
		},
		"1237": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "webhooks"
		},
		"1238": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "maxItems"
		},
		"1239": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "CallTaskOptions"
		},
		"1240": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "CallTaskOptions.token"
		},
		"1241": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/task.ts",
			"qualifiedName": "TaskCallOptions.waitSecs"
		},
		"1242": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "build"
		},
		"1243": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "memory"
		},
		"1244": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "timeout"
		},
		"1245": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "webhooks"
		},
		"1246": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "maxItems"
		},
		"1247": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "AbortOptions"
		},
		"1248": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "AbortOptions.token"
		},
		"1249": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "AbortOptions.statusMessage"
		},
		"1250": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/run.ts",
			"qualifiedName": "RunAbortOptions.gracefully"
		},
		"1251": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "WebhookOptions"
		},
		"1252": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "WebhookOptions.eventTypes"
		},
		"1253": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "WebhookOptions.requestUrl"
		},
		"1254": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "WebhookOptions.payloadTemplate"
		},
		"1255": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "WebhookOptions.idempotencyKey"
		},
		"1256": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "MetamorphOptions"
		},
		"1257": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "MetamorphOptions.contentType"
		},
		"1258": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "MetamorphOptions.build"
		},
		"1260": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "RebootOptions"
		},
		"1262": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ExitOptions"
		},
		"1263": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ExitOptions.statusMessage"
		},
		"1264": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ExitOptions.timeoutSecs"
		},
		"1265": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ExitOptions.exitCode"
		},
		"1266": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "ExitOptions.exit"
		},
		"1267": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "OpenStorageOptions"
		},
		"1268": {
			"sourceFileName": "../packages/apify/src/actor.ts",
			"qualifiedName": "OpenStorageOptions.forceCloud"
		},
		"1269": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRun"
		},
		"1270": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRun.userId"
		},
		"1271": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRun.statusMessage"
		},
		"1272": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRun.stats"
		},
		"1273": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRun.options"
		},
		"1274": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRun.exitCode"
		},
		"1275": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRun.containerUrl"
		},
		"1276": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRun.isContainerServerReady"
		},
		"1277": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRun.gitBranchName"
		},
		"1278": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRun.usage"
		},
		"1279": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRun.usageUsd"
		},
		"1280": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRun.pricingInfo"
		},
		"1281": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRun.chargedEventCounts"
		},
		"1282": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRunListItem.id"
		},
		"1283": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRunListItem.actId"
		},
		"1284": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRunListItem.actorTaskId"
		},
		"1285": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRunListItem.startedAt"
		},
		"1286": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRunListItem.finishedAt"
		},
		"1287": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRunListItem.status"
		},
		"1288": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRunListItem.meta"
		},
		"1289": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRunListItem.buildId"
		},
		"1290": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRunListItem.buildNumber"
		},
		"1291": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRunListItem.defaultKeyValueStoreId"
		},
		"1292": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRunListItem.defaultDatasetId"
		},
		"1293": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRunListItem.defaultRequestQueueId"
		},
		"1294": {
			"sourceFileName": "../node_modules/apify-client/src/resource_clients/actor.ts",
			"qualifiedName": "ActorRunListItem.usageTotalUsd"
		},
		"1300": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ChargingManager"
		},
		"1301": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ChargingManager.__constructor"
		},
		"1302": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ChargingManager"
		},
		"1303": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "configuration"
		},
		"1304": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "apifyClient"
		},
		"1323": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ChargingManager.init"
		},
		"1324": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ChargingManager.init"
		},
		"1327": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ChargingManager.getPricingInfo"
		},
		"1328": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ChargingManager.getPricingInfo"
		},
		"1329": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ChargingManager.charge"
		},
		"1330": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ChargingManager.charge"
		},
		"1331": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "__0"
		},
		"1332": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ChargingManager.getChargedEventCount"
		},
		"1333": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ChargingManager.getChargedEventCount"
		},
		"1334": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "eventName"
		},
		"1335": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ChargingManager.getMaxTotalChargeUsd"
		},
		"1336": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ChargingManager.getMaxTotalChargeUsd"
		},
		"1339": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ChargingManager.calculateMaxEventChargeCountWithinLimit"
		},
		"1340": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ChargingManager.calculateMaxEventChargeCountWithinLimit"
		},
		"1341": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "eventName"
		},
		"1342": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ChargeOptions"
		},
		"1343": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ChargeOptions.eventName"
		},
		"1344": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ChargeOptions.count"
		},
		"1345": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ChargeResult"
		},
		"1346": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ChargeResult.eventChargeLimitReached"
		},
		"1347": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ChargeResult.chargedCount"
		},
		"1348": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ChargeResult.chargeableWithinLimit"
		},
		"1349": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ActorPricingInfo"
		},
		"1350": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ActorPricingInfo.pricingModel"
		},
		"1351": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ActorPricingInfo.maxTotalChargeUsd"
		},
		"1352": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ActorPricingInfo.isPayPerEvent"
		},
		"1353": {
			"sourceFileName": "../packages/apify/src/charging.ts",
			"qualifiedName": "ActorPricingInfo.perEventPrices"
		},
		"1354": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions"
		},
		"1355": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.metamorphAfterSleepMillis"
		},
		"1356": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.actorEventsWsUrl"
		},
		"1357": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.token"
		},
		"1358": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.actorId"
		},
		"1359": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.actorRunId"
		},
		"1360": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.actorTaskId"
		},
		"1361": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.apiBaseUrl"
		},
		"1362": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.apiPublicBaseUrl"
		},
		"1363": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.containerPort"
		},
		"1364": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.containerUrl"
		},
		"1365": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.proxyHostname"
		},
		"1366": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.proxyPassword"
		},
		"1367": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.proxyPort"
		},
		"1368": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.proxyStatusUrl"
		},
		"1369": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.standbyPort"
		},
		"1370": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.standbyUrl"
		},
		"1371": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.isAtHome"
		},
		"1372": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.userId"
		},
		"1373": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.inputSecretsPrivateKeyPassphrase"
		},
		"1374": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.inputSecretsPrivateKeyFile"
		},
		"1375": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.maxTotalChargeUsd"
		},
		"1376": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.metaOrigin"
		},
		"1377": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.testPayPerEvent"
		},
		"1378": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.useChargingLogDataset"
		},
		"1379": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.storageClient"
		},
		"1380": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.eventManager"
		},
		"1381": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.storageClientOptions"
		},
		"1382": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.defaultDatasetId"
		},
		"1383": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.purgeOnStart"
		},
		"1384": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.defaultKeyValueStoreId"
		},
		"1385": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.defaultRequestQueueId"
		},
		"1386": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.maxUsedCpuRatio"
		},
		"1387": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.availableMemoryRatio"
		},
		"1388": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.memoryMbytes"
		},
		"1389": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.persistStateIntervalMillis"
		},
		"1390": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.systemInfoIntervalMillis"
		},
		"1391": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.inputKey"
		},
		"1392": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.headless"
		},
		"1393": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.xvfb"
		},
		"1394": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.chromeExecutablePath"
		},
		"1395": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.defaultBrowserPath"
		},
		"1396": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.disableBrowserSandbox"
		},
		"1397": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.logLevel"
		},
		"1398": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.toString"
		},
		"1399": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.toString"
		},
		"1400": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "radix"
		},
		"1401": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.toFixed"
		},
		"1402": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.toFixed"
		},
		"1403": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "fractionDigits"
		},
		"1404": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.toExponential"
		},
		"1405": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.toExponential"
		},
		"1406": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "fractionDigits"
		},
		"1407": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.toPrecision"
		},
		"1408": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.toPrecision"
		},
		"1409": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "precision"
		},
		"1410": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.valueOf"
		},
		"1411": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.valueOf"
		},
		"1412": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.toLocaleString"
		},
		"1413": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.toLocaleString"
		},
		"1414": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "locales"
		},
		"1415": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "options"
		},
		"1416": {
			"sourceFileName": "node_modules/typescript/lib/lib.es2020.number.d.ts",
			"qualifiedName": "Number.toLocaleString"
		},
		"1417": {
			"sourceFileName": "node_modules/typescript/lib/lib.es2020.number.d.ts",
			"qualifiedName": "locales"
		},
		"1418": {
			"sourceFileName": "node_modules/typescript/lib/lib.es2020.number.d.ts",
			"qualifiedName": "options"
		},
		"1419": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.persistStorage"
		},
		"1420": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.systemInfoV2"
		},
		"1421": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "ConfigurationOptions.containerized"
		},
		"1422": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "Configuration"
		},
		"1423": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "Configuration.globalConfig"
		},
		"1495": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "Configuration.getGlobalConfig"
		},
		"1496": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "Configuration.getGlobalConfig"
		},
		"1497": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "Configuration.resetGlobalState"
		},
		"1498": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "Configuration.resetGlobalState"
		},
		"1501": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "Configuration.set"
		},
		"1502": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "Configuration.set"
		},
		"1503": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "key"
		},
		"1504": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "value"
		},
		"1505": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "Configuration.useStorageClient"
		},
		"1506": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "Configuration.useStorageClient"
		},
		"1507": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "client"
		},
		"1508": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "Configuration.getStorageClient"
		},
		"1509": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "Configuration.getStorageClient"
		},
		"1510": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "Configuration.getEventManager"
		},
		"1511": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "Configuration.getEventManager"
		},
		"1512": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "Configuration.__constructor"
		},
		"1513": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "Configuration"
		},
		"1514": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "options"
		},
		"1515": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "Configuration.get"
		},
		"1516": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "Configuration.get"
		},
		"1517": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "T"
		},
		"1518": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "U"
		},
		"1519": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.toString"
		},
		"1520": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.toString"
		},
		"1521": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "radix"
		},
		"1522": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.toFixed"
		},
		"1523": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.toFixed"
		},
		"1524": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "fractionDigits"
		},
		"1525": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.toExponential"
		},
		"1526": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.toExponential"
		},
		"1527": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "fractionDigits"
		},
		"1528": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.toPrecision"
		},
		"1529": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.toPrecision"
		},
		"1530": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "precision"
		},
		"1531": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.valueOf"
		},
		"1532": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.valueOf"
		},
		"1533": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.toLocaleString"
		},
		"1534": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Number.toLocaleString"
		},
		"1535": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "locales"
		},
		"1536": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "options"
		},
		"1537": {
			"sourceFileName": "node_modules/typescript/lib/lib.es2020.number.d.ts",
			"qualifiedName": "Number.toLocaleString"
		},
		"1538": {
			"sourceFileName": "node_modules/typescript/lib/lib.es2020.number.d.ts",
			"qualifiedName": "locales"
		},
		"1539": {
			"sourceFileName": "node_modules/typescript/lib/lib.es2020.number.d.ts",
			"qualifiedName": "options"
		},
		"1540": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "key"
		},
		"1541": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "defaultValue"
		},
		"1542": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "Configuration.set"
		},
		"1543": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "Configuration.set"
		},
		"1544": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "key"
		},
		"1545": {
			"sourceFileName": "../packages/apify/src/configuration.ts",
			"qualifiedName": "value"
		},
		"1569": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "Configuration.storageManagers"
		},
		"1576": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "Configuration.getEventManager"
		},
		"1577": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "Configuration.getEventManager"
		},
		"1581": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "Configuration.useStorageClient"
		},
		"1582": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "Configuration.useStorageClient"
		},
		"1583": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "client"
		},
		"1584": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "Configuration.useEventManager"
		},
		"1585": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "Configuration.useEventManager"
		},
		"1586": {
			"sourceFileName": "../node_modules/@crawlee/src/configuration.ts",
			"qualifiedName": "events"
		},
		"1590": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "ProxyConfigurationOptions"
		},
		"1591": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "ProxyConfigurationOptions.password"
		},
		"1592": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "ProxyConfigurationOptions.groups"
		},
		"1593": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "ProxyConfigurationOptions.countryCode"
		},
		"1594": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "ProxyConfigurationOptions.apifyProxyGroups"
		},
		"1595": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "ProxyConfigurationOptions.apifyProxyCountry"
		},
		"1596": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "ProxyConfigurationOptions.tieredProxyConfig"
		},
		"1597": {
			"sourceFileName": "../node_modules/@crawlee/src/proxy_configuration.ts",
			"qualifiedName": "ProxyConfigurationOptions.proxyUrls"
		},
		"1598": {
			"sourceFileName": "../node_modules/@crawlee/src/proxy_configuration.ts",
			"qualifiedName": "ProxyConfigurationOptions.newUrlFunction"
		},
		"1599": {
			"sourceFileName": "../node_modules/@crawlee/src/proxy_configuration.ts",
			"qualifiedName": "ProxyConfigurationOptions.tieredProxyUrls"
		},
		"1600": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "ProxyInfo"
		},
		"1601": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "ProxyInfo.groups"
		},
		"1602": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "ProxyInfo.countryCode"
		},
		"1603": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "ProxyInfo.password"
		},
		"1604": {
			"sourceFileName": "../node_modules/@crawlee/src/proxy_configuration.ts",
			"qualifiedName": "ProxyInfo.sessionId"
		},
		"1605": {
			"sourceFileName": "../node_modules/@crawlee/src/proxy_configuration.ts",
			"qualifiedName": "ProxyInfo.url"
		},
		"1606": {
			"sourceFileName": "../node_modules/@crawlee/src/proxy_configuration.ts",
			"qualifiedName": "ProxyInfo.username"
		},
		"1607": {
			"sourceFileName": "../node_modules/@crawlee/src/proxy_configuration.ts",
			"qualifiedName": "ProxyInfo.hostname"
		},
		"1608": {
			"sourceFileName": "../node_modules/@crawlee/src/proxy_configuration.ts",
			"qualifiedName": "ProxyInfo.port"
		},
		"1609": {
			"sourceFileName": "../node_modules/@crawlee/src/proxy_configuration.ts",
			"qualifiedName": "ProxyInfo.proxyTier"
		},
		"1610": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "ProxyConfiguration"
		},
		"1621": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "ProxyConfiguration.config"
		},
		"1622": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "ProxyConfiguration.initialize"
		},
		"1623": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "ProxyConfiguration.initialize"
		},
		"1624": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "ProxyConfiguration.newProxyInfo"
		},
		"1625": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "ProxyConfiguration.newProxyInfo"
		},
		"1626": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "sessionId"
		},
		"1627": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "options"
		},
		"1628": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "ProxyConfiguration.newUrl"
		},
		"1629": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "ProxyConfiguration.newUrl"
		},
		"1630": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "sessionId"
		},
		"1631": {
			"sourceFileName": "../packages/apify/src/proxy_configuration.ts",
			"qualifiedName": "options"
		},
		"1654": {
			"sourceFileName": "../node_modules/@crawlee/src/proxy_configuration.ts",
			"qualifiedName": "ProxyConfiguration.isManInTheMiddle"
		},
		"1685": {
			"sourceFileName": "../packages/apify/src/platform_event_manager.ts",
			"qualifiedName": "PlatformEventManager"
		},
		"1686": {
			"sourceFileName": "../packages/apify/src/platform_event_manager.ts",
			"qualifiedName": "PlatformEventManager.__constructor"
		},
		"1687": {
			"sourceFileName": "../packages/apify/src/platform_event_manager.ts",
			"qualifiedName": "PlatformEventManager"
		},
		"1688": {
			"sourceFileName": "../packages/apify/src/platform_event_manager.ts",
			"qualifiedName": "config"
		},
		"1690": {
			"sourceFileName": "../packages/apify/src/platform_event_manager.ts",
			"qualifiedName": "PlatformEventManager.config"
		},
		"1691": {
			"sourceFileName": "../packages/apify/src/platform_event_manager.ts",
			"qualifiedName": "PlatformEventManager.init"
		},
		"1692": {
			"sourceFileName": "../packages/apify/src/platform_event_manager.ts",
			"qualifiedName": "PlatformEventManager.init"
		},
		"1696": {
			"sourceFileName": "../packages/apify/src/platform_event_manager.ts",
			"qualifiedName": "PlatformEventManager.close"
		},
		"1697": {
			"sourceFileName": "../packages/apify/src/platform_event_manager.ts",
			"qualifiedName": "PlatformEventManager.close"
		},
		"1703": {
			"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
			"qualifiedName": "EventManager.on"
		},
		"1704": {
			"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
			"qualifiedName": "EventManager.on"
		},
		"1705": {
			"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
			"qualifiedName": "event"
		},
		"1706": {
			"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
			"qualifiedName": "listener"
		},
		"1707": {
			"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
			"qualifiedName": "__type"
		},
		"1708": {
			"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
			"qualifiedName": "__type"
		},
		"1709": {
			"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
			"qualifiedName": "args"
		},
		"1710": {
			"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
			"qualifiedName": "EventManager.off"
		},
		"1711": {
			"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
			"qualifiedName": "EventManager.off"
		},
		"1712": {
			"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
			"qualifiedName": "event"
		},
		"1713": {
			"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
			"qualifiedName": "listener"
		},
		"1714": {
			"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
			"qualifiedName": "__type"
		},
		"1715": {
			"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
			"qualifiedName": "__type"
		},
		"1716": {
			"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
			"qualifiedName": "args"
		},
		"1717": {
			"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
			"qualifiedName": "EventManager.emit"
		},
		"1718": {
			"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
			"qualifiedName": "EventManager.emit"
		},
		"1719": {
			"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
			"qualifiedName": "event"
		},
		"1720": {
			"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
			"qualifiedName": "args"
		},
		"1721": {
			"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
			"qualifiedName": "EventManager.isInitialized"
		},
		"1722": {
			"sourceFileName": "../node_modules/@crawlee/src/events/event_manager.ts",
			"qualifiedName": "EventManager.isInitialized"
		},
		"1733": {
			"sourceFileName": "../packages/apify/src/key_value_store.ts",
			"qualifiedName": "KeyValueStore"
		},
		"1734": {
			"sourceFileName": "../packages/apify/src/key_value_store.ts",
			"qualifiedName": "KeyValueStore.open"
		},
		"1735": {
			"sourceFileName": "../packages/apify/src/key_value_store.ts",
			"qualifiedName": "KeyValueStore.open"
		},
		"1736": {
			"sourceFileName": "../packages/apify/src/key_value_store.ts",
			"qualifiedName": "storeIdOrName"
		},
		"1737": {
			"sourceFileName": "../packages/apify/src/key_value_store.ts",
			"qualifiedName": "options"
		},
		"1746": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStore.recordExists"
		},
		"1747": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStore.recordExists"
		},
		"1748": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "key"
		},
		"1749": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStore.getAutoSavedValue"
		},
		"1750": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStore.getAutoSavedValue"
		},
		"1751": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "T"
		},
		"1752": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "key"
		},
		"1753": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "defaultValue"
		},
		"1767": {
			"sourceFileName": "../packages/apify/src/key_value_store.ts",
			"qualifiedName": "KeyValueStore.getPublicUrl"
		},
		"1768": {
			"sourceFileName": "../packages/apify/src/key_value_store.ts",
			"qualifiedName": "KeyValueStore.getPublicUrl"
		},
		"1769": {
			"sourceFileName": "../packages/apify/src/key_value_store.ts",
			"qualifiedName": "key"
		},
		"1770": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStore.config"
		},
		"1771": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStore.id"
		},
		"1772": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStore.name"
		},
		"1773": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStore.storageObject"
		},
		"1774": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStore.getValue"
		},
		"1775": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStore.getValue"
		},
		"1776": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "T"
		},
		"1777": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "key"
		},
		"1778": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStore.getValue"
		},
		"1779": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "T"
		},
		"1780": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "key"
		},
		"1781": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "defaultValue"
		},
		"1782": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStore.recordExists"
		},
		"1783": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStore.recordExists"
		},
		"1784": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "key"
		},
		"1785": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStore.getAutoSavedValue"
		},
		"1786": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStore.getAutoSavedValue"
		},
		"1787": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "T"
		},
		"1788": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "key"
		},
		"1789": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "defaultValue"
		},
		"1790": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStore.setValue"
		},
		"1791": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStore.setValue"
		},
		"1792": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "T"
		},
		"1793": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "key"
		},
		"1794": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "value"
		},
		"1795": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "options"
		},
		"1796": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStore.drop"
		},
		"1797": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStore.drop"
		},
		"1800": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStore.forEachKey"
		},
		"1801": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "KeyValueStore.forEachKey"
		},
		"1802": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "iteratee"
		},
		"1803": {
			"sourceFileName": "../node_modules/@crawlee/src/storages/key_value_store.ts",
			"qualifiedName": "options"
		}
	},
	"files": {
		"entries": {
			"1": "../packages/apify/src/index.ts"
		},
		"reflections": {
			"1": 0
		}
	}
}
