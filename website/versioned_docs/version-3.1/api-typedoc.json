{
	"id": 0,
	"name": "apify",
	"kind": 1,
	"kindString": "Project",
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 314,
			"name": "LogLevel",
			"kind": 8,
			"kindString": "Enumeration",
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 320,
					"name": "DEBUG",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log_consts.d.ts",
							"line": 7,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": 5
					}
				},
				{
					"id": 316,
					"name": "ERROR",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log_consts.d.ts",
							"line": 3,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": 1
					}
				},
				{
					"id": 319,
					"name": "INFO",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log_consts.d.ts",
							"line": 6,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": 4
					}
				},
				{
					"id": 315,
					"name": "OFF",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log_consts.d.ts",
							"line": 2,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": 0
					}
				},
				{
					"id": 321,
					"name": "PERF",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log_consts.d.ts",
							"line": 8,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": 6
					}
				},
				{
					"id": 317,
					"name": "SOFT_FAIL",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log_consts.d.ts",
							"line": 4,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": 2
					}
				},
				{
					"id": 318,
					"name": "WARNING",
					"kind": 16,
					"kindString": "Enumeration Member",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log_consts.d.ts",
							"line": 5,
							"character": 4
						}
					],
					"type": {
						"type": "literal",
						"value": 3
					}
				}
			],
			"groups": [
				{
					"title": "Enumeration Members",
					"children": [
						320,
						316,
						319,
						315,
						321,
						317,
						318
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@apify/log/log_consts.d.ts",
					"line": 1,
					"character": 20
				}
			]
		},
		{
			"id": 792,
			"name": "Actor",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "code",
						"text": "`Actor`"
					},
					{
						"kind": "text",
						"text": " class serves as an alternative approach to the static helpers exported from the package. It allows to pass configuration\nthat will be used on the instance methods. Environment variables will have precedence over this configuration.\nSee "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "Configuration"
					},
					{
						"kind": "text",
						"text": " for details about what can be configured and what are the default values."
					}
				]
			},
			"children": [
				{
					"id": 914,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 82,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L82"
						}
					],
					"signatures": [
						{
							"id": 915,
							"name": "new Actor",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 916,
									"name": "Data",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"parameters": [
								{
									"id": 917,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ConfigurationOptions",
										"qualifiedName": "ConfigurationOptions",
										"package": "@crawlee/core"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"id": 792,
								"typeArguments": [
									{
										"type": "reference",
										"id": 916,
										"name": "Data"
									}
								],
								"name": "Actor"
							}
						}
					]
				},
				{
					"id": 921,
					"name": "initialized",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether the Actor instance was initialized. This is set by calling "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "Actor.init"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 74,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L74"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 908,
					"name": "apifyClient",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1471,
							"character": 15,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1471"
						}
					],
					"getSignature": {
						"id": 909,
						"name": "apifyClient",
						"kind": 524288,
						"kindString": "Get signature",
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Default "
								},
								{
									"kind": "inline-tag",
									"tag": "@apilink",
									"text": "ApifyClient"
								},
								{
									"kind": "text",
									"text": " instance."
								}
							]
						},
						"type": {
							"type": "reference",
							"id": 714,
							"name": "ApifyClient",
							"qualifiedName": "ApifyClient",
							"package": "apify-client"
						}
					}
				},
				{
					"id": 910,
					"name": "config",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1476,
							"character": 15,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1476"
						}
					],
					"getSignature": {
						"id": 911,
						"name": "config",
						"kind": 524288,
						"kindString": "Get signature",
						"flags": {},
						"comment": {
							"summary": [
								{
									"kind": "text",
									"text": "Default "
								},
								{
									"kind": "inline-tag",
									"tag": "@apilink",
									"text": "Configuration"
								},
								{
									"kind": "text",
									"text": " instance."
								}
							]
						},
						"type": {
							"type": "reference",
							"id": 1193,
							"name": "Configuration"
						}
					}
				},
				{
					"id": 1006,
					"name": "getInputOrThrow",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 729,
							"character": 10,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L729"
						}
					],
					"signatures": [
						{
							"id": 1007,
							"name": "getInputOrThrow",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets the Actor input value just like the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.getInput"
									},
									{
										"kind": "text",
										"text": " method,\nbut throws if it is not found."
									}
								]
							},
							"typeParameter": [
								{
									"id": 1008,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Dictionary",
												"qualifiedName": "Dictionary",
												"package": "@crawlee/types"
											},
											{
												"type": "reference",
												"name": "Buffer",
												"qualifiedName": "global.Buffer",
												"package": "@types/node"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1008,
										"name": "T"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1031,
					"name": "useState",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 932,
							"character": 10,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L932"
						}
					],
					"signatures": [
						{
							"id": 1032,
							"name": "useState",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Easily create and manage state values. All state values are automatically persisted.\n\nValues can be modified by simply using the assignment operator."
									}
								]
							},
							"typeParameter": [
								{
									"id": 1033,
									"name": "State",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"parameters": [
								{
									"id": 1034,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the store to use."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1035,
									"name": "defaultValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If the store does not yet have a value in it, the value will be initialized with the "
											},
											{
												"kind": "code",
												"text": "`defaultValue`"
											},
											{
												"kind": "text",
												"text": " you provide."
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 1033,
										"name": "State"
									},
									"defaultValue": "..."
								},
								{
									"id": 1036,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An optional object parameter where a custom "
											},
											{
												"kind": "code",
												"text": "`keyValueStoreName`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " can be passed in."
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "UseStateOptions",
										"qualifiedName": "UseStateOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1033,
										"name": "State"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 845,
					"name": "abort",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1153,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1153"
						}
					],
					"signatures": [
						{
							"id": 846,
							"name": "abort",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Aborts given Actor run on the Apify platform using the current user account (determined by the "
									},
									{
										"kind": "code",
										"text": "`APIFY_TOKEN`"
									},
									{
										"kind": "text",
										"text": " environment variable).\n\nThe result of the function is an "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "ActorRun"
									},
									{
										"kind": "text",
										"text": " object that contains details about the Actor run.\n\nFor more information about Actors, read the\n[documentation](https://docs.apify.com/actor).\n\n**Example usage:**\n\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst run = await Actor.abort(runId);\n```"
									}
								]
							},
							"parameters": [
								{
									"id": 847,
									"name": "runId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 848,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1087,
										"name": "AbortOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1107,
										"name": "ActorRun",
										"qualifiedName": "ActorRun",
										"package": "apify-client"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 856,
					"name": "addWebhook",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1193,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1193"
						}
					],
					"signatures": [
						{
							"id": 857,
							"name": "addWebhook",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates an ad-hoc webhook for the current Actor run, which lets you receive a notification when the Actor run finished or failed.\nFor more information about Apify Actor webhooks, please see the [documentation](https://docs.apify.com/webhooks).\n\nNote that webhooks are only supported for Actors running on the Apify platform.\nIn local environment, the function will print a warning and have no effect."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The return value is the Webhook object.\nFor more information, see the [Get webhook](https://apify.com/docs/api/v2#/reference/webhooks/webhook-object/get-webhook) API endpoint."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 858,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1091,
										"name": "WebhookOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"name": "Webhook",
												"qualifiedName": "Webhook",
												"package": "apify-client"
											}
										]
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 830,
					"name": "call",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1079,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1079"
						}
					],
					"signatures": [
						{
							"id": 831,
							"name": "call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Runs an Actor on the Apify platform using the current user account (determined by the "
									},
									{
										"kind": "code",
										"text": "`APIFY_TOKEN`"
									},
									{
										"kind": "text",
										"text": " environment variable).\n\nThe result of the function is an "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "ActorRun"
									},
									{
										"kind": "text",
										"text": " object that contains details about the Actor run.\n\nIf you want to run an Actor task rather than an Actor, please use the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.callTask"
									},
									{
										"kind": "text",
										"text": " function instead.\n\nFor more information about Actors, read the [documentation](https://docs.apify.com/actor).\n\n**Example usage:**\n\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst run = await Actor.call('apify/hello-world', { myInput: 123 });\n```"
									}
								]
							},
							"parameters": [
								{
									"id": 832,
									"name": "actorId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Allowed formats are "
											},
											{
												"kind": "code",
												"text": "`username/actor-name`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`userId/actor-name`"
											},
											{
												"kind": "text",
												"text": " or Actor ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 833,
									"name": "input",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Input for the Actor. If it is an object, it will be stringified to\n JSON and its content type set to "
											},
											{
												"kind": "code",
												"text": "`application/json; charset=utf-8`"
											},
											{
												"kind": "text",
												"text": ".\n Otherwise the "
											},
											{
												"kind": "code",
												"text": "`options.contentType`"
											},
											{
												"kind": "text",
												"text": " parameter must be provided."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								},
								{
									"id": 834,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 1070,
										"name": "CallOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1107,
										"name": "ActorRun",
										"qualifiedName": "ActorRun",
										"package": "apify-client"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 835,
					"name": "callTask",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1108,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1108"
						}
					],
					"signatures": [
						{
							"id": 836,
							"name": "callTask",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Runs an Actor task on the Apify platform using the current user account (determined by the "
									},
									{
										"kind": "code",
										"text": "`APIFY_TOKEN`"
									},
									{
										"kind": "text",
										"text": " environment variable).\n\nThe result of the function is an "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "ActorRun"
									},
									{
										"kind": "text",
										"text": " object that contains details about the Actor run.\n\nNote that an Actor task is a saved input configuration and options for an Actor.\nIf you want to run an Actor directly rather than an Actor task, please use the\n"
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.call"
									},
									{
										"kind": "text",
										"text": " function instead.\n\nFor more information about Actor tasks, read the [documentation](https://docs.apify.com/tasks).\n\n**Example usage:**\n\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst run = await Actor.callTask('bob/some-task');\n```"
									}
								]
							},
							"parameters": [
								{
									"id": 837,
									"name": "taskId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Allowed formats are "
											},
											{
												"kind": "code",
												"text": "`username/task-name`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`userId/task-name`"
											},
											{
												"kind": "text",
												"text": " or task ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 838,
									"name": "input",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Input overrides for the Actor task. If it is an object, it will be stringified to\n JSON and its content type set to "
											},
											{
												"kind": "code",
												"text": "`application/json; charset=utf-8`"
											},
											{
												"kind": "text",
												"text": ".\n Provided input will be merged with Actor task input."
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									}
								},
								{
									"id": 839,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 1079,
										"name": "CallTaskOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1107,
										"name": "ActorRun",
										"qualifiedName": "ActorRun",
										"package": "apify-client"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 896,
					"name": "createProxyConfiguration",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1435,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1435"
						}
					],
					"signatures": [
						{
							"id": 897,
							"name": "createProxyConfiguration",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a proxy configuration and returns a promise resolving to an instance\nof the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "ProxyConfiguration"
									},
									{
										"kind": "text",
										"text": " class that is already initialized.\n\nConfigures connection to a proxy server with the provided options. Proxy servers are used to prevent target websites from blocking\nyour crawlers based on IP address rate limits or blacklists. Setting proxy configuration in your crawlers automatically configures\nthem to use the selected proxies for all connections.\n\nFor more details and code examples, see the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "ProxyConfiguration"
									},
									{
										"kind": "text",
										"text": " class.\n\n"
									},
									{
										"kind": "code",
										"text": "```javascript\n\n// Returns initialized proxy configuration class\nconst proxyConfiguration = await Actor.createProxyConfiguration({\n    groups: ['GROUP1', 'GROUP2'] // List of Apify proxy groups\n    countryCode: 'US'\n});\n\nconst crawler = new CheerioCrawler({\n  // ...\n  proxyConfiguration,\n  requestHandler({ proxyInfo }) {\n      const usedProxyUrl = proxyInfo.url; // Getting the proxy URL\n  }\n})\n\n```"
									},
									{
										"kind": "text",
										"text": "\n\nFor compatibility with existing Actor Input UI (Input Schema), this function\nreturns "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": " when the following object is passed as "
									},
									{
										"kind": "code",
										"text": "`proxyConfigurationOptions`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```\n{ useApifyProxy: false }\n```"
									}
								]
							},
							"parameters": [
								{
									"id": 898,
									"name": "proxyConfigurationOptions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"id": 1348,
												"name": "ProxyConfigurationOptions"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 899,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 900,
															"name": "useApifyProxy",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "packages/apify/src/actor.ts",
																	"line": 1436,
																	"character": 65,
																	"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1436"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																900
															]
														}
													],
													"sources": [
														{
															"fileName": "packages/apify/src/actor.ts",
															"line": 1436,
															"character": 63,
															"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1436"
														}
													]
												}
											}
										]
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"id": 1365,
												"name": "ProxyConfiguration"
											}
										]
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 808,
					"name": "exit",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1035,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1035"
						}
					],
					"signatures": [
						{
							"id": 809,
							"name": "exit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gracefully exits the Actor run with the provided status message and exit code."
									}
								]
							},
							"parameters": [
								{
									"id": 810,
									"name": "messageOrOptions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "First parameter accepts either a string (a terminal status message) or an "
											},
											{
												"kind": "code",
												"text": "`ExitOptions`"
											},
											{
												"kind": "text",
												"text": " object."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"id": 1100,
												"name": "ExitOptions"
											}
										]
									}
								},
								{
									"id": 811,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Second parameter accepts an "
											},
											{
												"kind": "code",
												"text": "`ExitOptions`"
											},
											{
												"kind": "text",
												"text": " object."
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 1100,
										"name": "ExitOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 812,
					"name": "fail",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1044,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1044"
						}
					],
					"signatures": [
						{
							"id": 813,
							"name": "fail",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Calls "
									},
									{
										"kind": "code",
										"text": "`Actor.exit()`"
									},
									{
										"kind": "text",
										"text": " with "
									},
									{
										"kind": "code",
										"text": "`options.exitCode`"
									},
									{
										"kind": "text",
										"text": " set to "
									},
									{
										"kind": "code",
										"text": "`1`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"parameters": [
								{
									"id": 814,
									"name": "messageOrOptions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "First parameter accepts either a string (a terminal status message) or an "
											},
											{
												"kind": "code",
												"text": "`ExitOptions`"
											},
											{
												"kind": "text",
												"text": " object."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"id": 1100,
												"name": "ExitOptions"
											}
										]
									}
								},
								{
									"id": 815,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Second parameter accepts an "
											},
											{
												"kind": "code",
												"text": "`ExitOptions`"
											},
											{
												"kind": "text",
												"text": " object."
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 1100,
										"name": "ExitOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 901,
					"name": "getEnv",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1448,
							"character": 11,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1448"
						}
					],
					"signatures": [
						{
							"id": 902,
							"name": "getEnv",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a new "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "ApifyEnv"
									},
									{
										"kind": "text",
										"text": " object which contains information parsed from all the Apify environment variables.\n\nFor the list of the Apify environment variables, see\n[Actor documentation](https://docs.apify.com/actor/run#environment-variables).\nIf some of the variables are not defined or are invalid, the corresponding value in the resulting object will be null."
									}
								]
							},
							"type": {
								"type": "reference",
								"id": 1055,
								"name": "ApifyEnv"
							}
						}
					]
				},
				{
					"id": 882,
					"name": "getInput",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1350,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1350"
						}
					],
					"signatures": [
						{
							"id": 883,
							"name": "getInput",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets the Actor input value from the default "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore"
									},
									{
										"kind": "text",
										"text": " associated with the current Actor run.\n\nThis is just a convenient shortcut for "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore.getValue | `keyValueStore.getValue('INPUT')`"
									},
									{
										"kind": "text",
										"text": ".\nFor example, calling the following code:\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst input = await Actor.getInput();\n```"
									},
									{
										"kind": "text",
										"text": "\n\nis equivalent to:\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst store = await Actor.openKeyValueStore();\nawait store.getValue('INPUT');\n```"
									},
									{
										"kind": "text",
										"text": "\n\nNote that the "
									},
									{
										"kind": "code",
										"text": "`getInput()`"
									},
									{
										"kind": "text",
										"text": " function does not cache the value read from the key-value store.\nIf you need to use the input multiple times in your Actor,\nit is far more efficient to read it once and store it locally.\n\nFor more information, see "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.openKeyValueStore"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore.getValue"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Returns a promise that resolves to an object, string\n  or ["
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": "](https://nodejs.org/api/buffer.html), depending\n  on the MIME content type of the record, or "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": "\n  if the record is missing."
											}
										]
									}
								]
							},
							"typeParameter": [
								{
									"id": 884,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Dictionary",
												"qualifiedName": "Dictionary",
												"package": "@crawlee/types"
											},
											{
												"type": "reference",
												"name": "Buffer",
												"qualifiedName": "global.Buffer",
												"package": "@types/node"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"id": 884,
												"name": "T"
											}
										]
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 885,
					"name": "getInputOrThrow",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1358,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1358"
						}
					],
					"signatures": [
						{
							"id": 886,
							"name": "getInputOrThrow",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets the Actor input value just like the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.getInput"
									},
									{
										"kind": "text",
										"text": " method,\nbut throws if it is not found."
									}
								]
							},
							"typeParameter": [
								{
									"id": 887,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Dictionary",
												"qualifiedName": "Dictionary",
												"package": "@crawlee/types"
											},
											{
												"type": "reference",
												"name": "Buffer",
												"qualifiedName": "global.Buffer",
												"package": "@types/node"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 887,
										"name": "T"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 872,
					"name": "getValue",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1285,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1285"
						}
					],
					"signatures": [
						{
							"id": 873,
							"name": "getValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets a value from the default "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore"
									},
									{
										"kind": "text",
										"text": " associated with the current Actor run.\n\nThis is just a convenient shortcut for "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore.getValue"
									},
									{
										"kind": "text",
										"text": ".\nFor example, calling the following code:\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst value = await Actor.getValue('my-key');\n```"
									},
									{
										"kind": "text",
										"text": "\n\nis equivalent to:\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst store = await Actor.openKeyValueStore();\nconst value = await store.getValue('my-key');\n```"
									},
									{
										"kind": "text",
										"text": "\n\nTo store the value to the default key-value store, you can use the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.setValue"
									},
									{
										"kind": "text",
										"text": " function.\n\nFor more information, see  "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.openKeyValueStore"
									},
									{
										"kind": "text",
										"text": "\nand  "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore.getValue"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Returns a promise that resolves to an object, string\n  or ["
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": "](https://nodejs.org/api/buffer.html), depending\n  on the MIME content type of the record, or "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": "\n  if the record is missing."
											}
										]
									}
								]
							},
							"typeParameter": [
								{
									"id": 874,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"parameters": [
								{
									"id": 875,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Unique record key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"id": 874,
												"name": "T"
											}
										]
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 805,
					"name": "init",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1026,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1026"
						}
					],
					"signatures": [
						{
							"id": 806,
							"name": "init",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 807,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1047,
										"name": "InitOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 906,
					"name": "isAtHome",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1466,
							"character": 11,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1466"
						}
					],
					"signatures": [
						{
							"id": 907,
							"name": "isAtHome",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " when code is running on Apify platform and "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise (for example locally)."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 800,
					"name": "main",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1022,
							"character": 11,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1022"
						}
					],
					"signatures": [
						{
							"id": 801,
							"name": "main",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Runs the main user function that performs the job of the Actor\nand terminates the process when the user function finishes.\n\n**The "
									},
									{
										"kind": "code",
										"text": "`Actor.main()`"
									},
									{
										"kind": "text",
										"text": " function is optional** and is provided merely for your convenience.\nIt is mainly useful when you're running your code as an Actor on the [Apify platform](https://apify.com/actors).\nHowever, if you want to use Apify SDK tools directly inside your existing projects, e.g.\nrunning in an [Express](https://expressjs.com/) server, on\n[Google Cloud functions](https://cloud.google.com/functions)\nor [AWS Lambda](https://aws.amazon.com/lambda/), it's better to avoid\nit since the function terminates the main process when it finishes!\n\nThe "
									},
									{
										"kind": "code",
										"text": "`Actor.main()`"
									},
									{
										"kind": "text",
										"text": " function performs the following actions:\n\n- When running on the Apify platform (i.e. "
									},
									{
										"kind": "code",
										"text": "`APIFY_IS_AT_HOME`"
									},
									{
										"kind": "text",
										"text": " environment variable is set),\n  it sets up a connection to listen for platform events.\n  For example, to get a notification about an imminent migration to another server.\n  See "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.events"
									},
									{
										"kind": "text",
										"text": " for details.\n- It checks that either "
									},
									{
										"kind": "code",
										"text": "`APIFY_TOKEN`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`APIFY_LOCAL_STORAGE_DIR`"
									},
									{
										"kind": "text",
										"text": " environment variable\n  is defined. If not, the functions sets "
									},
									{
										"kind": "code",
										"text": "`APIFY_LOCAL_STORAGE_DIR`"
									},
									{
										"kind": "text",
										"text": " to "
									},
									{
										"kind": "code",
										"text": "`./apify_storage`"
									},
									{
										"kind": "text",
										"text": "\n  inside the current working directory. This is to simplify running code examples.\n- It invokes the user function passed as the "
									},
									{
										"kind": "code",
										"text": "`userFunc`"
									},
									{
										"kind": "text",
										"text": " parameter.\n- If the user function returned a promise, waits for it to resolve.\n- If the user function throws an exception or some other error is encountered,\n  prints error details to console so that they are stored to the log.\n- Exits the Node.js process, with zero exit code on success and non-zero on errors.\n\nThe user function can be synchronous:\n\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nawait Actor.main(() => {\n  // My synchronous function that returns immediately\n  console.log('Hello world from Actor!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nIf the user function returns a promise, it is considered asynchronous:\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nimport { gotScraping } from 'got-scraping';\n\nawait Actor.main(() => {\n  // My asynchronous function that returns a promise\n  return gotScraping('http://www.example.com').then((html) => {\n    console.log(html);\n  });\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nTo simplify your code, you can take advantage of the "
									},
									{
										"kind": "code",
										"text": "`async`"
									},
									{
										"kind": "text",
										"text": "/"
									},
									{
										"kind": "code",
										"text": "`await`"
									},
									{
										"kind": "text",
										"text": " keywords:\n\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nimport { gotScraping } from 'got-scraping';\n\nawait Actor.main(async () => {\n  // My asynchronous function\n  const html = await gotScraping('http://www.example.com');\n  console.log(html);\n});\n```"
									}
								]
							},
							"typeParameter": [
								{
									"id": 802,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 803,
									"name": "userFunc",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "User function to be executed. If it returns a promise,\nthe promise will be awaited. The user function is called with no arguments."
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 1066,
										"typeArguments": [
											{
												"type": "reference",
												"id": 802,
												"name": "T"
											}
										],
										"name": "UserFunc"
									}
								},
								{
									"id": 804,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 1049,
										"name": "MainOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 802,
										"name": "T"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 849,
					"name": "metamorph",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1170,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1170"
						}
					],
					"signatures": [
						{
							"id": 850,
							"name": "metamorph",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Transforms this Actor run to an Actor run of a given Actor. The system stops the current container and starts\nthe new container instead. All the default storages are preserved and the new input is stored under the "
									},
									{
										"kind": "code",
										"text": "`INPUT-METAMORPH-1`"
									},
									{
										"kind": "text",
										"text": " key\nin the same default key-value store."
									}
								]
							},
							"parameters": [
								{
									"id": 851,
									"name": "targetActorId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Either "
											},
											{
												"kind": "code",
												"text": "`username/actor-name`"
											},
											{
												"kind": "text",
												"text": " or Actor ID of an Actor to which we want to metamorph."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 852,
									"name": "input",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Input for the Actor. If it is an object, it will be stringified to\n JSON and its content type set to "
											},
											{
												"kind": "code",
												"text": "`application/json; charset=utf-8`"
											},
											{
												"kind": "text",
												"text": ".\n Otherwise, the "
											},
											{
												"kind": "code",
												"text": "`options.contentType`"
											},
											{
												"kind": "text",
												"text": " parameter must be provided."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								},
								{
									"id": 853,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 1096,
										"name": "MetamorphOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 903,
					"name": "newClient",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1459,
							"character": 11,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1459"
						}
					],
					"signatures": [
						{
							"id": 904,
							"name": "newClient",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a new instance of the Apify API client. The "
									},
									{
										"kind": "code",
										"text": "`ApifyClient`"
									},
									{
										"kind": "text",
										"text": " class is provided\nby the [apify-client](https://www.npmjs.com/package/apify-client)\nNPM package, and it is automatically configured using the "
									},
									{
										"kind": "code",
										"text": "`APIFY_API_BASE_URL`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`APIFY_TOKEN`"
									},
									{
										"kind": "text",
										"text": "\nenvironment variables. You can override the token via the available options. That's useful\nif you want to use the client as a different Apify user than the SDK internals are using."
									}
								]
							},
							"parameters": [
								{
									"id": 905,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 782,
										"name": "ApifyClientOptions",
										"qualifiedName": "ApifyClientOptions",
										"package": "apify-client"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"id": 714,
								"name": "ApifyClient",
								"qualifiedName": "ApifyClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 823,
					"name": "off",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1052,
							"character": 11,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1052"
						}
					],
					"signatures": [
						{
							"id": 824,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 825,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EventTypeName",
										"qualifiedName": "EventTypeName",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 826,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 827,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "packages/apify/src/actor.ts",
													"line": 1052,
													"character": 48,
													"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1052"
												}
											],
											"signatures": [
												{
													"id": 828,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 829,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 816,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1048,
							"character": 11,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1048"
						}
					],
					"signatures": [
						{
							"id": 817,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 818,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EventTypeName",
										"qualifiedName": "EventTypeName",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 819,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 820,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "packages/apify/src/actor.ts",
													"line": 1048,
													"character": 46,
													"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1048"
												}
											],
											"signatures": [
												{
													"id": 821,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 822,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 867,
					"name": "openDataset",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1252,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1252"
						}
					],
					"signatures": [
						{
							"id": 868,
							"name": "openDataset",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Opens a dataset and returns a promise resolving to an instance of the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " class.\n\nDatasets are used to store structured data where each object stored has the same attributes,\nsuch as online store products or real estate offers.\nThe actual data is stored either on the local filesystem or in the cloud.\n\nFor more details and code examples, see the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " class."
									}
								]
							},
							"typeParameter": [
								{
									"id": 869,
									"name": "Data",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"parameters": [
								{
									"id": 870,
									"name": "datasetIdOrName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "ID or name of the dataset to be opened. If "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`undefined`"
											},
											{
												"kind": "text",
												"text": ",\n  the function returns the default dataset associated with the Actor run."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 871,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 1105,
										"name": "OpenStorageOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1,
										"typeArguments": [
											{
												"type": "reference",
												"id": 869,
												"name": "Data"
											}
										],
										"name": "Dataset",
										"qualifiedName": "Dataset",
										"package": "@crawlee/core"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 888,
					"name": "openKeyValueStore",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1376,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1376"
						}
					],
					"signatures": [
						{
							"id": 889,
							"name": "openKeyValueStore",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Opens a key-value store and returns a promise resolving to an instance of the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore"
									},
									{
										"kind": "text",
										"text": " class.\n\nKey-value stores are used to store records or files, along with their MIME content type.\nThe records are stored and retrieved using a unique key.\nThe actual data is stored either on a local filesystem or in the Apify cloud.\n\nFor more details and code examples, see the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore"
									},
									{
										"kind": "text",
										"text": " class."
									}
								]
							},
							"parameters": [
								{
									"id": 890,
									"name": "storeIdOrName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "ID or name of the key-value store to be opened. If "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`undefined`"
											},
											{
												"kind": "text",
												"text": ",\n  the function returns the default key-value store associated with the Actor run."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 891,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 1105,
										"name": "OpenStorageOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1469,
										"name": "KeyValueStore"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 892,
					"name": "openRequestQueue",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1396,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1396"
						}
					],
					"signatures": [
						{
							"id": 893,
							"name": "openRequestQueue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Opens a request queue and returns a promise resolving to an instance\nof the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "RequestQueue"
									},
									{
										"kind": "text",
										"text": " class.\n\n"
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "RequestQueue"
									},
									{
										"kind": "text",
										"text": " represents a queue of URLs to crawl, which is stored either on local filesystem or in the cloud.\nThe queue is used for deep crawling of websites, where you start with several URLs and then\nrecursively follow links to other pages. The data structure supports both breadth-first\nand depth-first crawling orders.\n\nFor more details and code examples, see the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "RequestQueue"
									},
									{
										"kind": "text",
										"text": " class."
									}
								]
							},
							"parameters": [
								{
									"id": 894,
									"name": "queueIdOrName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "ID or name of the request queue to be opened. If "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`undefined`"
											},
											{
												"kind": "text",
												"text": ",\n  the function returns the default request queue associated with the Actor run."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 895,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 1105,
										"name": "OpenStorageOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 122,
										"name": "RequestQueue",
										"qualifiedName": "RequestQueue",
										"package": "@crawlee/core"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 863,
					"name": "pushData",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1234,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1234"
						}
					],
					"signatures": [
						{
							"id": 864,
							"name": "pushData",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stores an object or an array of objects to the default "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " of the current Actor run.\n\nThis is just a convenient shortcut for "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset.pushData"
									},
									{
										"kind": "text",
										"text": ".\nFor example, calling the following code:\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nawait Actor.pushData({ myValue: 123 });\n```"
									},
									{
										"kind": "text",
										"text": "\n\nis equivalent to:\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst dataset = await Actor.openDataset();\nawait dataset.pushData({ myValue: 123 });\n```"
									},
									{
										"kind": "text",
										"text": "\n\nFor more information, see "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.openDataset"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset.pushData"
									},
									{
										"kind": "text",
										"text": "\n\n**IMPORTANT**: Make sure to use the "
									},
									{
										"kind": "code",
										"text": "`await`"
									},
									{
										"kind": "text",
										"text": " keyword when calling "
									},
									{
										"kind": "code",
										"text": "`pushData()`"
									},
									{
										"kind": "text",
										"text": ",\notherwise the Actor process might finish before the data are stored!"
									}
								]
							},
							"typeParameter": [
								{
									"id": 865,
									"name": "Data",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"parameters": [
								{
									"id": 866,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Object or array of objects containing data to be stored in the default dataset.\nThe objects must be serializable to JSON and the JSON representation of each object must be smaller than 9MB."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 865,
												"name": "Data"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 865,
													"name": "Data"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 854,
					"name": "reboot",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1178,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1178"
						}
					],
					"signatures": [
						{
							"id": 855,
							"name": "reboot",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Internally reboots this Actor run. The system stops the current container and starts\na new container with the same run id."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 859,
					"name": "setStatusMessage",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1207,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1207"
						}
					],
					"signatures": [
						{
							"id": 860,
							"name": "setStatusMessage",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sets the status message for the current Actor run."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The return value is the Run object. When run locally, this method returns empty object ("
											},
											{
												"kind": "code",
												"text": "`{}`"
											},
											{
												"kind": "text",
												"text": ").\nFor more information, see the [Actor Runs](https://docs.apify.com/api/v2#/reference/actor-runs/) API endpoints."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 861,
									"name": "statusMessage",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The status message to set."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 862,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "SetStatusMessageOptions",
										"qualifiedName": "SetStatusMessageOptions",
										"package": "@crawlee/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1107,
										"name": "ActorRun",
										"qualifiedName": "ActorRun",
										"package": "apify-client"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 876,
					"name": "setValue",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1319,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1319"
						}
					],
					"signatures": [
						{
							"id": 877,
							"name": "setValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stores or deletes a value in the default "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore"
									},
									{
										"kind": "text",
										"text": " associated with the current Actor run.\n\nThis is just a convenient shortcut for  "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore.setValue"
									},
									{
										"kind": "text",
										"text": ".\nFor example, calling the following code:\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nawait Actor.setValue('OUTPUT', { foo: \"bar\" });\n```"
									},
									{
										"kind": "text",
										"text": "\n\nis equivalent to:\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst store = await Actor.openKeyValueStore();\nawait store.setValue('OUTPUT', { foo: \"bar\" });\n```"
									},
									{
										"kind": "text",
										"text": "\n\nTo get a value from the default key-value store, you can use the  "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.getValue"
									},
									{
										"kind": "text",
										"text": " function.\n\nFor more information, see  "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Actor.openKeyValueStore"
									},
									{
										"kind": "text",
										"text": "\nand  "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore.getValue"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"typeParameter": [
								{
									"id": 878,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 879,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Unique record key."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 880,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Record data, which can be one of the following values:\n   - If "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": ", the record in the key-value store is deleted.\n   - If no "
											},
											{
												"kind": "code",
												"text": "`options.contentType`"
											},
											{
												"kind": "text",
												"text": " is specified, "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " can be any JavaScript object, and it will be stringified to JSON.\n   - If "
											},
											{
												"kind": "code",
												"text": "`options.contentType`"
											},
											{
												"kind": "text",
												"text": " is set, "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " is taken as is, and it must be a "
											},
											{
												"kind": "code",
												"text": "`String`"
											},
											{
												"kind": "text",
												"text": " or ["
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": "](https://nodejs.org/api/buffer.html).\n  For any other value an error will be thrown."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"id": 878,
												"name": "T"
											}
										]
									}
								},
								{
									"id": 881,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 239,
										"name": "RecordOptions",
										"qualifiedName": "RecordOptions",
										"package": "@crawlee/core"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 840,
					"name": "start",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1135,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1135"
						}
					],
					"signatures": [
						{
							"id": 841,
							"name": "start",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Runs an Actor on the Apify platform using the current user account (determined by the "
									},
									{
										"kind": "code",
										"text": "`APIFY_TOKEN`"
									},
									{
										"kind": "text",
										"text": " environment variable),\nunlike "
									},
									{
										"kind": "code",
										"text": "`Actor.call`"
									},
									{
										"kind": "text",
										"text": ", this method just starts the run without waiting for finish.\n\nThe result of the function is an "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "ActorRun"
									},
									{
										"kind": "text",
										"text": " object that contains details about the Actor run.\n\nFor more information about Actors, read the\n[documentation](https://docs.apify.com/actor).\n\n**Example usage:**\n\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst run = await Actor.start('apify/hello-world', { myInput: 123 });\n```"
									}
								]
							},
							"parameters": [
								{
									"id": 842,
									"name": "actorId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Allowed formats are "
											},
											{
												"kind": "code",
												"text": "`username/actor-name`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`userId/actor-name`"
											},
											{
												"kind": "text",
												"text": " or Actor ID."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 843,
									"name": "input",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Input for the Actor. If it is an object, it will be stringified to\n JSON and its content type set to "
											},
											{
												"kind": "code",
												"text": "`application/json; charset=utf-8`"
											},
											{
												"kind": "text",
												"text": ".\n Otherwise the "
											},
											{
												"kind": "code",
												"text": "`options.contentType`"
											},
											{
												"kind": "text",
												"text": " parameter must be provided."
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									}
								},
								{
									"id": 844,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 1070,
										"name": "CallOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1107,
										"name": "ActorRun",
										"qualifiedName": "ActorRun",
										"package": "apify-client"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 794,
					"name": "useState",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 950,
							"character": 17,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L950"
						}
					],
					"signatures": [
						{
							"id": 795,
							"name": "useState",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Easily create and manage state values. All state values are automatically persisted.\n\nValues can be modified by simply using the assignment operator."
									}
								]
							},
							"typeParameter": [
								{
									"id": 796,
									"name": "State",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"parameters": [
								{
									"id": 797,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the store to use."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 798,
									"name": "defaultValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If the store does not yet have a value in it, the value will be initialized with the "
											},
											{
												"kind": "code",
												"text": "`defaultValue`"
											},
											{
												"kind": "text",
												"text": " you provide."
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 796,
										"name": "State"
									},
									"defaultValue": "..."
								},
								{
									"id": 799,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An optional object parameter where a custom "
											},
											{
												"kind": "code",
												"text": "`keyValueStoreName`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " can be passed in."
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "UseStateOptions",
										"qualifiedName": "UseStateOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 796,
										"name": "State"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						914
					]
				},
				{
					"title": "Properties",
					"children": [
						921
					]
				},
				{
					"title": "Accessors",
					"children": [
						908,
						910
					]
				},
				{
					"title": "Methods",
					"children": [
						1006,
						1031,
						845,
						856,
						830,
						835,
						896,
						808,
						812,
						901,
						882,
						885,
						872,
						805,
						906,
						800,
						849,
						903,
						823,
						816,
						867,
						888,
						892,
						863,
						854,
						859,
						876,
						840,
						794
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 49,
					"character": 13,
					"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L49"
				}
			],
			"typeParameters": [
				{
					"id": 1046,
					"name": "Data",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "reference",
						"name": "Dictionary",
						"qualifiedName": "Dictionary",
						"package": "@crawlee/types"
					},
					"default": {
						"type": "reference",
						"name": "Dictionary",
						"qualifiedName": "Dictionary",
						"package": "@crawlee/types"
					}
				}
			]
		},
		{
			"id": 714,
			"name": "ApifyClient",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "ApifyClient is the official library to access [Apify API](https://docs.apify.com/api/v2) from your\nJavaScript applications. It runs both in Node.js and browser."
					}
				]
			},
			"children": [
				{
					"id": 715,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 36,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 716,
							"name": "new ApifyClient",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 717,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 782,
										"name": "ApifyClientOptions",
										"qualifiedName": "ApifyClientOptions",
										"package": "apify-client"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 714,
								"name": "ApifyClient",
								"qualifiedName": "ApifyClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 718,
					"name": "baseUrl",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 31,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 722,
					"name": "httpClient",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 35,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "HttpClient",
						"qualifiedName": "HttpClient",
						"package": "apify-client"
					}
				},
				{
					"id": 721,
					"name": "logger",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 34,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 244,
						"name": "Log",
						"qualifiedName": "Log",
						"package": "@apify/log"
					}
				},
				{
					"id": 720,
					"name": "stats",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 33,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "Statistics",
						"qualifiedName": "Statistics",
						"package": "apify-client"
					}
				},
				{
					"id": 719,
					"name": "token",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 32,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 726,
					"name": "actor",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 45,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 727,
							"name": "actor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/actors/actor-object"
									}
								]
							},
							"parameters": [
								{
									"id": 728,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ActorClient",
								"qualifiedName": "ActorClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 724,
					"name": "actors",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 41,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 725,
							"name": "actors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/actors/actor-collection"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "ActorCollectionClient",
								"qualifiedName": "ActorCollectionClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 729,
					"name": "build",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 49,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 730,
							"name": "build",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/actor-builds/build-object"
									}
								]
							},
							"parameters": [
								{
									"id": 731,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "BuildClient",
								"qualifiedName": "BuildClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 734,
					"name": "dataset",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 57,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 735,
							"name": "dataset",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/datasets/dataset"
									}
								]
							},
							"typeParameter": [
								{
									"id": 736,
									"name": "Data",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"qualifiedName": "Record",
										"package": "typescript"
									},
									"default": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"qualifiedName": "Record",
										"package": "typescript"
									}
								}
							],
							"parameters": [
								{
									"id": 737,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 736,
										"name": "Data",
										"qualifiedName": "Data",
										"package": "apify-client"
									}
								],
								"name": "DatasetClient",
								"qualifiedName": "DatasetClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 732,
					"name": "datasets",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 53,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 733,
							"name": "datasets",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/datasets/dataset-collection"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "DatasetCollectionClient",
								"qualifiedName": "DatasetCollectionClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 740,
					"name": "keyValueStore",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 65,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 741,
							"name": "keyValueStore",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/key-value-stores/store-object"
									}
								]
							},
							"parameters": [
								{
									"id": 742,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "KeyValueStoreClient",
								"qualifiedName": "KeyValueStoreClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 738,
					"name": "keyValueStores",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 61,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 739,
							"name": "keyValueStores",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/key-value-stores/store-collection"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "KeyValueStoreCollectionClient",
								"qualifiedName": "KeyValueStoreCollectionClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 743,
					"name": "log",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 69,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 744,
							"name": "log",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/logs"
									}
								]
							},
							"parameters": [
								{
									"id": 745,
									"name": "buildOrRunId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "LogClient",
								"qualifiedName": "LogClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 748,
					"name": "requestQueue",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 77,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 749,
							"name": "requestQueue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/request-queues/queue"
									}
								]
							},
							"parameters": [
								{
									"id": 750,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 751,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "RequestQueueUserOptions",
										"qualifiedName": "RequestQueueUserOptions",
										"package": "apify-client"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RequestQueueClient",
								"qualifiedName": "RequestQueueClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 746,
					"name": "requestQueues",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 73,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 747,
							"name": "requestQueues",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/request-queues/queue-collection"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "RequestQueueCollectionClient",
								"qualifiedName": "RequestQueueCollectionClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 752,
					"name": "run",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 81,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 753,
							"name": "run",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/actor-runs/run-object-and-its-storages"
									}
								]
							},
							"parameters": [
								{
									"id": 754,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RunClient",
								"qualifiedName": "RunClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 762,
					"name": "schedule",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 97,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 763,
							"name": "schedule",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/schedules/schedule-object"
									}
								]
							},
							"parameters": [
								{
									"id": 764,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ScheduleClient",
								"qualifiedName": "ScheduleClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 760,
					"name": "schedules",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 93,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 761,
							"name": "schedules",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/schedules/schedules-collection"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "ScheduleCollectionClient",
								"qualifiedName": "ScheduleCollectionClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 778,
					"name": "setStatusMessage",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 118,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 779,
							"name": "setStatusMessage",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 780,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 781,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "SetStatusMessageOptions",
										"qualifiedName": "SetStatusMessageOptions",
										"package": "@crawlee/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 757,
					"name": "task",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 89,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 758,
							"name": "task",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/actor-tasks/task-object"
									}
								]
							},
							"parameters": [
								{
									"id": 759,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TaskClient",
								"qualifiedName": "TaskClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 755,
					"name": "tasks",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 85,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 756,
							"name": "tasks",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/actor-tasks/task-collection"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "TaskCollectionClient",
								"qualifiedName": "TaskCollectionClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 765,
					"name": "user",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 101,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 766,
							"name": "user",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/users"
									}
								]
							},
							"parameters": [
								{
									"id": 767,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "UserClient",
								"qualifiedName": "UserClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 770,
					"name": "webhook",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 109,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 771,
							"name": "webhook",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/webhooks/webhook-object"
									}
								]
							},
							"parameters": [
								{
									"id": 772,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "WebhookClient",
								"qualifiedName": "WebhookClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 775,
					"name": "webhookDispatch",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 117,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 776,
							"name": "webhookDispatch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/webhook-dispatches/webhook-dispatch-object"
									}
								]
							},
							"parameters": [
								{
									"id": 777,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "WebhookDispatchClient",
								"qualifiedName": "WebhookDispatchClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 773,
					"name": "webhookDispatches",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 113,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 774,
							"name": "webhookDispatches",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/webhook-dispatches"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "WebhookDispatchCollectionClient",
								"qualifiedName": "WebhookDispatchCollectionClient",
								"package": "apify-client"
							}
						}
					]
				},
				{
					"id": 768,
					"name": "webhooks",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 105,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 769,
							"name": "webhooks",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "https://docs.apify.com/api/v2#/reference/webhooks/webhook-collection"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "WebhookCollectionClient",
								"qualifiedName": "WebhookCollectionClient",
								"package": "apify-client"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						715
					]
				},
				{
					"title": "Properties",
					"children": [
						718,
						722,
						721,
						720,
						719
					]
				},
				{
					"title": "Methods",
					"children": [
						726,
						724,
						729,
						734,
						732,
						740,
						738,
						743,
						748,
						746,
						752,
						762,
						760,
						778,
						757,
						755,
						765,
						770,
						775,
						773,
						768
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
					"line": 30,
					"character": 21
				}
			]
		},
		{
			"id": 1193,
			"name": "Configuration",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "code",
						"text": "`Configuration`"
					},
					{
						"kind": "text",
						"text": " is a value object holding the SDK configuration. We can use it in two ways:\n\n1. When using "
					},
					{
						"kind": "code",
						"text": "`Actor`"
					},
					{
						"kind": "text",
						"text": " class, we can get the instance configuration via "
					},
					{
						"kind": "code",
						"text": "`sdk.config`"
					},
					{
						"kind": "text",
						"text": "\n\n   "
					},
					{
						"kind": "code",
						"text": "```javascript\n   import { Actor } from 'apify';\n   import { BasicCrawler } from 'crawlee';\n\n   const sdk = new Actor({ token: '123' });\n   console.log(sdk.config.get('token')); // '123'\n\n   const crawler = new BasicCrawler({\n       // ... crawler options\n   }, sdk.config);\n   ```"
					},
					{
						"kind": "text",
						"text": "\n\n2. To get the global configuration (singleton instance). It will respect the environment variables.\n\n   "
					},
					{
						"kind": "code",
						"text": "```javascript\n   import { BasicCrawler, Configuration } from 'crawlee';\n\n   // Get the global configuration\n   const config = Configuration.getGlobalConfig();\n   // Set the 'persistStateIntervalMillis' option\n   // of global configuration to 30 seconds\n   config.set('persistStateIntervalMillis', 30_000);\n\n   // No need to pass the configuration to the crawler,\n   // as it's using the global configuration by default\n   const crawler = new BasicCrawler();\n   ```"
					},
					{
						"kind": "text",
						"text": "\n\n## Supported Configuration Options\n\nKey | Environment Variable | Default Value\n---|---|---\n"
					},
					{
						"kind": "code",
						"text": "`memoryMbytes`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_MEMORY_MBYTES`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`headless`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_HEADLESS`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`persistStateIntervalMillis`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_PERSIST_STATE_INTERVAL_MILLIS`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`60e3`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`token`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_TOKEN`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`isAtHome`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_IS_AT_HOME`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`defaultDatasetId`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_DEFAULT_DATASET_ID`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`'default'`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`defaultKeyValueStoreId`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_DEFAULT_KEY_VALUE_STORE_ID`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`'default'`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`defaultRequestQueueId`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_DEFAULT_REQUEST_QUEUE_ID`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`'default'`"
					},
					{
						"kind": "text",
						"text": "\n\n## Advanced Configuration Options\n\nKey | Environment Variable | Default Value\n---|---|---\n"
					},
					{
						"kind": "code",
						"text": "`actorEventsWsUrl`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_EVENTS_WEBSOCKET_URL`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`actorId`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_ID`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`actorRunId`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_RUN_ID`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`actorTaskId`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_TASK_ID`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`apiBaseUrl`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_API_BASE_URL`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`'https://api.apify.com'`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`containerPort`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_WEB_SERVER_PORT`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`4321`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`containerUrl`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_WEB_SERVER_URL`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`'http://localhost:4321'`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`inputKey`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`ACTOR_INPUT_KEY`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`'INPUT'`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`metamorphAfterSleepMillis`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_METAMORPH_AFTER_SLEEP_MILLIS`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`300e3`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`proxyHostname`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_PROXY_HOSTNAME`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`'proxy.apify.com'`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`proxyPassword`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_PROXY_PASSWORD`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`proxyPort`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_PROXY_PORT`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`8000`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`proxyStatusUrl`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_PROXY_STATUS_URL`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`'http://proxy.apify.com'`"
					},
					{
						"kind": "text",
						"text": "\n"
					},
					{
						"kind": "code",
						"text": "`userId`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_USER_ID`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`xvfb`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_XVFB`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`chromeExecutablePath`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_CHROME_EXECUTABLE_PATH`"
					},
					{
						"kind": "text",
						"text": " | -\n"
					},
					{
						"kind": "code",
						"text": "`defaultBrowserPath`"
					},
					{
						"kind": "text",
						"text": " | "
					},
					{
						"kind": "code",
						"text": "`APIFY_DEFAULT_BROWSER_PATH`"
					},
					{
						"kind": "text",
						"text": " | -"
					}
				]
			},
			"children": [
				{
					"id": 1271,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 223,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1272,
							"name": "new Configuration",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates new "
									},
									{
										"kind": "code",
										"text": "`Configuration`"
									},
									{
										"kind": "text",
										"text": " instance with provided options. Env vars will have precedence over those."
									}
								]
							},
							"parameters": [
								{
									"id": 1273,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "ConfigurationOptions",
										"qualifiedName": "ConfigurationOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1193,
								"name": "Configuration"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoreConfiguration.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfiguration.constructor"
					}
				},
				{
					"id": 1194,
					"name": "globalConfig",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isOptional": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@inheritDoc",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 100,
							"character": 20,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L100"
						}
					],
					"type": {
						"type": "reference",
						"id": 1193,
						"name": "Configuration"
					},
					"overwrites": {
						"type": "reference",
						"name": "CoreConfiguration.globalConfig"
					}
				},
				{
					"id": 1274,
					"name": "get",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 179,
							"character": 13,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L179"
						}
					],
					"signatures": [
						{
							"id": 1275,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@inheritDoc",
										"content": []
									}
								]
							},
							"typeParameter": [
								{
									"id": 1276,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"id": 1134,
											"name": "ConfigurationOptions"
										}
									}
								},
								{
									"id": 1298,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Dictionary",
												"qualifiedName": "Dictionary",
												"package": "@crawlee/types"
											},
											{
												"type": "reference",
												"name": "StorageClient",
												"qualifiedName": "StorageClient",
												"package": "@crawlee/types"
											},
											{
												"type": "reference",
												"name": "EventManager",
												"qualifiedName": "EventManager",
												"package": "@crawlee/core"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1277,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 550,
															"character": 4
														}
													],
													"signatures": [
														{
															"id": 1278,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "Returns a string representation of an object."
																	}
																]
															},
															"parameters": [
																{
																	"id": 1279,
																	"name": "radix",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"summary": [
																			{
																				"kind": "text",
																				"text": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
																			}
																		]
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1280,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 556,
															"character": 4
														}
													],
													"signatures": [
														{
															"id": 1281,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "Returns a string representing a number in fixed-point notation."
																	}
																]
															},
															"parameters": [
																{
																	"id": 1282,
																	"name": "fractionDigits",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"summary": [
																			{
																				"kind": "text",
																				"text": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
																			}
																		]
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1283,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 562,
															"character": 4
														}
													],
													"signatures": [
														{
															"id": 1284,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "Returns a string containing a number represented in exponential notation."
																	}
																]
															},
															"parameters": [
																{
																	"id": 1285,
																	"name": "fractionDigits",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"summary": [
																			{
																				"kind": "text",
																				"text": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
																			}
																		]
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1286,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 568,
															"character": 4
														}
													],
													"signatures": [
														{
															"id": 1287,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits."
																	}
																]
															},
															"parameters": [
																{
																	"id": 1288,
																	"name": "precision",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"summary": [
																			{
																				"kind": "text",
																				"text": "Number of significant digits. Must be in the range 1 - 21, inclusive."
																			}
																		]
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1289,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 571,
															"character": 4
														}
													],
													"signatures": [
														{
															"id": 1290,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "Returns the primitive value of the specified object."
																	}
																]
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													]
												}
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1291,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
															"line": 4503,
															"character": 4
														},
														{
															"fileName": "website/node_modules/typescript/lib/lib.es2020.number.d.ts",
															"line": 29,
															"character": 4
														}
													],
													"signatures": [
														{
															"id": 1292,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "Converts a number to a string by using the current or specified locale."
																	}
																]
															},
															"parameters": [
																{
																	"id": 1293,
																	"name": "locales",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"summary": [
																			{
																				"kind": "text",
																				"text": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
																			}
																		]
																	},
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "string"
																			},
																			{
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		]
																	}
																},
																{
																	"id": 1294,
																	"name": "options",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"summary": [
																			{
																				"kind": "text",
																				"text": "An object that contains one or more properties that specify comparison options."
																			}
																		]
																	},
																	"type": {
																		"type": "reference",
																		"name": "NumberFormatOptions",
																		"qualifiedName": "Intl.NumberFormatOptions",
																		"package": "typescript"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1295,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "Converts a number to a string by using the current or specified locale."
																	}
																]
															},
															"parameters": [
																{
																	"id": 1296,
																	"name": "locales",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"summary": [
																			{
																				"kind": "text",
																				"text": "A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
																			}
																		]
																	},
																	"type": {
																		"type": "reference",
																		"name": "LocalesArgument",
																		"qualifiedName": "Intl.LocalesArgument",
																		"package": "typescript"
																	}
																},
																{
																	"id": 1297,
																	"name": "options",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"summary": [
																			{
																				"kind": "text",
																				"text": "An object that contains one or more properties that specify comparison options."
																			}
																		]
																	},
																	"type": {
																		"type": "reference",
																		"name": "NumberFormatOptions",
																		"qualifiedName": "Intl.NumberFormatOptions",
																		"package": "typescript"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 1299,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1276,
										"name": "T"
									}
								},
								{
									"id": 1300,
									"name": "defaultValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 1298,
										"name": "U"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1298,
								"name": "U"
							},
							"overwrites": {
								"type": "reference",
								"name": "CoreConfiguration.get"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "CoreConfiguration.get"
					}
				},
				{
					"id": 1334,
					"name": "getEventManager",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 251,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1335,
							"name": "getEventManager",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"type": {
								"type": "reference",
								"name": "EventManager",
								"qualifiedName": "EventManager",
								"package": "@crawlee/core"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoreConfiguration.getEventManager"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfiguration.getEventManager"
					}
				},
				{
					"id": 1301,
					"name": "set",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 186,
							"character": 13,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L186"
						}
					],
					"signatures": [
						{
							"id": 1302,
							"name": "set",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@inheritDoc",
										"content": []
									}
								]
							},
							"parameters": [
								{
									"id": 1303,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"id": 1134,
											"name": "ConfigurationOptions"
										}
									}
								},
								{
									"id": 1304,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "CoreConfiguration.set"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "CoreConfiguration.set"
					}
				},
				{
					"id": 1342,
					"name": "useEventManager",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 259,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1343,
							"name": "useEventManager",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 1344,
									"name": "events",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "EventManager",
										"qualifiedName": "EventManager",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoreConfiguration.useEventManager"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfiguration.useEventManager"
					}
				},
				{
					"id": 1339,
					"name": "useStorageClient",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 257,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1340,
							"name": "useStorageClient",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 1341,
									"name": "client",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "StorageClient",
										"qualifiedName": "StorageClient",
										"package": "@crawlee/types"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoreConfiguration.useStorageClient"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfiguration.useStorageClient"
					}
				},
				{
					"id": 1269,
					"name": "getEventManager",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 271,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1270,
							"name": "getEventManager",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets default "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "EventManager"
									},
									{
										"kind": "text",
										"text": " instance."
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "EventManager",
								"qualifiedName": "EventManager",
								"package": "@crawlee/core"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoreConfiguration.getEventManager"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfiguration.getEventManager"
					}
				},
				{
					"id": 1255,
					"name": "getGlobalConfig",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 193,
							"character": 20,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L193"
						}
					],
					"signatures": [
						{
							"id": 1256,
							"name": "getGlobalConfig",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@inheritDoc",
										"content": []
									}
								]
							},
							"type": {
								"type": "reference",
								"id": 1193,
								"name": "Configuration"
							},
							"overwrites": {
								"type": "reference",
								"name": "CoreConfiguration.getGlobalConfig"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "CoreConfiguration.getGlobalConfig"
					}
				},
				{
					"id": 1267,
					"name": "getStorageClient",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 267,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1268,
							"name": "getStorageClient",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets default "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "StorageClient"
									},
									{
										"kind": "text",
										"text": " instance."
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "StorageClient",
								"qualifiedName": "StorageClient",
								"package": "@crawlee/types"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoreConfiguration.getStorageClient"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfiguration.getStorageClient"
					}
				},
				{
					"id": 1257,
					"name": "resetGlobalState",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 206,
							"character": 20,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L206"
						}
					],
					"signatures": [
						{
							"id": 1258,
							"name": "resetGlobalState",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Resets global configuration instance. The default instance holds configuration based on env vars,\nif we want to change them, we need to first reset the global state. Used mainly for testing purposes."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "CoreConfiguration.resetGlobalState"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "CoreConfiguration.resetGlobalState"
					}
				},
				{
					"id": 1260,
					"name": "set",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 240,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1261,
							"name": "set",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sets value for given option. Only affects the global "
									},
									{
										"kind": "code",
										"text": "`Configuration`"
									},
									{
										"kind": "text",
										"text": " instance, the value will not be propagated down to the env var.\nTo reset a value, we can omit the "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " argument or pass "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": " there."
									}
								]
							},
							"parameters": [
								{
									"id": 1262,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"name": "ConfigurationOptions",
											"qualifiedName": "ConfigurationOptions",
											"package": "@crawlee/core"
										}
									}
								},
								{
									"id": 1263,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoreConfiguration.set"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfiguration.set"
					}
				},
				{
					"id": 1264,
					"name": "useStorageClient",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 258,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1265,
							"name": "useStorageClient",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 1266,
									"name": "client",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "StorageClient",
										"qualifiedName": "StorageClient",
										"package": "@crawlee/types"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoreConfiguration.useStorageClient"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfiguration.useStorageClient"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1271
					]
				},
				{
					"title": "Properties",
					"children": [
						1194
					]
				},
				{
					"title": "Methods",
					"children": [
						1274,
						1334,
						1301,
						1342,
						1339,
						1269,
						1255,
						1267,
						1257,
						1260,
						1264
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/configuration.ts",
					"line": 98,
					"character": 13,
					"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L98"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Configuration",
					"qualifiedName": "Configuration",
					"package": "@crawlee/core"
				}
			]
		},
		{
			"id": 1,
			"name": "Dataset",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The "
					},
					{
						"kind": "code",
						"text": "`Dataset`"
					},
					{
						"kind": "text",
						"text": " class represents a store for structured data where each object stored has the same attributes,\nsuch as online store products or real estate offers. You can imagine it as a table,\nwhere each object is a row and its attributes are columns.\nDataset is an append-only storage - you can only add new records to it but you cannot modify or remove existing records.\nTypically it is used to store crawling results.\n\nDo not instantiate this class directly, use the\n"
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "Dataset.open"
					},
					{
						"kind": "text",
						"text": " function instead.\n\n"
					},
					{
						"kind": "code",
						"text": "`Dataset`"
					},
					{
						"kind": "text",
						"text": " stores its data either on local disk or in the Apify cloud,\ndepending on whether the "
					},
					{
						"kind": "code",
						"text": "`APIFY_LOCAL_STORAGE_DIR`"
					},
					{
						"kind": "text",
						"text": " or "
					},
					{
						"kind": "code",
						"text": "`APIFY_TOKEN`"
					},
					{
						"kind": "text",
						"text": " environment variables are set.\n\nIf the "
					},
					{
						"kind": "code",
						"text": "`APIFY_LOCAL_STORAGE_DIR`"
					},
					{
						"kind": "text",
						"text": " environment variable is set, the data is stored in\nthe local directory in the following files:\n"
					},
					{
						"kind": "code",
						"text": "```\n{APIFY_LOCAL_STORAGE_DIR}/datasets/{DATASET_ID}/{INDEX}.json\n```"
					},
					{
						"kind": "text",
						"text": "\nNote that "
					},
					{
						"kind": "code",
						"text": "`{DATASET_ID}`"
					},
					{
						"kind": "text",
						"text": " is the name or ID of the dataset. The default dataset has ID: "
					},
					{
						"kind": "code",
						"text": "`default`"
					},
					{
						"kind": "text",
						"text": ",\nunless you override it by setting the "
					},
					{
						"kind": "code",
						"text": "`APIFY_DEFAULT_DATASET_ID`"
					},
					{
						"kind": "text",
						"text": " environment variable.\nEach dataset item is stored as a separate JSON file, where "
					},
					{
						"kind": "code",
						"text": "`{INDEX}`"
					},
					{
						"kind": "text",
						"text": " is a zero-based index of the item in the dataset.\n\nIf the "
					},
					{
						"kind": "code",
						"text": "`APIFY_TOKEN`"
					},
					{
						"kind": "text",
						"text": " environment variable is set but "
					},
					{
						"kind": "code",
						"text": "`APIFY_LOCAL_STORAGE_DIR`"
					},
					{
						"kind": "text",
						"text": " not, the data is stored in the\n[Apify Dataset](https://docs.apify.com/storage/dataset)\ncloud storage. Note that you can force usage of the cloud storage also by passing the "
					},
					{
						"kind": "code",
						"text": "`forceCloud`"
					},
					{
						"kind": "text",
						"text": "\noption to "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "Dataset.open"
					},
					{
						"kind": "text",
						"text": " function,\neven if the "
					},
					{
						"kind": "code",
						"text": "`APIFY_LOCAL_STORAGE_DIR`"
					},
					{
						"kind": "text",
						"text": " variable is set.\n\n**Example usage:**\n\n"
					},
					{
						"kind": "code",
						"text": "```javascript\n// Write a single row to the default dataset\nawait Dataset.pushData({ col1: 123, col2: 'val2' });\n\n// Open a named dataset\nconst dataset = await Dataset.open('some-name');\n\n// Write a single row\nawait dataset.pushData({ foo: 'bar' });\n\n// Write multiple rows\nawait dataset.pushData([\n  { foo: 'bar2', col2: 'val2' },\n  { col3: 123 },\n]);\n\n// Export the entirety of the dataset to one file in the key-value store\nawait dataset.exportToCSV('MY-DATA');\n```"
					}
				]
			},
			"children": [
				{
					"id": 31,
					"name": "client",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 144,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "Data",
								"qualifiedName": "Dataset.Data",
								"package": "@crawlee/core"
							}
						],
						"name": "DatasetClient",
						"qualifiedName": "DatasetClient",
						"package": "@crawlee/types"
					}
				},
				{
					"id": 28,
					"name": "config",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 141,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "Configuration",
						"qualifiedName": "Configuration",
						"package": "@crawlee/core"
					}
				},
				{
					"id": 29,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 142,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 32,
					"name": "log",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 145,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 244,
						"name": "Log",
						"qualifiedName": "Log",
						"package": "@apify/log"
					}
				},
				{
					"id": 30,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 143,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 70,
					"name": "drop",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 289,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 71,
							"name": "drop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the dataset either from the Apify cloud storage or from the local directory,\ndepending on the mode of operation."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 39,
					"name": "exportTo",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 186,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 40,
							"name": "exportTo",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Save the entirety of the dataset's contents into one file within a key-value store."
									}
								]
							},
							"parameters": [
								{
									"id": 41,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the value to save the data in."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 42,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An optional options object where you can provide the dataset and target KVS name."
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "ExportOptions",
										"qualifiedName": "ExportOptions",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 43,
									"name": "contentType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Only JSON and CSV are supported currently, defaults to JSON."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 48,
					"name": "exportToCSV",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 200,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 49,
							"name": "exportToCSV",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Save entire default dataset's contents into one CSV file within a key-value store."
									}
								]
							},
							"parameters": [
								{
									"id": 50,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the value to save the data in."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 51,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An optional options object where you can provide the target KVS name."
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ExportOptions",
												"qualifiedName": "ExportOptions",
												"package": "@crawlee/core"
											},
											{
												"type": "literal",
												"value": "fromDataset"
											}
										],
										"name": "Omit",
										"qualifiedName": "Omit",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 44,
					"name": "exportToJSON",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 193,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 45,
							"name": "exportToJSON",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Save entire default dataset's contents into one JSON file within a key-value store."
									}
								]
							},
							"parameters": [
								{
									"id": 46,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the value to save the data in."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 47,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An optional options object where you can provide the target KVS name."
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ExportOptions",
												"qualifiedName": "ExportOptions",
												"package": "@crawlee/core"
											},
											{
												"type": "literal",
												"value": "fromDataset"
											}
										],
										"name": "Omit",
										"qualifiedName": "Omit",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 54,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 258,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 55,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Iterates over dataset items, yielding each in turn to an "
									},
									{
										"kind": "code",
										"text": "`iteratee`"
									},
									{
										"kind": "text",
										"text": " function.\nEach invocation of "
									},
									{
										"kind": "code",
										"text": "`iteratee`"
									},
									{
										"kind": "text",
										"text": " is called with two arguments: "
									},
									{
										"kind": "code",
										"text": "`(item, index)`"
									},
									{
										"kind": "text",
										"text": ".\n\nIf the "
									},
									{
										"kind": "code",
										"text": "`iteratee`"
									},
									{
										"kind": "text",
										"text": " function returns a Promise then it is awaited before the next call.\nIf it throws an error, the iteration is aborted and the "
									},
									{
										"kind": "code",
										"text": "`forEach`"
									},
									{
										"kind": "text",
										"text": " function throws the error.\n\n**Example usage**\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst dataset = await Dataset.open('my-results');\nawait dataset.forEach(async (item, index) => {\n  console.log(`Item at ${index}: ${JSON.stringify(item)}`);\n});\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@default",
										"content": [
											{
												"kind": "text",
												"text": "0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 56,
									"name": "iteratee",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that is called for every item in the dataset."
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 92,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Data",
												"qualifiedName": "Dataset.Data",
												"package": "@crawlee/core"
											}
										],
										"name": "DatasetConsumer",
										"qualifiedName": "DatasetConsumer",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 57,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "All "
											},
											{
												"kind": "code",
												"text": "`forEach()`"
											},
											{
												"kind": "text",
												"text": " parameters."
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 82,
										"name": "DatasetIteratorOptions",
										"qualifiedName": "DatasetIteratorOptions",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 58,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Specifies the initial index number passed to the "
											},
											{
												"kind": "code",
												"text": "`iteratee`"
											},
											{
												"kind": "text",
												"text": " function."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 36,
					"name": "getData",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 178,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 37,
							"name": "getData",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "DatasetContent"
									},
									{
										"kind": "text",
										"text": " object holding the items in the dataset based on the provided parameters."
									}
								]
							},
							"parameters": [
								{
									"id": 38,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 73,
										"name": "DatasetDataOptions",
										"qualifiedName": "DatasetDataOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 114,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Data",
												"qualifiedName": "Dataset.Data",
												"package": "@crawlee/core"
											}
										],
										"name": "DatasetContent",
										"qualifiedName": "DatasetContent",
										"package": "@crawlee/core"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 52,
					"name": "getInfo",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 237,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 53,
							"name": "getInfo",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an object containing general information about the dataset.\n\nThe function returns the same object as the Apify API Client's\n[getDataset](https://docs.apify.com/api/apify-client-js/latest#ApifyClient-datasets-getDataset)\nfunction, which in turn calls the\n[Get dataset](https://apify.com/docs/api/v2#/reference/datasets/dataset/get-dataset)\nAPI endpoint.\n\n**Example:**\n"
									},
									{
										"kind": "code",
										"text": "```\n{\n  id: \"WkzbQMuFYuamGv3YF\",\n  name: \"my-dataset\",\n  userId: \"wRsJZtadYvn4mBZmm\",\n  createdAt: new Date(\"2015-12-12T07:34:14.202Z\"),\n  modifiedAt: new Date(\"2015-12-13T08:36:13.202Z\"),\n  accessedAt: new Date(\"2015-12-14T08:36:13.202Z\"),\n  itemCount: 14,\n}\n```"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"name": "DatasetInfo",
												"qualifiedName": "DatasetInfo",
												"package": "@crawlee/types"
											}
										]
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 59,
					"name": "map",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 268,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 60,
							"name": "map",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Produces a new array of values by mapping each value in list through a transformation function "
									},
									{
										"kind": "code",
										"text": "`iteratee()`"
									},
									{
										"kind": "text",
										"text": ".\nEach invocation of "
									},
									{
										"kind": "code",
										"text": "`iteratee()`"
									},
									{
										"kind": "text",
										"text": " is called with two arguments: "
									},
									{
										"kind": "code",
										"text": "`(element, index)`"
									},
									{
										"kind": "text",
										"text": ".\n\nIf "
									},
									{
										"kind": "code",
										"text": "`iteratee`"
									},
									{
										"kind": "text",
										"text": " returns a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " then it's awaited before a next call."
									}
								]
							},
							"typeParameter": [
								{
									"id": 61,
									"name": "R",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 62,
									"name": "iteratee",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 97,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Data",
												"qualifiedName": "Dataset.Data",
												"package": "@crawlee/core"
											},
											{
												"type": "reference",
												"id": 61,
												"name": "R",
												"qualifiedName": "R",
												"package": "@crawlee/core"
											}
										],
										"name": "DatasetMapper",
										"qualifiedName": "DatasetMapper",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 63,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "All "
											},
											{
												"kind": "code",
												"text": "`map()`"
											},
											{
												"kind": "text",
												"text": " parameters."
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 82,
										"name": "DatasetIteratorOptions",
										"qualifiedName": "DatasetIteratorOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 61,
											"name": "R",
											"qualifiedName": "R",
											"package": "@crawlee/core"
										}
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 33,
					"name": "pushData",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 174,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 34,
							"name": "pushData",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stores an object or an array of objects to the dataset.\nThe function returns a promise that resolves when the operation finishes.\nIt has no result, but throws on invalid args or other errors.\n\n**IMPORTANT**: Make sure to use the "
									},
									{
										"kind": "code",
										"text": "`await`"
									},
									{
										"kind": "text",
										"text": " keyword when calling "
									},
									{
										"kind": "code",
										"text": "`pushData()`"
									},
									{
										"kind": "text",
										"text": ",\notherwise the crawler process might finish before the data is stored!\n\nThe size of the data is limited by the receiving API and therefore "
									},
									{
										"kind": "code",
										"text": "`pushData()`"
									},
									{
										"kind": "text",
										"text": " will only\nallow objects whose JSON representation is smaller than 9MB. When an array is passed,\nnone of the included objects\nmay be larger than 9MB, but the array itself may be of any size.\n\nThe function internally\nchunks the array into separate items and pushes them sequentially.\nThe chunking process is stable (keeps order of data), but it does not provide a transaction\nsafety mechanism. Therefore, in the event of an uploading error (after several automatic retries),\nthe function's Promise will reject and the dataset will be left in a state where some of\nthe items have already been saved to the dataset while other items from the source array were not.\nTo overcome this limitation, the developer may, for example, read the last item saved in the dataset\nand re-attempt the save of the data from this item onwards to prevent duplicates."
									}
								]
							},
							"parameters": [
								{
									"id": 35,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Object or array of objects containing data to be stored in the default dataset.\n  The objects must be serializable to JSON and the JSON representation of each object must be smaller than 9MB."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Data",
												"qualifiedName": "Dataset.Data",
												"package": "@crawlee/core"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Data",
													"qualifiedName": "Dataset.Data",
													"package": "@crawlee/core"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 64,
					"name": "reduce",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 284,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 65,
							"name": "reduce",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reduces a list of values down to a single value.\n\nMemo is the initial state of the reduction, and each successive step of it should be returned by "
									},
									{
										"kind": "code",
										"text": "`iteratee()`"
									},
									{
										"kind": "text",
										"text": ".\nThe "
									},
									{
										"kind": "code",
										"text": "`iteratee()`"
									},
									{
										"kind": "text",
										"text": " is passed three arguments: the "
									},
									{
										"kind": "code",
										"text": "`memo`"
									},
									{
										"kind": "text",
										"text": ", then the "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`index`"
									},
									{
										"kind": "text",
										"text": " of the iteration.\n\nIf no "
									},
									{
										"kind": "code",
										"text": "`memo`"
									},
									{
										"kind": "text",
										"text": " is passed to the initial invocation of reduce, the "
									},
									{
										"kind": "code",
										"text": "`iteratee()`"
									},
									{
										"kind": "text",
										"text": " is not invoked on the first element of the list.\nThe first element is instead passed as the memo in the invocation of the "
									},
									{
										"kind": "code",
										"text": "`iteratee()`"
									},
									{
										"kind": "text",
										"text": " on the next element in the list.\n\nIf "
									},
									{
										"kind": "code",
										"text": "`iteratee()`"
									},
									{
										"kind": "text",
										"text": " returns a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " then it's awaited before a next call."
									}
								]
							},
							"typeParameter": [
								{
									"id": 66,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 67,
									"name": "iteratee",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 103,
										"typeArguments": [
											{
												"type": "reference",
												"id": 66,
												"name": "T",
												"qualifiedName": "T",
												"package": "@crawlee/core"
											},
											{
												"type": "reference",
												"name": "Data",
												"qualifiedName": "Dataset.Data",
												"package": "@crawlee/core"
											}
										],
										"name": "DatasetReducer",
										"qualifiedName": "DatasetReducer",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 68,
									"name": "memo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Initial state of the reduction."
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 66,
										"name": "T",
										"qualifiedName": "T",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 69,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "All "
											},
											{
												"kind": "code",
												"text": "`reduce()`"
											},
											{
												"kind": "text",
												"text": " parameters."
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 82,
										"name": "DatasetIteratorOptions",
										"qualifiedName": "DatasetIteratorOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 66,
										"name": "T",
										"qualifiedName": "T",
										"package": "@crawlee/core"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 6,
					"name": "exportToCSV",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 214,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 7,
							"name": "exportToCSV",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Save entire default dataset's contents into one CSV file within a key-value store."
									}
								]
							},
							"parameters": [
								{
									"id": 8,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the value to save the data in."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 9,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An optional options object where you can provide the dataset and target KVS name."
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "ExportOptions",
										"qualifiedName": "ExportOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 2,
					"name": "exportToJSON",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 207,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 3,
							"name": "exportToJSON",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Save entire default dataset's contents into one JSON file within a key-value store."
									}
								]
							},
							"parameters": [
								{
									"id": 4,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the value to save the data in."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An optional options object where you can provide the dataset and target KVS name."
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "ExportOptions",
										"qualifiedName": "ExportOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 19,
					"name": "getData",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 333,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 20,
							"name": "getData",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "DatasetContent"
									},
									{
										"kind": "text",
										"text": " object holding the items in the dataset based on the provided parameters."
									}
								]
							},
							"typeParameter": [
								{
									"id": 21,
									"name": "Data",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"parameters": [
								{
									"id": 22,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 73,
										"name": "DatasetDataOptions",
										"qualifiedName": "DatasetDataOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 114,
										"typeArguments": [
											{
												"type": "reference",
												"id": 21,
												"name": "Data",
												"qualifiedName": "Data",
												"package": "@crawlee/core"
											}
										],
										"name": "DatasetContent",
										"qualifiedName": "DatasetContent",
										"package": "@crawlee/core"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 10,
					"name": "open",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 304,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 11,
							"name": "open",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Opens a dataset and returns a promise resolving to an instance of the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " class.\n\nDatasets are used to store structured data where each object stored has the same attributes,\nsuch as online store products or real estate offers.\nThe actual data is stored either on the local filesystem or in the cloud.\n\nFor more details and code examples, see the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " class."
									}
								]
							},
							"typeParameter": [
								{
									"id": 12,
									"name": "Data",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"parameters": [
								{
									"id": 13,
									"name": "datasetIdOrName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "ID or name of the dataset to be opened. If "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`undefined`"
											},
											{
												"kind": "text",
												"text": ",\n  the function returns the default dataset associated with the crawler run."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 14,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Storage manager options."
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "StorageManagerOptions",
										"qualifiedName": "StorageManagerOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1,
										"typeArguments": [
											{
												"type": "reference",
												"id": 12,
												"name": "Data",
												"qualifiedName": "Data",
												"package": "@crawlee/core"
											}
										],
										"name": "Dataset",
										"qualifiedName": "Dataset",
										"package": "@crawlee/core"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						31,
						28,
						29,
						32,
						30
					]
				},
				{
					"title": "Methods",
					"children": [
						70,
						39,
						48,
						44,
						54,
						36,
						52,
						59,
						33,
						64,
						6,
						2,
						19,
						10
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
					"line": 140,
					"character": 21
				}
			],
			"typeParameters": [
				{
					"id": 72,
					"name": "Data",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExternal": true
					},
					"type": {
						"type": "reference",
						"name": "Dictionary",
						"qualifiedName": "Dictionary",
						"package": "@crawlee/types"
					},
					"default": {
						"type": "reference",
						"name": "Dictionary",
						"qualifiedName": "Dictionary",
						"package": "@crawlee/types"
					}
				}
			]
		},
		{
			"id": 1469,
			"name": "KeyValueStore",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"summary": [],
				"blockTags": [
					{
						"tag": "@inheritDoc",
						"content": []
					}
				]
			},
			"children": [
				{
					"id": 1503,
					"name": "config",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 71,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "Configuration",
						"qualifiedName": "Configuration",
						"package": "@crawlee/core"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreKeyValueStore.config"
					}
				},
				{
					"id": 1504,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 72,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreKeyValueStore.id"
					}
				},
				{
					"id": 1505,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 73,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreKeyValueStore.name"
					}
				},
				{
					"id": 1525,
					"name": "drop",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 196,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1526,
							"name": "drop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the key-value store either from the Apify cloud storage or from the local directory,\ndepending on the mode of operation."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoreKeyValueStore.drop"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreKeyValueStore.drop"
					}
				},
				{
					"id": 1529,
					"name": "forEachKey",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 220,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1530,
							"name": "forEachKey",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Iterates over key-value store keys, yielding each in turn to an "
									},
									{
										"kind": "code",
										"text": "`iteratee`"
									},
									{
										"kind": "text",
										"text": " function.\nEach invocation of "
									},
									{
										"kind": "code",
										"text": "`iteratee`"
									},
									{
										"kind": "text",
										"text": " is called with three arguments: "
									},
									{
										"kind": "code",
										"text": "`(key, index, info)`"
									},
									{
										"kind": "text",
										"text": ", where "
									},
									{
										"kind": "code",
										"text": "`key`"
									},
									{
										"kind": "text",
										"text": "\nis the record key, "
									},
									{
										"kind": "code",
										"text": "`index`"
									},
									{
										"kind": "text",
										"text": " is a zero-based index of the key in the current iteration\n(regardless of "
									},
									{
										"kind": "code",
										"text": "`options.exclusiveStartKey`"
									},
									{
										"kind": "text",
										"text": ") and "
									},
									{
										"kind": "code",
										"text": "`info`"
									},
									{
										"kind": "text",
										"text": " is an object that contains a single property "
									},
									{
										"kind": "code",
										"text": "`size`"
									},
									{
										"kind": "text",
										"text": "\nindicating size of the record in bytes.\n\nIf the "
									},
									{
										"kind": "code",
										"text": "`iteratee`"
									},
									{
										"kind": "text",
										"text": " function returns a Promise then it is awaited before the next call.\nIf it throws an error, the iteration is aborted and the "
									},
									{
										"kind": "code",
										"text": "`forEachKey`"
									},
									{
										"kind": "text",
										"text": " function throws the error.\n\n**Example usage**\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst keyValueStore = await KeyValueStore.open();\nawait keyValueStore.forEachKey(async (key, index, info) => {\n  console.log(`Key at ${index}: ${key} has size ${info.size}`);\n});\n```"
									}
								]
							},
							"parameters": [
								{
									"id": 1531,
									"name": "iteratee",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that is called for every key in the key-value store."
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 228,
										"name": "KeyConsumer",
										"qualifiedName": "KeyConsumer",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 1532,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "All "
											},
											{
												"kind": "code",
												"text": "`forEachKey()`"
											},
											{
												"kind": "text",
												"text": " parameters."
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 241,
										"name": "KeyValueStoreIteratorOptions",
										"qualifiedName": "KeyValueStoreIteratorOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoreKeyValueStore.forEachKey"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreKeyValueStore.forEachKey"
					}
				},
				{
					"id": 1514,
					"name": "getAutoSavedValue",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 146,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1515,
							"name": "getAutoSavedValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"typeParameter": [
								{
									"id": 1516,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"parameters": [
								{
									"id": 1517,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1518,
									"name": "defaultValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 1516,
										"name": "T",
										"qualifiedName": "T",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1516,
										"name": "T",
										"qualifiedName": "T",
										"package": "@crawlee/core"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoreKeyValueStore.getAutoSavedValue"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreKeyValueStore.getAutoSavedValue"
					}
				},
				{
					"id": 1500,
					"name": "getPublicUrl",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/key_value_store.ts",
							"line": 12,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/key_value_store.ts#L12"
						}
					],
					"signatures": [
						{
							"id": 1501,
							"name": "getPublicUrl",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a URL for the given key that may be used to publicly\naccess the value in the remote key-value store."
									}
								]
							},
							"parameters": [
								{
									"id": 1502,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 1506,
					"name": "getValue",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 112,
							"character": 4
						},
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 145,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1507,
							"name": "getValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets a value from the key-value store.\n\nThe function returns a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " that resolves to the record value,\nwhose JavaScript type depends on the MIME content type of the record.\nRecords with the "
									},
									{
										"kind": "code",
										"text": "`application/json`"
									},
									{
										"kind": "text",
										"text": "\ncontent type are automatically parsed and returned as a JavaScript object.\nSimilarly, records with "
									},
									{
										"kind": "code",
										"text": "`text/plain`"
									},
									{
										"kind": "text",
										"text": " content types are returned as a string.\nFor all other content types, the value is returned as a raw\n["
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": "](https://nodejs.org/api/buffer.html) instance.\n\nIf the record does not exist, the function resolves to "
									},
									{
										"kind": "code",
										"text": "`null`"
									},
									{
										"kind": "text",
										"text": ".\n\nTo save or delete a value in the key-value store, use the\n"
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore.setValue"
									},
									{
										"kind": "text",
										"text": " function.\n\n**Example usage:**\n\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst store = await KeyValueStore.open();\nconst buffer = await store.getValue('screenshot1.png');\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Returns a promise that resolves to an object, string\n  or ["
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": "](https://nodejs.org/api/buffer.html), depending\n  on the MIME content type of the record."
											}
										]
									}
								]
							},
							"typeParameter": [
								{
									"id": 1508,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"default": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"parameters": [
								{
									"id": 1509,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Unique key of the record. It can be at most 256 characters long and only consist\n  of the following characters: "
											},
											{
												"kind": "code",
												"text": "`a`"
											},
											{
												"kind": "text",
												"text": "-"
											},
											{
												"kind": "code",
												"text": "`z`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`A`"
											},
											{
												"kind": "text",
												"text": "-"
											},
											{
												"kind": "code",
												"text": "`Z`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`0`"
											},
											{
												"kind": "text",
												"text": "-"
											},
											{
												"kind": "code",
												"text": "`9`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`!-_.'()`"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"id": 1508,
												"name": "T",
												"qualifiedName": "T",
												"package": "@crawlee/core"
											}
										]
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoreKeyValueStore.getValue"
							}
						},
						{
							"id": 1510,
							"name": "getValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets a value from the key-value store.\n\nThe function returns a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " that resolves to the record value,\nwhose JavaScript type depends on the MIME content type of the record.\nRecords with the "
									},
									{
										"kind": "code",
										"text": "`application/json`"
									},
									{
										"kind": "text",
										"text": "\ncontent type are automatically parsed and returned as a JavaScript object.\nSimilarly, records with "
									},
									{
										"kind": "code",
										"text": "`text/plain`"
									},
									{
										"kind": "text",
										"text": " content types are returned as a string.\nFor all other content types, the value is returned as a raw\n["
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": "](https://nodejs.org/api/buffer.html) instance.\n\nIf the record does not exist, the function resolves to "
									},
									{
										"kind": "code",
										"text": "`null`"
									},
									{
										"kind": "text",
										"text": ".\n\nTo save or delete a value in the key-value store, use the\n"
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore.setValue"
									},
									{
										"kind": "text",
										"text": " function.\n\n**Example usage:**\n\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst store = await KeyValueStore.open();\nconst buffer = await store.getValue('screenshot1.png');\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Returns a promise that resolves to an object, string\n  or ["
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": "](https://nodejs.org/api/buffer.html), depending\n  on the MIME content type of the record, or the default value if the key is missing from the store."
											}
										]
									}
								]
							},
							"typeParameter": [
								{
									"id": 1511,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"default": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"parameters": [
								{
									"id": 1512,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Unique key of the record. It can be at most 256 characters long and only consist\n  of the following characters: "
											},
											{
												"kind": "code",
												"text": "`a`"
											},
											{
												"kind": "text",
												"text": "-"
											},
											{
												"kind": "code",
												"text": "`z`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`A`"
											},
											{
												"kind": "text",
												"text": "-"
											},
											{
												"kind": "code",
												"text": "`Z`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`0`"
											},
											{
												"kind": "text",
												"text": "-"
											},
											{
												"kind": "code",
												"text": "`9`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`!-_.'()`"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1513,
									"name": "defaultValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Fallback that will be returned if no value if present in the storage."
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 1511,
										"name": "T",
										"qualifiedName": "T",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1511,
										"name": "T",
										"qualifiedName": "T",
										"package": "@crawlee/core"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoreKeyValueStore.getValue"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreKeyValueStore.getValue"
					}
				},
				{
					"id": 1519,
					"name": "setValue",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 191,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1520,
							"name": "setValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Saves or deletes a record in the key-value store.\nThe function returns a promise that resolves once the record has been saved or deleted.\n\n**Example usage:**\n\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst store = await KeyValueStore.open();\nawait store.setValue('OUTPUT', { foo: 'bar' });\n```"
									},
									{
										"kind": "text",
										"text": "\n\nBeware that the key can be at most 256 characters long and only contain the following characters: "
									},
									{
										"kind": "code",
										"text": "`a-zA-Z0-9!-_.'()`"
									},
									{
										"kind": "text",
										"text": "\n\nBy default, "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is converted to JSON and stored with the\n"
									},
									{
										"kind": "code",
										"text": "`application/json; charset=utf-8`"
									},
									{
										"kind": "text",
										"text": " MIME content type.\nTo store the value with another content type, pass it in the options as follows:\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst store = await KeyValueStore.open('my-text-store');\nawait store.setValue('RESULTS', 'my text data', { contentType: 'text/plain' });\n```"
									},
									{
										"kind": "text",
										"text": "\nIf you set custom content type, "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " must be either a string or\n["
									},
									{
										"kind": "code",
										"text": "`Buffer`"
									},
									{
										"kind": "text",
										"text": "](https://nodejs.org/api/buffer.html), otherwise an error will be thrown.\n\nIf "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " is "
									},
									{
										"kind": "code",
										"text": "`null`"
									},
									{
										"kind": "text",
										"text": ", the record is deleted instead. Note that the "
									},
									{
										"kind": "code",
										"text": "`setValue()`"
									},
									{
										"kind": "text",
										"text": " function succeeds\nregardless whether the record existed or not.\n\nTo retrieve a value from the key-value store, use the\n"
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore.getValue"
									},
									{
										"kind": "text",
										"text": " function.\n\n**IMPORTANT:** Always make sure to use the "
									},
									{
										"kind": "code",
										"text": "`await`"
									},
									{
										"kind": "text",
										"text": " keyword when calling "
									},
									{
										"kind": "code",
										"text": "`setValue()`"
									},
									{
										"kind": "text",
										"text": ",\notherwise the crawler process might finish before the value is stored!"
									}
								]
							},
							"typeParameter": [
								{
									"id": 1521,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 1522,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Unique key of the record. It can be at most 256 characters long and only consist\n  of the following characters: "
											},
											{
												"kind": "code",
												"text": "`a`"
											},
											{
												"kind": "text",
												"text": "-"
											},
											{
												"kind": "code",
												"text": "`z`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`A`"
											},
											{
												"kind": "text",
												"text": "-"
											},
											{
												"kind": "code",
												"text": "`Z`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`0`"
											},
											{
												"kind": "text",
												"text": "-"
											},
											{
												"kind": "code",
												"text": "`9`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`!-_.'()`"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1523,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Record data, which can be one of the following values:\n   - If "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": ", the record in the key-value store is deleted.\n   - If no "
											},
											{
												"kind": "code",
												"text": "`options.contentType`"
											},
											{
												"kind": "text",
												"text": " is specified, "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " can be any JavaScript object and it will be stringified to JSON.\n   - If "
											},
											{
												"kind": "code",
												"text": "`options.contentType`"
											},
											{
												"kind": "text",
												"text": " is set, "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " is taken as is and it must be a "
											},
											{
												"kind": "code",
												"text": "`String`"
											},
											{
												"kind": "text",
												"text": " or ["
											},
											{
												"kind": "code",
												"text": "`Buffer`"
											},
											{
												"kind": "text",
												"text": "](https://nodejs.org/api/buffer.html).\n  For any other value an error will be thrown."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"id": 1521,
												"name": "T",
												"qualifiedName": "T",
												"package": "@crawlee/core"
											}
										]
									}
								},
								{
									"id": 1524,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Record options."
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 239,
										"name": "RecordOptions",
										"qualifiedName": "RecordOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoreKeyValueStore.setValue"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreKeyValueStore.setValue"
					}
				},
				{
					"id": 1482,
					"name": "getAutoSavedValue",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 295,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1483,
							"name": "getAutoSavedValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"typeParameter": [
								{
									"id": 1484,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"parameters": [
								{
									"id": 1485,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1486,
									"name": "defaultValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 1484,
										"name": "T",
										"qualifiedName": "T",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1484,
										"name": "T",
										"qualifiedName": "T",
										"package": "@crawlee/core"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoreKeyValueStore.getAutoSavedValue"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreKeyValueStore.getAutoSavedValue"
					}
				},
				{
					"id": 1470,
					"name": "open",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/key_value_store.ts",
							"line": 19,
							"character": 26,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/key_value_store.ts#L19"
						}
					],
					"signatures": [
						{
							"id": 1471,
							"name": "open",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@inheritDoc",
										"content": []
									}
								]
							},
							"parameters": [
								{
									"id": 1472,
									"name": "storeIdOrName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 1473,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "StorageManagerOptions",
										"qualifiedName": "StorageManagerOptions",
										"package": "@crawlee/core"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1469,
										"name": "KeyValueStore"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"name": "CoreKeyValueStore.open"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "CoreKeyValueStore.open"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1503,
						1504,
						1505
					]
				},
				{
					"title": "Methods",
					"children": [
						1525,
						1529,
						1514,
						1500,
						1506,
						1519,
						1482,
						1470
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/key_value_store.ts",
					"line": 7,
					"character": 13,
					"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/key_value_store.ts#L7"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "KeyValueStore",
					"qualifiedName": "KeyValueStore",
					"package": "@crawlee/core"
				}
			]
		},
		{
			"id": 244,
			"name": "Log",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The log instance enables level aware logging of messages and we advise\nto use it instead of "
					},
					{
						"kind": "code",
						"text": "`console.log()`"
					},
					{
						"kind": "text",
						"text": " and its aliases in most development\nscenarios.\n\nA very useful use case for "
					},
					{
						"kind": "code",
						"text": "`log`"
					},
					{
						"kind": "text",
						"text": " is using "
					},
					{
						"kind": "code",
						"text": "`log.debug`"
					},
					{
						"kind": "text",
						"text": " liberally throughout\nthe codebase to get useful logging messages only when appropriate log level is set\nand keeping the console tidy in production environments.\n\nThe available logging levels are, in this order: "
					},
					{
						"kind": "code",
						"text": "`DEBUG`"
					},
					{
						"kind": "text",
						"text": ", "
					},
					{
						"kind": "code",
						"text": "`INFO`"
					},
					{
						"kind": "text",
						"text": ", "
					},
					{
						"kind": "code",
						"text": "`WARNING`"
					},
					{
						"kind": "text",
						"text": ", "
					},
					{
						"kind": "code",
						"text": "`ERROR`"
					},
					{
						"kind": "text",
						"text": ", "
					},
					{
						"kind": "code",
						"text": "`OFF`"
					},
					{
						"kind": "text",
						"text": "\nand can be referenced from the "
					},
					{
						"kind": "code",
						"text": "`log.LEVELS`"
					},
					{
						"kind": "text",
						"text": " constant, such as "
					},
					{
						"kind": "code",
						"text": "`log.LEVELS.ERROR`"
					},
					{
						"kind": "text",
						"text": ".\n\nTo log messages to the system console, use the "
					},
					{
						"kind": "code",
						"text": "`log.level(message)`"
					},
					{
						"kind": "text",
						"text": " invocation,\nsuch as "
					},
					{
						"kind": "code",
						"text": "`log.debug('this is a debug message')`"
					},
					{
						"kind": "text",
						"text": ".\n\nTo prevent writing of messages above a certain log level to the console, simply\nset the appropriate level. The default log level is "
					},
					{
						"kind": "code",
						"text": "`INFO`"
					},
					{
						"kind": "text",
						"text": ", which means that\n"
					},
					{
						"kind": "code",
						"text": "`DEBUG`"
					},
					{
						"kind": "text",
						"text": " messages will not be printed, unless enabled.\n\n**Example:**\n"
					},
					{
						"kind": "code",
						"text": "```js\nimport log from '@apify/log';\n\n// importing from the Apify SDK or Crawlee is also supported:\n// import { log } from 'apify';\n// import { log } from 'crawlee';\n\nlog.info('Information message', { someData: 123 }); // prints message\nlog.debug('Debug message', { debugData: 'hello' }); // doesn't print anything\n\nlog.setLevel(log.LEVELS.DEBUG);\nlog.debug('Debug message'); // prints message\n\nlog.setLevel(log.LEVELS.ERROR);\nlog.debug('Debug message'); // doesn't print anything\nlog.info('Info message'); // doesn't print anything\nlog.error('Error message', { errorDetails: 'This is bad!' }); // prints message\n\ntry {\n  throw new Error('Not good!');\n} catch (e) {\n  log.exception(e, 'Exception occurred', { errorDetails: 'This is really bad!' }); // prints message\n}\n\nlog.setOptions({ prefix: 'My Actor' });\nlog.info('I am running!'); // prints \"My Actor: I am running\"\n\nconst childLog = log.child({ prefix: 'Crawler' });\nlog.info('I am crawling!'); // prints \"My Actor:Crawler: I am crawling\"\n```"
					},
					{
						"kind": "text",
						"text": "\n\nAnother very useful way of setting the log level is by setting the "
					},
					{
						"kind": "code",
						"text": "`APIFY_LOG_LEVEL`"
					},
					{
						"kind": "text",
						"text": "\nenvironment variable, such as "
					},
					{
						"kind": "code",
						"text": "`APIFY_LOG_LEVEL=DEBUG`"
					},
					{
						"kind": "text",
						"text": ". This way, no code changes\nare necessary to turn on your debug messages and start debugging right away.\n\nTo add timestamps to your logs, you can override the default logger settings:\n"
					},
					{
						"kind": "code",
						"text": "```js\nlog.setOptions({\n    logger: new log.LoggerText({ skipTime: false }),\n});\n```"
					},
					{
						"kind": "text",
						"text": "\nYou can customize your logging further by extending or replacing the default\nlogger instances with your own implementations."
					}
				]
			},
			"children": [
				{
					"id": 245,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 98,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 246,
							"name": "new Log",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 247,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 306,
												"name": "LoggerOptions",
												"qualifiedName": "LoggerOptions",
												"package": "@apify/log"
											}
										],
										"name": "Partial",
										"qualifiedName": "Partial",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 244,
								"name": "Log",
								"qualifiedName": "Log",
								"package": "@apify/log"
							}
						}
					]
				},
				{
					"id": 248,
					"name": "LEVELS",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Map of available log levels that's useful for easy setting of appropriate log levels.\nEach log level is represented internally by a number. Eg. "
							},
							{
								"kind": "code",
								"text": "`log.LEVELS.DEBUG === 5`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 95,
							"character": 13
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 314,
							"name": "LogLevel",
							"qualifiedName": "LogLevel",
							"package": "@apify/log"
						}
					}
				},
				{
					"id": 268,
					"name": "child",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 130,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 269,
							"name": "child",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a new instance of logger that inherits settings from a parent logger."
									}
								]
							},
							"parameters": [
								{
									"id": 270,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 306,
												"name": "LoggerOptions",
												"qualifiedName": "LoggerOptions",
												"package": "@apify/log"
											}
										],
										"name": "Partial",
										"qualifiedName": "Partial",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 244,
								"name": "Log",
								"qualifiedName": "Log",
								"package": "@apify/log"
							}
						}
					]
				},
				{
					"id": 292,
					"name": "debug",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 157,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 293,
							"name": "debug",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Logs a "
									},
									{
										"kind": "code",
										"text": "`DEBUG`"
									},
									{
										"kind": "text",
										"text": " message. By default, it will not be written to the console. To see "
									},
									{
										"kind": "code",
										"text": "`DEBUG`"
									},
									{
										"kind": "text",
										"text": "\nmessages in the console, set the log level to "
									},
									{
										"kind": "code",
										"text": "`DEBUG`"
									},
									{
										"kind": "text",
										"text": " either using the "
									},
									{
										"kind": "code",
										"text": "`log.setLevel(log.LEVELS.DEBUG)`"
									},
									{
										"kind": "text",
										"text": "\nmethod or using the environment variable "
									},
									{
										"kind": "code",
										"text": "`APIFY_LOG_LEVEL=DEBUG`"
									},
									{
										"kind": "text",
										"text": ". Data are stringified and appended\nto the message."
									}
								]
							},
							"parameters": [
								{
									"id": 294,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 295,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "AdditionalData",
										"qualifiedName": "AdditionalData",
										"package": "@apify/log"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 303,
					"name": "deprecated",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 166,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 304,
							"name": "deprecated",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Logs given message only once as WARNING. It's used to warn user that some feature he is using has been deprecated."
									}
								]
							},
							"parameters": [
								{
									"id": 305,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 271,
					"name": "error",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 135,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 272,
							"name": "error",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Logs an "
									},
									{
										"kind": "code",
										"text": "`ERROR`"
									},
									{
										"kind": "text",
										"text": " message. Use this method to log error messages that are not directly connected\nto an exception. For logging exceptions, use the "
									},
									{
										"kind": "code",
										"text": "`log.exception`"
									},
									{
										"kind": "text",
										"text": " method."
									}
								]
							},
							"parameters": [
								{
									"id": 273,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 274,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "AdditionalData",
										"qualifiedName": "AdditionalData",
										"package": "@apify/log"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 275,
					"name": "exception",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 140,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 276,
							"name": "exception",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Logs an "
									},
									{
										"kind": "code",
										"text": "`ERROR`"
									},
									{
										"kind": "text",
										"text": " level message with a nicely formatted exception. Note that the exception is the first parameter\nhere and an additional message is only optional."
									}
								]
							},
							"parameters": [
								{
									"id": 277,
									"name": "exception",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "Error",
										"qualifiedName": "Error",
										"package": "typescript"
									}
								},
								{
									"id": 278,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 279,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "AdditionalData",
										"qualifiedName": "AdditionalData",
										"package": "@apify/log"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 252,
					"name": "getLevel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 106,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 253,
							"name": "getLevel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the currently selected logging level. This is useful for checking whether a message\nwill actually be printed to the console before one actually performs a resource intensive operation\nto construct the message, such as querying a DB for some metadata that need to be added. If the log\nlevel is not high enough at the moment, it doesn't make sense to execute the query."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 266,
					"name": "getOptions",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 126,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 267,
							"name": "getOptions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the logger configuration."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 306,
										"name": "LoggerOptions",
										"qualifiedName": "LoggerOptions",
										"package": "@apify/log"
									}
								],
								"name": "Required",
								"qualifiedName": "Required",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 288,
					"name": "info",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 150,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 289,
							"name": "info",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Logs an "
									},
									{
										"kind": "code",
										"text": "`INFO`"
									},
									{
										"kind": "text",
										"text": " message. "
									},
									{
										"kind": "code",
										"text": "`INFO`"
									},
									{
										"kind": "text",
										"text": " is the default log level so info messages will be always logged,\nunless the log level is changed. Data are stringified and appended to the message."
									}
								]
							},
							"parameters": [
								{
									"id": 290,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 291,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "AdditionalData",
										"qualifiedName": "AdditionalData",
										"package": "@apify/log"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 257,
					"name": "internal",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 118,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 258,
							"name": "internal",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 259,
									"name": "level",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 314,
										"name": "LogLevel",
										"qualifiedName": "LogLevel",
										"package": "@apify/log"
									}
								},
								{
									"id": 260,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 261,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 262,
									"name": "exception",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 296,
					"name": "perf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 158,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 297,
							"name": "perf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 298,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 299,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "AdditionalData",
										"qualifiedName": "AdditionalData",
										"package": "@apify/log"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 254,
					"name": "setLevel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 117,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 255,
							"name": "setLevel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sets the log level to the given value, preventing messages from less important log levels\nfrom being printed to the console. Use in conjunction with the "
									},
									{
										"kind": "code",
										"text": "`log.LEVELS`"
									},
									{
										"kind": "text",
										"text": " constants such as\n\n"
									},
									{
										"kind": "code",
										"text": "```\nlog.setLevel(log.LEVELS.DEBUG);\n```"
									},
									{
										"kind": "text",
										"text": "\n\nDefault log level is INFO."
									}
								]
							},
							"parameters": [
								{
									"id": 256,
									"name": "level",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 314,
										"name": "LogLevel",
										"qualifiedName": "LogLevel",
										"package": "@apify/log"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 263,
					"name": "setOptions",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 122,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 264,
							"name": "setOptions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Configures logger."
									}
								]
							},
							"parameters": [
								{
									"id": 265,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 306,
												"name": "LoggerOptions",
												"qualifiedName": "LoggerOptions",
												"package": "@apify/log"
											}
										],
										"name": "Partial",
										"qualifiedName": "Partial",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 280,
					"name": "softFail",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 141,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 281,
							"name": "softFail",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 282,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 283,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "AdditionalData",
										"qualifiedName": "AdditionalData",
										"package": "@apify/log"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 284,
					"name": "warning",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 145,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 285,
							"name": "warning",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Logs a "
									},
									{
										"kind": "code",
										"text": "`WARNING`"
									},
									{
										"kind": "text",
										"text": " level message. Data are stringified and appended to the message."
									}
								]
							},
							"parameters": [
								{
									"id": 286,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 287,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "AdditionalData",
										"qualifiedName": "AdditionalData",
										"package": "@apify/log"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 300,
					"name": "warningOnce",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 162,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 301,
							"name": "warningOnce",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Logs a "
									},
									{
										"kind": "code",
										"text": "`WARNING`"
									},
									{
										"kind": "text",
										"text": " level message only once."
									}
								]
							},
							"parameters": [
								{
									"id": 302,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						245
					]
				},
				{
					"title": "Properties",
					"children": [
						248
					]
				},
				{
					"title": "Methods",
					"children": [
						268,
						292,
						303,
						271,
						275,
						252,
						266,
						288,
						257,
						296,
						254,
						263,
						280,
						284,
						300
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@apify/log/log.d.ts",
					"line": 90,
					"character": 21
				}
			]
		},
		{
			"id": 322,
			"name": "Logger",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This is an abstract class that should\nbe extended by custom logger classes.\n\nthis._log() method must be implemented by them."
					}
				]
			},
			"children": [
				{
					"id": 353,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/logger.d.ts",
							"line": 13,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 354,
							"name": "new Logger",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 355,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"qualifiedName": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 322,
								"name": "Logger",
								"qualifiedName": "Logger",
								"package": "@apify/log"
							},
							"overwrites": {
								"type": "reference",
								"name": "EventEmitter.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "EventEmitter.constructor"
					}
				},
				{
					"id": 350,
					"name": "captureRejectionSymbol",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Value: "
							},
							{
								"kind": "code",
								"text": "`Symbol.for('nodejs.rejection')`"
							},
							{
								"kind": "text",
								"text": "\n\nSee how to write a custom "
							},
							{
								"kind": "code",
								"text": "`rejection handler`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.4.0, v12.16.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 326,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 350,
							"name": "captureRejectionSymbol",
							"qualifiedName": "EventEmitter.captureRejectionSymbol",
							"package": "@types/node"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.captureRejectionSymbol"
					}
				},
				{
					"id": 351,
					"name": "captureRejections",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Value: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n\nChange the default "
							},
							{
								"kind": "code",
								"text": "`captureRejections`"
							},
							{
								"kind": "text",
								"text": " option on all new "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " objects."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.4.0, v12.16.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 333,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.captureRejections"
					}
				},
				{
					"id": 352,
					"name": "defaultMaxListeners",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "By default, a maximum of "
							},
							{
								"kind": "code",
								"text": "`10`"
							},
							{
								"kind": "text",
								"text": " listeners can be registered for any single\nevent. This limit can be changed for individual "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances\nusing the "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners(n)`"
							},
							{
								"kind": "text",
								"text": " method. To change the default\nfor _all_"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances, the "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": "property can be used. If this value is not a positive number, a "
							},
							{
								"kind": "code",
								"text": "`RangeError`"
							},
							{
								"kind": "text",
								"text": "is thrown.\n\nTake caution when setting the "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": " because the\nchange affects _all_"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances, including those created before\nthe change is made. However, calling "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners(n)`"
							},
							{
								"kind": "text",
								"text": " still has\nprecedence over "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": ".\n\nThis is not a hard limit. The "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a \"possible EventEmitter memory leak\" has been detected. For any single"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": ", the "
							},
							{
								"kind": "code",
								"text": "`emitter.getMaxListeners()`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners()`"
							},
							{
								"kind": "text",
								"text": "methods can be used to\ntemporarily avoid this warning:\n\n"
							},
							{
								"kind": "code",
								"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once('event', () => {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n```"
							},
							{
								"kind": "text",
								"text": "\n\nThe "
							},
							{
								"kind": "code",
								"text": "`--trace-warnings`"
							},
							{
								"kind": "text",
								"text": " command-line flag can be used to display the\nstack trace for such warnings.\n\nThe emitted warning can be inspected with "
							},
							{
								"kind": "code",
								"text": "`process.on('warning')`"
							},
							{
								"kind": "text",
								"text": " and will\nhave the additional "
							},
							{
								"kind": "code",
								"text": "`emitter`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`type`"
							},
							{
								"kind": "text",
								"text": ", and "
							},
							{
								"kind": "code",
								"text": "`count`"
							},
							{
								"kind": "text",
								"text": " properties, referring to\nthe event emitter instance, the event's name and the number of attached\nlisteners, respectively.\nIts "
							},
							{
								"kind": "code",
								"text": "`name`"
							},
							{
								"kind": "text",
								"text": " property is set to "
							},
							{
								"kind": "code",
								"text": "`'MaxListenersExceededWarning'`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v0.11.2"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 370,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.defaultMaxListeners"
					}
				},
				{
					"id": 349,
					"name": "errorMonitor",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This symbol shall be used to install a listener for only monitoring "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": "events. Listeners installed using this symbol are called before the regular"
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an"
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " event is emitted. Therefore, the process will still crash if no\nregular "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listener is installed."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.6.0, v12.17.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 319,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 349,
							"name": "errorMonitor",
							"qualifiedName": "EventEmitter.errorMonitor",
							"package": "@types/node"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.errorMonitor"
					}
				},
				{
					"id": 366,
					"name": "_log",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/logger.d.ts",
							"line": 17,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 367,
							"name": "_log",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 368,
									"name": "level",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 314,
										"name": "LogLevel",
										"qualifiedName": "LogLevel",
										"package": "@apify/log"
									}
								},
								{
									"id": 369,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 370,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 371,
									"name": "exception",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Exception",
										"qualifiedName": "Exception",
										"package": "@apify/log"
									}
								},
								{
									"id": 372,
									"name": "opts",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"qualifiedName": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 362,
					"name": "_outputWithConsole",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/logger.d.ts",
							"line": 16,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 363,
							"name": "_outputWithConsole",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 364,
									"name": "level",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 314,
										"name": "LogLevel",
										"qualifiedName": "LogLevel",
										"package": "@apify/log"
									}
								},
								{
									"id": 365,
									"name": "line",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 378,
					"name": "addListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 390,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 379,
							"name": "addListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.on(eventName, listener)`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 380,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 381,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 382,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 390,
													"character": 66
												}
											],
											"signatures": [
												{
													"id": 383,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 384,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 322,
								"name": "Logger",
								"qualifiedName": "Logger",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.addListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.addListener"
					}
				},
				{
					"id": 427,
					"name": "emit",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 652,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 428,
							"name": "emit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Synchronously calls each of the listeners registered for the event named"
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", in the order they were registered, passing the supplied arguments\nto each.\n\nReturns "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if the event had listeners, "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nconsole.log(myEmitter.listeners('event'));\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 429,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 430,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.emit"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.emit"
					}
				},
				{
					"id": 449,
					"name": "eventNames",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 715,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 450,
							"name": "eventNames",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or "
									},
									{
										"kind": "code",
										"text": "`Symbol`"
									},
									{
										"kind": "text",
										"text": "s.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "symbol"
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.eventNames"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.eventNames"
					}
				},
				{
					"id": 419,
					"name": "getMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 567,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 420,
							"name": "getMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the current max listener value for the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " which is either\nset by "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " or defaults to "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "defaultMaxListeners",
										"target": 352
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v1.0.0"
											}
										]
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.getMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.getMaxListeners"
					}
				},
				{
					"id": 360,
					"name": "getOptions",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/logger.d.ts",
							"line": 15,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 361,
							"name": "getOptions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Record",
								"qualifiedName": "Record",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 431,
					"name": "listenerCount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 661,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 432,
							"name": "listenerCount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the number of listeners listening for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\nIf "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " is provided, it will return how many times the listener is found\nin the list of the listeners of the event."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v3.2.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 433,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 434,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event handler function"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "Function",
										"qualifiedName": "Function",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.listenerCount"
					}
				},
				{
					"id": 421,
					"name": "listeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 580,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 422,
							"name": "listeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 423,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Function",
									"qualifiedName": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.listeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.listeners"
					}
				},
				{
					"id": 373,
					"name": "log",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/logger.d.ts",
							"line": 18,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 374,
							"name": "log",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 375,
									"name": "level",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 314,
										"name": "LogLevel",
										"qualifiedName": "LogLevel",
										"package": "@apify/log"
									}
								},
								{
									"id": 376,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 377,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 406,
					"name": "off",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 540,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 407,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.removeListener()`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v10.0.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 408,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 409,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 410,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 540,
													"character": 58
												}
											],
											"signatures": [
												{
													"id": 411,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 412,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 322,
								"name": "Logger",
								"qualifiedName": "Logger",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.off"
					}
				},
				{
					"id": 385,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 422,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 386,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the end of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "and "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple\ntimes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"
									},
									{
										"kind": "code",
										"text": "`emitter.prependListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.101"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 387,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 388,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 389,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 422,
													"character": 57
												}
											],
											"signatures": [
												{
													"id": 390,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 391,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 322,
								"name": "Logger",
								"qualifiedName": "Logger",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.on"
					}
				},
				{
					"id": 392,
					"name": "once",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 452,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 393,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". The\nnext time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this listener is removed and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"
									},
									{
										"kind": "code",
										"text": "`emitter.prependOnceListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 394,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 395,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 396,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 452,
													"character": 59
												}
											],
											"signatures": [
												{
													"id": 397,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 398,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 322,
								"name": "Logger",
								"qualifiedName": "Logger",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.once"
					}
				},
				{
					"id": 435,
					"name": "prependListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 679,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 436,
							"name": "prependListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the _beginning_ of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "and "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple\ntimes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 437,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 438,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 439,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 679,
													"character": 70
												}
											],
											"signatures": [
												{
													"id": 440,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 441,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 322,
								"name": "Logger",
								"qualifiedName": "Logger",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.prependListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.prependListener"
					}
				},
				{
					"id": 442,
					"name": "prependOnceListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 695,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 443,
							"name": "prependOnceListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " to the _beginning_ of the listeners array. The next time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this\nlistener is removed, and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 444,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 445,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 446,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 695,
													"character": 74
												}
											],
											"signatures": [
												{
													"id": 447,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 448,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 322,
								"name": "Logger",
								"qualifiedName": "Logger",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.prependOnceListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.prependOnceListener"
					}
				},
				{
					"id": 424,
					"name": "rawListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 611,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 425,
							"name": "rawListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ",\nincluding any wrappers (such as those created by "
									},
									{
										"kind": "code",
										"text": "`.once()`"
									},
									{
										"kind": "text",
										"text": ").\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v9.4.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 426,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Function",
									"qualifiedName": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.rawListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.rawListeners"
					}
				},
				{
					"id": 413,
					"name": "removeAllListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 551,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 414,
							"name": "removeAllListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes all listeners, or those of the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 415,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 322,
								"name": "Logger",
								"qualifiedName": "Logger",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.removeAllListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.removeAllListeners"
					}
				},
				{
					"id": 399,
					"name": "removeListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 535,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 400,
							"name": "removeListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the specified "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " from the listener array for the event named"
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", then "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`removeAllListeners()`"
									},
									{
										"kind": "text",
										"text": " calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from"
									},
									{
										"kind": "code",
										"text": "`emit()`"
									},
									{
										"kind": "text",
										"text": " in progress. Subsequent events behave as expected.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```"
									},
									{
										"kind": "text",
										"text": "\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe "
									},
									{
										"kind": "code",
										"text": "`emitter.listeners()`"
									},
									{
										"kind": "text",
										"text": " method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove the most\nrecently added instance. In the example the "
									},
									{
										"kind": "code",
										"text": "`once('ping')`"
									},
									{
										"kind": "text",
										"text": "listener is removed:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 401,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 402,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 403,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 535,
													"character": 69
												}
											],
											"signatures": [
												{
													"id": 404,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 405,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 322,
								"name": "Logger",
								"qualifiedName": "Logger",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.removeListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.removeListener"
					}
				},
				{
					"id": 416,
					"name": "setMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 561,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 417,
							"name": "setMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s will print a warning if more than "
									},
									{
										"kind": "code",
										"text": "`10`"
									},
									{
										"kind": "text",
										"text": " listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " method allows the limit to be\nmodified for this specific "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance. The value can be set to"
									},
									{
										"kind": "code",
										"text": "`Infinity`"
									},
									{
										"kind": "text",
										"text": " (or "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": ") to indicate an unlimited number of listeners.\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.5"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 418,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 322,
								"name": "Logger",
								"qualifiedName": "Logger",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.setMaxListeners"
					}
				},
				{
					"id": 357,
					"name": "setOptions",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/logger.d.ts",
							"line": 14,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 358,
							"name": "setOptions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 359,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"qualifiedName": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 341,
					"name": "getEventListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 296,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 342,
							"name": "getEventListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s this behaves exactly the same as calling "
									},
									{
										"kind": "code",
										"text": "`.listeners`"
									},
									{
										"kind": "text",
										"text": " on\nthe emitter.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventTarget`"
									},
									{
										"kind": "text",
										"text": "s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.2.0, v14.17.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 343,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "_DOMEventTarget",
												"qualifiedName": "_DOMEventTarget",
												"package": "@types/node"
											},
											{
												"type": "reference",
												"name": "EventEmitter",
												"qualifiedName": "global.NodeJS.EventEmitter",
												"package": "@types/node"
											}
										]
									}
								},
								{
									"id": 344,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Function",
									"qualifiedName": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.getEventListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.getEventListeners"
					}
				},
				{
					"id": 337,
					"name": "listenerCount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 268,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 338,
							"name": "listenerCount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A class method that returns the number of listeners for the given "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "registered on the given "
									},
									{
										"kind": "code",
										"text": "`emitter`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.9.12"
											}
										]
									},
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "Since v3.2.0 - Use "
											},
											{
												"kind": "code",
												"text": "`listenerCount`"
											},
											{
												"kind": "text",
												"text": " instead."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 339,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The emitter to query"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "EventEmitter",
										"qualifiedName": "global.NodeJS.EventEmitter",
										"package": "@types/node"
									}
								},
								{
									"id": 340,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event name"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.listenerCount"
					}
				},
				{
					"id": 332,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 250,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 333,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns an "
									},
									{
										"kind": "code",
										"text": "`AsyncIterator`"
									},
									{
										"kind": "text",
										"text": " that iterates "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " events. It will throw\nif the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": ". It removes all listeners when\nexiting the loop. The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting on events:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.6.0, v12.16.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "that iterates "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " events emitted by the "
											},
											{
												"kind": "code",
												"text": "`emitter`"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 334,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "EventEmitter",
										"qualifiedName": "global.NodeJS.EventEmitter",
										"package": "@types/node"
									}
								},
								{
									"id": 335,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 336,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "StaticEventEmitterOptions",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "AsyncIterableIterator",
								"qualifiedName": "AsyncIterableIterator",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.on"
					}
				},
				{
					"id": 323,
					"name": "once",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 189,
							"character": 15
						},
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 190,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 324,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " that is fulfilled when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits the given\nevent or that is rejected if the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " while waiting.\nThe "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special"
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event\nsemantics and does not listen to the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe special handling of the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event is only used when "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": "is used to wait for another event. If "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": " is used to wait for the\n'"
									},
									{
										"kind": "code",
										"text": "`error'`"
									},
									{
										"kind": "text",
										"text": " event itself, then it is treated as any other kind of event without\nspecial handling:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.error('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```"
									},
									{
										"kind": "text",
										"text": "\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting for the event:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v11.13.0, v10.16.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 325,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "_NodeEventTarget",
										"qualifiedName": "_NodeEventTarget",
										"package": "@types/node"
									}
								},
								{
									"id": 326,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 327,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "StaticEventEmitterOptions",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.once"
							}
						},
						{
							"id": 328,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 329,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "_DOMEventTarget",
										"qualifiedName": "_DOMEventTarget",
										"package": "@types/node"
									}
								},
								{
									"id": 330,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 331,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "StaticEventEmitterOptions",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.once"
					}
				},
				{
					"id": 345,
					"name": "setMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 311,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 346,
							"name": "setMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.4.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 347,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A non-negative number. The maximum number of listeners per "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": " event."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 348,
									"name": "eventTargets",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "reference",
													"name": "_DOMEventTarget",
													"qualifiedName": "_DOMEventTarget",
													"package": "@types/node"
												},
												{
													"type": "reference",
													"name": "EventEmitter",
													"qualifiedName": "global.NodeJS.EventEmitter",
													"package": "@types/node"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.setMaxListeners"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						353
					]
				},
				{
					"title": "Properties",
					"children": [
						350,
						351,
						352,
						349
					]
				},
				{
					"title": "Methods",
					"children": [
						366,
						362,
						378,
						427,
						449,
						419,
						360,
						431,
						421,
						373,
						406,
						385,
						392,
						435,
						442,
						424,
						413,
						399,
						416,
						357,
						341,
						337,
						332,
						323,
						345
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@apify/log/logger.d.ts",
					"line": 11,
					"character": 21
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "EventEmitter",
					"qualifiedName": "EventEmitter",
					"package": "@types/node"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 451,
					"name": "LoggerJson"
				},
				{
					"type": "reference",
					"id": 581,
					"name": "LoggerText"
				}
			]
		},
		{
			"id": 451,
			"name": "LoggerJson",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This is an abstract class that should\nbe extended by custom logger classes.\n\nthis._log() method must be implemented by them."
					}
				]
			},
			"children": [
				{
					"id": 482,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/logger_json.d.ts",
							"line": 5,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 483,
							"name": "new LoggerJson",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 484,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 485,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											}
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 451,
								"name": "LoggerJson",
								"qualifiedName": "LoggerJson",
								"package": "@apify/log"
							},
							"overwrites": {
								"type": "reference",
								"id": 354,
								"name": "Logger.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"id": 353,
						"name": "Logger.constructor"
					}
				},
				{
					"id": 479,
					"name": "captureRejectionSymbol",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Value: "
							},
							{
								"kind": "code",
								"text": "`Symbol.for('nodejs.rejection')`"
							},
							{
								"kind": "text",
								"text": "\n\nSee how to write a custom "
							},
							{
								"kind": "code",
								"text": "`rejection handler`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.4.0, v12.16.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 326,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 350,
							"name": "captureRejectionSymbol",
							"qualifiedName": "EventEmitter.captureRejectionSymbol",
							"package": "@types/node"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 350,
						"name": "Logger.captureRejectionSymbol"
					}
				},
				{
					"id": 480,
					"name": "captureRejections",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Value: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n\nChange the default "
							},
							{
								"kind": "code",
								"text": "`captureRejections`"
							},
							{
								"kind": "text",
								"text": " option on all new "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " objects."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.4.0, v12.16.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 333,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 351,
						"name": "Logger.captureRejections"
					}
				},
				{
					"id": 481,
					"name": "defaultMaxListeners",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "By default, a maximum of "
							},
							{
								"kind": "code",
								"text": "`10`"
							},
							{
								"kind": "text",
								"text": " listeners can be registered for any single\nevent. This limit can be changed for individual "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances\nusing the "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners(n)`"
							},
							{
								"kind": "text",
								"text": " method. To change the default\nfor _all_"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances, the "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": "property can be used. If this value is not a positive number, a "
							},
							{
								"kind": "code",
								"text": "`RangeError`"
							},
							{
								"kind": "text",
								"text": "is thrown.\n\nTake caution when setting the "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": " because the\nchange affects _all_"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances, including those created before\nthe change is made. However, calling "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners(n)`"
							},
							{
								"kind": "text",
								"text": " still has\nprecedence over "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": ".\n\nThis is not a hard limit. The "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a \"possible EventEmitter memory leak\" has been detected. For any single"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": ", the "
							},
							{
								"kind": "code",
								"text": "`emitter.getMaxListeners()`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners()`"
							},
							{
								"kind": "text",
								"text": "methods can be used to\ntemporarily avoid this warning:\n\n"
							},
							{
								"kind": "code",
								"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once('event', () => {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n```"
							},
							{
								"kind": "text",
								"text": "\n\nThe "
							},
							{
								"kind": "code",
								"text": "`--trace-warnings`"
							},
							{
								"kind": "text",
								"text": " command-line flag can be used to display the\nstack trace for such warnings.\n\nThe emitted warning can be inspected with "
							},
							{
								"kind": "code",
								"text": "`process.on('warning')`"
							},
							{
								"kind": "text",
								"text": " and will\nhave the additional "
							},
							{
								"kind": "code",
								"text": "`emitter`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`type`"
							},
							{
								"kind": "text",
								"text": ", and "
							},
							{
								"kind": "code",
								"text": "`count`"
							},
							{
								"kind": "text",
								"text": " properties, referring to\nthe event emitter instance, the event's name and the number of attached\nlisteners, respectively.\nIts "
							},
							{
								"kind": "code",
								"text": "`name`"
							},
							{
								"kind": "text",
								"text": " property is set to "
							},
							{
								"kind": "code",
								"text": "`'MaxListenersExceededWarning'`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v0.11.2"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 370,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 352,
						"name": "Logger.defaultMaxListeners"
					}
				},
				{
					"id": 478,
					"name": "errorMonitor",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This symbol shall be used to install a listener for only monitoring "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": "events. Listeners installed using this symbol are called before the regular"
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an"
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " event is emitted. Therefore, the process will still crash if no\nregular "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listener is installed."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.6.0, v12.17.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 319,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 349,
							"name": "errorMonitor",
							"qualifiedName": "EventEmitter.errorMonitor",
							"package": "@types/node"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 349,
						"name": "Logger.errorMonitor"
					}
				},
				{
					"id": 486,
					"name": "_log",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/logger_json.d.ts",
							"line": 6,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 487,
							"name": "_log",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 488,
									"name": "level",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 314,
										"name": "LogLevel",
										"qualifiedName": "LogLevel",
										"package": "@apify/log"
									}
								},
								{
									"id": 489,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 490,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 491,
									"name": "exception",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Exception",
										"qualifiedName": "Exception",
										"package": "@apify/log"
									}
								},
								{
									"id": 492,
									"name": "opts",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"qualifiedName": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"id": 367,
								"name": "Logger._log"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"id": 366,
						"name": "Logger._log"
					}
				},
				{
					"id": 499,
					"name": "_outputWithConsole",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/logger.d.ts",
							"line": 16,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 500,
							"name": "_outputWithConsole",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 501,
									"name": "level",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 314,
										"name": "LogLevel",
										"qualifiedName": "LogLevel",
										"package": "@apify/log"
									}
								},
								{
									"id": 502,
									"name": "line",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 363,
								"name": "Logger._outputWithConsole"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 362,
						"name": "Logger._outputWithConsole"
					}
				},
				{
					"id": 508,
					"name": "addListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 390,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 509,
							"name": "addListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.on(eventName, listener)`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 510,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 511,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 512,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 390,
													"character": 66
												}
											],
											"signatures": [
												{
													"id": 513,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 514,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 451,
								"name": "LoggerJson",
								"qualifiedName": "LoggerJson",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 379,
								"name": "Logger.addListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 378,
						"name": "Logger.addListener"
					}
				},
				{
					"id": 557,
					"name": "emit",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 652,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 558,
							"name": "emit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Synchronously calls each of the listeners registered for the event named"
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", in the order they were registered, passing the supplied arguments\nto each.\n\nReturns "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if the event had listeners, "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nconsole.log(myEmitter.listeners('event'));\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 559,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 560,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 428,
								"name": "Logger.emit"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 427,
						"name": "Logger.emit"
					}
				},
				{
					"id": 579,
					"name": "eventNames",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 715,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 580,
							"name": "eventNames",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or "
									},
									{
										"kind": "code",
										"text": "`Symbol`"
									},
									{
										"kind": "text",
										"text": "s.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "symbol"
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 450,
								"name": "Logger.eventNames"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 449,
						"name": "Logger.eventNames"
					}
				},
				{
					"id": 549,
					"name": "getMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 567,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 550,
							"name": "getMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the current max listener value for the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " which is either\nset by "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " or defaults to "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "defaultMaxListeners",
										"target": 481
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v1.0.0"
											}
										]
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 420,
								"name": "Logger.getMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 419,
						"name": "Logger.getMaxListeners"
					}
				},
				{
					"id": 497,
					"name": "getOptions",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/logger.d.ts",
							"line": 15,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 498,
							"name": "getOptions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Record",
								"qualifiedName": "Record",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 361,
								"name": "Logger.getOptions"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 360,
						"name": "Logger.getOptions"
					}
				},
				{
					"id": 561,
					"name": "listenerCount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 661,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 562,
							"name": "listenerCount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the number of listeners listening for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\nIf "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " is provided, it will return how many times the listener is found\nin the list of the listeners of the event."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v3.2.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 563,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 564,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event handler function"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "Function",
										"qualifiedName": "Function",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 432,
								"name": "Logger.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 431,
						"name": "Logger.listenerCount"
					}
				},
				{
					"id": 551,
					"name": "listeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 580,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 552,
							"name": "listeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 553,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Function",
									"qualifiedName": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 422,
								"name": "Logger.listeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 421,
						"name": "Logger.listeners"
					}
				},
				{
					"id": 503,
					"name": "log",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/logger.d.ts",
							"line": 18,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 504,
							"name": "log",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 505,
									"name": "level",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 314,
										"name": "LogLevel",
										"qualifiedName": "LogLevel",
										"package": "@apify/log"
									}
								},
								{
									"id": 506,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 507,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 374,
								"name": "Logger.log"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 373,
						"name": "Logger.log"
					}
				},
				{
					"id": 536,
					"name": "off",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 540,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 537,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.removeListener()`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v10.0.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 538,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 539,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 540,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 540,
													"character": 58
												}
											],
											"signatures": [
												{
													"id": 541,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 542,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 451,
								"name": "LoggerJson",
								"qualifiedName": "LoggerJson",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 407,
								"name": "Logger.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 406,
						"name": "Logger.off"
					}
				},
				{
					"id": 515,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 422,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 516,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the end of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "and "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple\ntimes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"
									},
									{
										"kind": "code",
										"text": "`emitter.prependListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.101"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 517,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 518,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 519,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 422,
													"character": 57
												}
											],
											"signatures": [
												{
													"id": 520,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 521,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 451,
								"name": "LoggerJson",
								"qualifiedName": "LoggerJson",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 386,
								"name": "Logger.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 385,
						"name": "Logger.on"
					}
				},
				{
					"id": 522,
					"name": "once",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 452,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 523,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". The\nnext time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this listener is removed and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"
									},
									{
										"kind": "code",
										"text": "`emitter.prependOnceListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 524,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 525,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 526,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 452,
													"character": 59
												}
											],
											"signatures": [
												{
													"id": 527,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 528,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 451,
								"name": "LoggerJson",
								"qualifiedName": "LoggerJson",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 393,
								"name": "Logger.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 392,
						"name": "Logger.once"
					}
				},
				{
					"id": 565,
					"name": "prependListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 679,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 566,
							"name": "prependListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the _beginning_ of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "and "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple\ntimes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 567,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 568,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 569,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 679,
													"character": 70
												}
											],
											"signatures": [
												{
													"id": 570,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 571,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 451,
								"name": "LoggerJson",
								"qualifiedName": "LoggerJson",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 436,
								"name": "Logger.prependListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 435,
						"name": "Logger.prependListener"
					}
				},
				{
					"id": 572,
					"name": "prependOnceListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 695,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 573,
							"name": "prependOnceListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " to the _beginning_ of the listeners array. The next time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this\nlistener is removed, and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 574,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 575,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 576,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 695,
													"character": 74
												}
											],
											"signatures": [
												{
													"id": 577,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 578,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 451,
								"name": "LoggerJson",
								"qualifiedName": "LoggerJson",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 443,
								"name": "Logger.prependOnceListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 442,
						"name": "Logger.prependOnceListener"
					}
				},
				{
					"id": 554,
					"name": "rawListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 611,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 555,
							"name": "rawListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ",\nincluding any wrappers (such as those created by "
									},
									{
										"kind": "code",
										"text": "`.once()`"
									},
									{
										"kind": "text",
										"text": ").\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v9.4.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 556,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Function",
									"qualifiedName": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 425,
								"name": "Logger.rawListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 424,
						"name": "Logger.rawListeners"
					}
				},
				{
					"id": 543,
					"name": "removeAllListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 551,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 544,
							"name": "removeAllListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes all listeners, or those of the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 545,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 451,
								"name": "LoggerJson",
								"qualifiedName": "LoggerJson",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 414,
								"name": "Logger.removeAllListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 413,
						"name": "Logger.removeAllListeners"
					}
				},
				{
					"id": 529,
					"name": "removeListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 535,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 530,
							"name": "removeListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the specified "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " from the listener array for the event named"
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", then "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`removeAllListeners()`"
									},
									{
										"kind": "text",
										"text": " calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from"
									},
									{
										"kind": "code",
										"text": "`emit()`"
									},
									{
										"kind": "text",
										"text": " in progress. Subsequent events behave as expected.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```"
									},
									{
										"kind": "text",
										"text": "\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe "
									},
									{
										"kind": "code",
										"text": "`emitter.listeners()`"
									},
									{
										"kind": "text",
										"text": " method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove the most\nrecently added instance. In the example the "
									},
									{
										"kind": "code",
										"text": "`once('ping')`"
									},
									{
										"kind": "text",
										"text": "listener is removed:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 531,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 532,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 533,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 535,
													"character": 69
												}
											],
											"signatures": [
												{
													"id": 534,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 535,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 451,
								"name": "LoggerJson",
								"qualifiedName": "LoggerJson",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 400,
								"name": "Logger.removeListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 399,
						"name": "Logger.removeListener"
					}
				},
				{
					"id": 546,
					"name": "setMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 561,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 547,
							"name": "setMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s will print a warning if more than "
									},
									{
										"kind": "code",
										"text": "`10`"
									},
									{
										"kind": "text",
										"text": " listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " method allows the limit to be\nmodified for this specific "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance. The value can be set to"
									},
									{
										"kind": "code",
										"text": "`Infinity`"
									},
									{
										"kind": "text",
										"text": " (or "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": ") to indicate an unlimited number of listeners.\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.5"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 548,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 451,
								"name": "LoggerJson",
								"qualifiedName": "LoggerJson",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 417,
								"name": "Logger.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 416,
						"name": "Logger.setMaxListeners"
					}
				},
				{
					"id": 494,
					"name": "setOptions",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/logger.d.ts",
							"line": 14,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 495,
							"name": "setOptions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 496,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"qualifiedName": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 358,
								"name": "Logger.setOptions"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 357,
						"name": "Logger.setOptions"
					}
				},
				{
					"id": 470,
					"name": "getEventListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 296,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 471,
							"name": "getEventListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s this behaves exactly the same as calling "
									},
									{
										"kind": "code",
										"text": "`.listeners`"
									},
									{
										"kind": "text",
										"text": " on\nthe emitter.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventTarget`"
									},
									{
										"kind": "text",
										"text": "s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.2.0, v14.17.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 472,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "_DOMEventTarget",
												"qualifiedName": "_DOMEventTarget",
												"package": "@types/node"
											},
											{
												"type": "reference",
												"name": "EventEmitter",
												"qualifiedName": "global.NodeJS.EventEmitter",
												"package": "@types/node"
											}
										]
									}
								},
								{
									"id": 473,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Function",
									"qualifiedName": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 342,
								"name": "Logger.getEventListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 341,
						"name": "Logger.getEventListeners"
					}
				},
				{
					"id": 466,
					"name": "listenerCount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 268,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 467,
							"name": "listenerCount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A class method that returns the number of listeners for the given "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "registered on the given "
									},
									{
										"kind": "code",
										"text": "`emitter`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.9.12"
											}
										]
									},
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "Since v3.2.0 - Use "
											},
											{
												"kind": "code",
												"text": "`listenerCount`"
											},
											{
												"kind": "text",
												"text": " instead."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 468,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The emitter to query"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "EventEmitter",
										"qualifiedName": "global.NodeJS.EventEmitter",
										"package": "@types/node"
									}
								},
								{
									"id": 469,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event name"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 338,
								"name": "Logger.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 337,
						"name": "Logger.listenerCount"
					}
				},
				{
					"id": 461,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 250,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 462,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns an "
									},
									{
										"kind": "code",
										"text": "`AsyncIterator`"
									},
									{
										"kind": "text",
										"text": " that iterates "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " events. It will throw\nif the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": ". It removes all listeners when\nexiting the loop. The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting on events:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.6.0, v12.16.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "that iterates "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " events emitted by the "
											},
											{
												"kind": "code",
												"text": "`emitter`"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 463,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "EventEmitter",
										"qualifiedName": "global.NodeJS.EventEmitter",
										"package": "@types/node"
									}
								},
								{
									"id": 464,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 465,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "StaticEventEmitterOptions",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "AsyncIterableIterator",
								"qualifiedName": "AsyncIterableIterator",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 333,
								"name": "Logger.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 332,
						"name": "Logger.on"
					}
				},
				{
					"id": 452,
					"name": "once",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 189,
							"character": 15
						},
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 190,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 453,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " that is fulfilled when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits the given\nevent or that is rejected if the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " while waiting.\nThe "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special"
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event\nsemantics and does not listen to the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe special handling of the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event is only used when "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": "is used to wait for another event. If "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": " is used to wait for the\n'"
									},
									{
										"kind": "code",
										"text": "`error'`"
									},
									{
										"kind": "text",
										"text": " event itself, then it is treated as any other kind of event without\nspecial handling:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.error('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```"
									},
									{
										"kind": "text",
										"text": "\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting for the event:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v11.13.0, v10.16.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 454,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "_NodeEventTarget",
										"qualifiedName": "_NodeEventTarget",
										"package": "@types/node"
									}
								},
								{
									"id": 455,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 456,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "StaticEventEmitterOptions",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 324,
								"name": "Logger.once"
							}
						},
						{
							"id": 457,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 458,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "_DOMEventTarget",
										"qualifiedName": "_DOMEventTarget",
										"package": "@types/node"
									}
								},
								{
									"id": 459,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 460,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "StaticEventEmitterOptions",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 328,
								"name": "Logger.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 323,
						"name": "Logger.once"
					}
				},
				{
					"id": 474,
					"name": "setMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 311,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 475,
							"name": "setMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.4.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 476,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A non-negative number. The maximum number of listeners per "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": " event."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 477,
									"name": "eventTargets",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "reference",
													"name": "_DOMEventTarget",
													"qualifiedName": "_DOMEventTarget",
													"package": "@types/node"
												},
												{
													"type": "reference",
													"name": "EventEmitter",
													"qualifiedName": "global.NodeJS.EventEmitter",
													"package": "@types/node"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 346,
								"name": "Logger.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 345,
						"name": "Logger.setMaxListeners"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						482
					]
				},
				{
					"title": "Properties",
					"children": [
						479,
						480,
						481,
						478
					]
				},
				{
					"title": "Methods",
					"children": [
						486,
						499,
						508,
						557,
						579,
						549,
						497,
						561,
						551,
						503,
						536,
						515,
						522,
						565,
						572,
						554,
						543,
						529,
						546,
						494,
						470,
						466,
						461,
						452,
						474
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@apify/log/logger_json.d.ts",
					"line": 4,
					"character": 21
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 322,
					"name": "Logger",
					"qualifiedName": "Logger",
					"package": "@apify/log"
				}
			]
		},
		{
			"id": 581,
			"name": "LoggerText",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "This is an abstract class that should\nbe extended by custom logger classes.\n\nthis._log() method must be implemented by them."
					}
				]
			},
			"children": [
				{
					"id": 612,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/logger_text.d.ts",
							"line": 9,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 613,
							"name": "new LoggerText",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 614,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 615,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											}
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 581,
								"name": "LoggerText",
								"qualifiedName": "LoggerText",
								"package": "@apify/log"
							},
							"overwrites": {
								"type": "reference",
								"id": 354,
								"name": "Logger.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"id": 353,
						"name": "Logger.constructor"
					}
				},
				{
					"id": 609,
					"name": "captureRejectionSymbol",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Value: "
							},
							{
								"kind": "code",
								"text": "`Symbol.for('nodejs.rejection')`"
							},
							{
								"kind": "text",
								"text": "\n\nSee how to write a custom "
							},
							{
								"kind": "code",
								"text": "`rejection handler`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.4.0, v12.16.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 326,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 350,
							"name": "captureRejectionSymbol",
							"qualifiedName": "EventEmitter.captureRejectionSymbol",
							"package": "@types/node"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 350,
						"name": "Logger.captureRejectionSymbol"
					}
				},
				{
					"id": 610,
					"name": "captureRejections",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Value: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n\nChange the default "
							},
							{
								"kind": "code",
								"text": "`captureRejections`"
							},
							{
								"kind": "text",
								"text": " option on all new "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " objects."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.4.0, v12.16.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 333,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 351,
						"name": "Logger.captureRejections"
					}
				},
				{
					"id": 611,
					"name": "defaultMaxListeners",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "By default, a maximum of "
							},
							{
								"kind": "code",
								"text": "`10`"
							},
							{
								"kind": "text",
								"text": " listeners can be registered for any single\nevent. This limit can be changed for individual "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances\nusing the "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners(n)`"
							},
							{
								"kind": "text",
								"text": " method. To change the default\nfor _all_"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances, the "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": "property can be used. If this value is not a positive number, a "
							},
							{
								"kind": "code",
								"text": "`RangeError`"
							},
							{
								"kind": "text",
								"text": "is thrown.\n\nTake caution when setting the "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": " because the\nchange affects _all_"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances, including those created before\nthe change is made. However, calling "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners(n)`"
							},
							{
								"kind": "text",
								"text": " still has\nprecedence over "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": ".\n\nThis is not a hard limit. The "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a \"possible EventEmitter memory leak\" has been detected. For any single"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": ", the "
							},
							{
								"kind": "code",
								"text": "`emitter.getMaxListeners()`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners()`"
							},
							{
								"kind": "text",
								"text": "methods can be used to\ntemporarily avoid this warning:\n\n"
							},
							{
								"kind": "code",
								"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once('event', () => {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n```"
							},
							{
								"kind": "text",
								"text": "\n\nThe "
							},
							{
								"kind": "code",
								"text": "`--trace-warnings`"
							},
							{
								"kind": "text",
								"text": " command-line flag can be used to display the\nstack trace for such warnings.\n\nThe emitted warning can be inspected with "
							},
							{
								"kind": "code",
								"text": "`process.on('warning')`"
							},
							{
								"kind": "text",
								"text": " and will\nhave the additional "
							},
							{
								"kind": "code",
								"text": "`emitter`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`type`"
							},
							{
								"kind": "text",
								"text": ", and "
							},
							{
								"kind": "code",
								"text": "`count`"
							},
							{
								"kind": "text",
								"text": " properties, referring to\nthe event emitter instance, the event's name and the number of attached\nlisteners, respectively.\nIts "
							},
							{
								"kind": "code",
								"text": "`name`"
							},
							{
								"kind": "text",
								"text": " property is set to "
							},
							{
								"kind": "code",
								"text": "`'MaxListenersExceededWarning'`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v0.11.2"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 370,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 352,
						"name": "Logger.defaultMaxListeners"
					}
				},
				{
					"id": 608,
					"name": "errorMonitor",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This symbol shall be used to install a listener for only monitoring "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": "events. Listeners installed using this symbol are called before the regular"
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an"
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " event is emitted. Therefore, the process will still crash if no\nregular "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listener is installed."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.6.0, v12.17.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 319,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 349,
							"name": "errorMonitor",
							"qualifiedName": "EventEmitter.errorMonitor",
							"package": "@types/node"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 349,
						"name": "Logger.errorMonitor"
					}
				},
				{
					"id": 616,
					"name": "_log",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/logger_text.d.ts",
							"line": 10,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 617,
							"name": "_log",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 618,
									"name": "level",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 314,
										"name": "LogLevel",
										"qualifiedName": "LogLevel",
										"package": "@apify/log"
									}
								},
								{
									"id": 619,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 620,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 621,
									"name": "exception",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Exception",
										"qualifiedName": "Exception",
										"package": "@apify/log"
									}
								},
								{
									"id": 622,
									"name": "opts",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"qualifiedName": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"id": 367,
								"name": "Logger._log"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"id": 366,
						"name": "Logger._log"
					}
				},
				{
					"id": 632,
					"name": "_outputWithConsole",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/logger.d.ts",
							"line": 16,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 633,
							"name": "_outputWithConsole",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 634,
									"name": "level",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 314,
										"name": "LogLevel",
										"qualifiedName": "LogLevel",
										"package": "@apify/log"
									}
								},
								{
									"id": 635,
									"name": "line",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 363,
								"name": "Logger._outputWithConsole"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 362,
						"name": "Logger._outputWithConsole"
					}
				},
				{
					"id": 623,
					"name": "_parseException",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/logger_text.d.ts",
							"line": 11,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 624,
							"name": "_parseException",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 625,
									"name": "exception",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "Exception",
										"qualifiedName": "Exception",
										"package": "@apify/log"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 641,
					"name": "addListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 390,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 642,
							"name": "addListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.on(eventName, listener)`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 643,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 644,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 645,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 390,
													"character": 66
												}
											],
											"signatures": [
												{
													"id": 646,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 647,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 581,
								"name": "LoggerText",
								"qualifiedName": "LoggerText",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 379,
								"name": "Logger.addListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 378,
						"name": "Logger.addListener"
					}
				},
				{
					"id": 690,
					"name": "emit",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 652,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 691,
							"name": "emit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Synchronously calls each of the listeners registered for the event named"
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", in the order they were registered, passing the supplied arguments\nto each.\n\nReturns "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if the event had listeners, "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nconsole.log(myEmitter.listeners('event'));\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 692,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 693,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 428,
								"name": "Logger.emit"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 427,
						"name": "Logger.emit"
					}
				},
				{
					"id": 712,
					"name": "eventNames",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 715,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 713,
							"name": "eventNames",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or "
									},
									{
										"kind": "code",
										"text": "`Symbol`"
									},
									{
										"kind": "text",
										"text": "s.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "symbol"
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 450,
								"name": "Logger.eventNames"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 449,
						"name": "Logger.eventNames"
					}
				},
				{
					"id": 682,
					"name": "getMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 567,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 683,
							"name": "getMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the current max listener value for the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " which is either\nset by "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " or defaults to "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "defaultMaxListeners",
										"target": 611
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v1.0.0"
											}
										]
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 420,
								"name": "Logger.getMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 419,
						"name": "Logger.getMaxListeners"
					}
				},
				{
					"id": 630,
					"name": "getOptions",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/logger.d.ts",
							"line": 15,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 631,
							"name": "getOptions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Record",
								"qualifiedName": "Record",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 361,
								"name": "Logger.getOptions"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 360,
						"name": "Logger.getOptions"
					}
				},
				{
					"id": 694,
					"name": "listenerCount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 661,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 695,
							"name": "listenerCount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the number of listeners listening for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\nIf "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " is provided, it will return how many times the listener is found\nin the list of the listeners of the event."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v3.2.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 696,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 697,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event handler function"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "Function",
										"qualifiedName": "Function",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 432,
								"name": "Logger.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 431,
						"name": "Logger.listenerCount"
					}
				},
				{
					"id": 684,
					"name": "listeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 580,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 685,
							"name": "listeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 686,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Function",
									"qualifiedName": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 422,
								"name": "Logger.listeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 421,
						"name": "Logger.listeners"
					}
				},
				{
					"id": 636,
					"name": "log",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/logger.d.ts",
							"line": 18,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 637,
							"name": "log",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 638,
									"name": "level",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 314,
										"name": "LogLevel",
										"qualifiedName": "LogLevel",
										"package": "@apify/log"
									}
								},
								{
									"id": 639,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 640,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 374,
								"name": "Logger.log"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 373,
						"name": "Logger.log"
					}
				},
				{
					"id": 669,
					"name": "off",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 540,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 670,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.removeListener()`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v10.0.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 671,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 672,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 673,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 540,
													"character": 58
												}
											],
											"signatures": [
												{
													"id": 674,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 675,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 581,
								"name": "LoggerText",
								"qualifiedName": "LoggerText",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 407,
								"name": "Logger.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 406,
						"name": "Logger.off"
					}
				},
				{
					"id": 648,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 422,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 649,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the end of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "and "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple\ntimes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"
									},
									{
										"kind": "code",
										"text": "`emitter.prependListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.101"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 650,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 651,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 652,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 422,
													"character": 57
												}
											],
											"signatures": [
												{
													"id": 653,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 654,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 581,
								"name": "LoggerText",
								"qualifiedName": "LoggerText",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 386,
								"name": "Logger.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 385,
						"name": "Logger.on"
					}
				},
				{
					"id": 655,
					"name": "once",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 452,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 656,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". The\nnext time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this listener is removed and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"
									},
									{
										"kind": "code",
										"text": "`emitter.prependOnceListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 657,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 658,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 659,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 452,
													"character": 59
												}
											],
											"signatures": [
												{
													"id": 660,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 661,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 581,
								"name": "LoggerText",
								"qualifiedName": "LoggerText",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 393,
								"name": "Logger.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 392,
						"name": "Logger.once"
					}
				},
				{
					"id": 698,
					"name": "prependListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 679,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 699,
							"name": "prependListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the _beginning_ of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "and "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple\ntimes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 700,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 701,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 702,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 679,
													"character": 70
												}
											],
											"signatures": [
												{
													"id": 703,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 704,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 581,
								"name": "LoggerText",
								"qualifiedName": "LoggerText",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 436,
								"name": "Logger.prependListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 435,
						"name": "Logger.prependListener"
					}
				},
				{
					"id": 705,
					"name": "prependOnceListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 695,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 706,
							"name": "prependOnceListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " to the _beginning_ of the listeners array. The next time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this\nlistener is removed, and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 707,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 708,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 709,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 695,
													"character": 74
												}
											],
											"signatures": [
												{
													"id": 710,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 711,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 581,
								"name": "LoggerText",
								"qualifiedName": "LoggerText",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 443,
								"name": "Logger.prependOnceListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 442,
						"name": "Logger.prependOnceListener"
					}
				},
				{
					"id": 687,
					"name": "rawListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 611,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 688,
							"name": "rawListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ",\nincluding any wrappers (such as those created by "
									},
									{
										"kind": "code",
										"text": "`.once()`"
									},
									{
										"kind": "text",
										"text": ").\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v9.4.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 689,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Function",
									"qualifiedName": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 425,
								"name": "Logger.rawListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 424,
						"name": "Logger.rawListeners"
					}
				},
				{
					"id": 676,
					"name": "removeAllListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 551,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 677,
							"name": "removeAllListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes all listeners, or those of the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 678,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 581,
								"name": "LoggerText",
								"qualifiedName": "LoggerText",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 414,
								"name": "Logger.removeAllListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 413,
						"name": "Logger.removeAllListeners"
					}
				},
				{
					"id": 662,
					"name": "removeListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 535,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 663,
							"name": "removeListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the specified "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " from the listener array for the event named"
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", then "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`removeAllListeners()`"
									},
									{
										"kind": "text",
										"text": " calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from"
									},
									{
										"kind": "code",
										"text": "`emit()`"
									},
									{
										"kind": "text",
										"text": " in progress. Subsequent events behave as expected.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```"
									},
									{
										"kind": "text",
										"text": "\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe "
									},
									{
										"kind": "code",
										"text": "`emitter.listeners()`"
									},
									{
										"kind": "text",
										"text": " method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove the most\nrecently added instance. In the example the "
									},
									{
										"kind": "code",
										"text": "`once('ping')`"
									},
									{
										"kind": "text",
										"text": "listener is removed:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 664,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 665,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 666,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 535,
													"character": 69
												}
											],
											"signatures": [
												{
													"id": 667,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 668,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 581,
								"name": "LoggerText",
								"qualifiedName": "LoggerText",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 400,
								"name": "Logger.removeListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 399,
						"name": "Logger.removeListener"
					}
				},
				{
					"id": 679,
					"name": "setMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 561,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 680,
							"name": "setMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s will print a warning if more than "
									},
									{
										"kind": "code",
										"text": "`10`"
									},
									{
										"kind": "text",
										"text": " listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " method allows the limit to be\nmodified for this specific "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance. The value can be set to"
									},
									{
										"kind": "code",
										"text": "`Infinity`"
									},
									{
										"kind": "text",
										"text": " (or "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": ") to indicate an unlimited number of listeners.\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.5"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 681,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 581,
								"name": "LoggerText",
								"qualifiedName": "LoggerText",
								"package": "@apify/log"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 417,
								"name": "Logger.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 416,
						"name": "Logger.setMaxListeners"
					}
				},
				{
					"id": 627,
					"name": "setOptions",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/logger.d.ts",
							"line": 14,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 628,
							"name": "setOptions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 629,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"qualifiedName": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 358,
								"name": "Logger.setOptions"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 357,
						"name": "Logger.setOptions"
					}
				},
				{
					"id": 600,
					"name": "getEventListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 296,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 601,
							"name": "getEventListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s this behaves exactly the same as calling "
									},
									{
										"kind": "code",
										"text": "`.listeners`"
									},
									{
										"kind": "text",
										"text": " on\nthe emitter.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventTarget`"
									},
									{
										"kind": "text",
										"text": "s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.2.0, v14.17.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 602,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "_DOMEventTarget",
												"qualifiedName": "_DOMEventTarget",
												"package": "@types/node"
											},
											{
												"type": "reference",
												"name": "EventEmitter",
												"qualifiedName": "global.NodeJS.EventEmitter",
												"package": "@types/node"
											}
										]
									}
								},
								{
									"id": 603,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Function",
									"qualifiedName": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 342,
								"name": "Logger.getEventListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 341,
						"name": "Logger.getEventListeners"
					}
				},
				{
					"id": 596,
					"name": "listenerCount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 268,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 597,
							"name": "listenerCount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A class method that returns the number of listeners for the given "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "registered on the given "
									},
									{
										"kind": "code",
										"text": "`emitter`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.9.12"
											}
										]
									},
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "Since v3.2.0 - Use "
											},
											{
												"kind": "code",
												"text": "`listenerCount`"
											},
											{
												"kind": "text",
												"text": " instead."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 598,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The emitter to query"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "EventEmitter",
										"qualifiedName": "global.NodeJS.EventEmitter",
										"package": "@types/node"
									}
								},
								{
									"id": 599,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event name"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 338,
								"name": "Logger.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 337,
						"name": "Logger.listenerCount"
					}
				},
				{
					"id": 591,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 250,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 592,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns an "
									},
									{
										"kind": "code",
										"text": "`AsyncIterator`"
									},
									{
										"kind": "text",
										"text": " that iterates "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " events. It will throw\nif the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": ". It removes all listeners when\nexiting the loop. The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting on events:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.6.0, v12.16.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "that iterates "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " events emitted by the "
											},
											{
												"kind": "code",
												"text": "`emitter`"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 593,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "EventEmitter",
										"qualifiedName": "global.NodeJS.EventEmitter",
										"package": "@types/node"
									}
								},
								{
									"id": 594,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 595,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "StaticEventEmitterOptions",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "AsyncIterableIterator",
								"qualifiedName": "AsyncIterableIterator",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 333,
								"name": "Logger.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 332,
						"name": "Logger.on"
					}
				},
				{
					"id": 582,
					"name": "once",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 189,
							"character": 15
						},
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 190,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 583,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " that is fulfilled when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits the given\nevent or that is rejected if the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " while waiting.\nThe "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special"
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event\nsemantics and does not listen to the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe special handling of the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event is only used when "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": "is used to wait for another event. If "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": " is used to wait for the\n'"
									},
									{
										"kind": "code",
										"text": "`error'`"
									},
									{
										"kind": "text",
										"text": " event itself, then it is treated as any other kind of event without\nspecial handling:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.error('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```"
									},
									{
										"kind": "text",
										"text": "\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting for the event:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v11.13.0, v10.16.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 584,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "_NodeEventTarget",
										"qualifiedName": "_NodeEventTarget",
										"package": "@types/node"
									}
								},
								{
									"id": 585,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 586,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "StaticEventEmitterOptions",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 324,
								"name": "Logger.once"
							}
						},
						{
							"id": 587,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 588,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "_DOMEventTarget",
										"qualifiedName": "_DOMEventTarget",
										"package": "@types/node"
									}
								},
								{
									"id": 589,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 590,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "StaticEventEmitterOptions",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 328,
								"name": "Logger.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 323,
						"name": "Logger.once"
					}
				},
				{
					"id": 604,
					"name": "setMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 311,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 605,
							"name": "setMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.4.0"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 606,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A non-negative number. The maximum number of listeners per "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": " event."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 607,
									"name": "eventTargets",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "reference",
													"name": "_DOMEventTarget",
													"qualifiedName": "_DOMEventTarget",
													"package": "@types/node"
												},
												{
													"type": "reference",
													"name": "EventEmitter",
													"qualifiedName": "global.NodeJS.EventEmitter",
													"package": "@types/node"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 346,
								"name": "Logger.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 345,
						"name": "Logger.setMaxListeners"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						612
					]
				},
				{
					"title": "Properties",
					"children": [
						609,
						610,
						611,
						608
					]
				},
				{
					"title": "Methods",
					"children": [
						616,
						632,
						623,
						641,
						690,
						712,
						682,
						630,
						694,
						684,
						636,
						669,
						648,
						655,
						698,
						705,
						687,
						676,
						662,
						679,
						627,
						600,
						596,
						591,
						582,
						604
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@apify/log/logger_text.d.ts",
					"line": 8,
					"character": 21
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 322,
					"name": "Logger",
					"qualifiedName": "Logger",
					"package": "@apify/log"
				}
			]
		},
		{
			"id": 1422,
			"name": "PlatformEventManager",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Gets an instance of a Node.js'\n[EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter)\nclass that emits various events from the SDK or the Apify platform.\nThe event emitter is initialized by calling the "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "Actor.main"
					},
					{
						"kind": "text",
						"text": " function.\n\n**Example usage:**\n\n"
					},
					{
						"kind": "code",
						"text": "```javascript\nActor.on('cpuInfo', (data) => {\n  if (data.isCpuOverloaded) console.log('Oh no, the CPU is overloaded!');\n});\n```"
					},
					{
						"kind": "text",
						"text": "\n\nThe following events are emitted:\n\n- "
					},
					{
						"kind": "code",
						"text": "`cpuInfo`"
					},
					{
						"kind": "text",
						"text": ": "
					},
					{
						"kind": "code",
						"text": "`{ \"isCpuOverloaded\": Boolean }`"
					},
					{
						"kind": "text",
						"text": "\n  The event is emitted approximately every second\n  and it indicates whether the Actor is using the maximum of available CPU resources.\n  If that's the case, the Actor should not add more workload.\n  For example, this event is used by the "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "AutoscaledPool"
					},
					{
						"kind": "text",
						"text": " class.\n- "
					},
					{
						"kind": "code",
						"text": "`migrating`"
					},
					{
						"kind": "text",
						"text": ": "
					},
					{
						"kind": "code",
						"text": "`void`"
					},
					{
						"kind": "text",
						"text": "\n  Emitted when the Actor running on the Apify platform is going to be migrated to another worker server soon.\n  You can use it to persist the state of the Actor and gracefully stop your in-progress tasks,\n  so that they are not interrupted by the migration.\n  For example, this is used by the "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "RequestList"
					},
					{
						"kind": "text",
						"text": " class.\n- "
					},
					{
						"kind": "code",
						"text": "`aborting`"
					},
					{
						"kind": "text",
						"text": ": "
					},
					{
						"kind": "code",
						"text": "`void`"
					},
					{
						"kind": "text",
						"text": "\n  When a user aborts an Actor run on the Apify platform, they can choose to abort gracefully to allow\n  the Actor some time before getting killed. This graceful abort emits the "
					},
					{
						"kind": "code",
						"text": "`aborting`"
					},
					{
						"kind": "text",
						"text": " event which the SDK\n  uses to gracefully stop running crawls and you can use it to do your own cleanup as well.\n- "
					},
					{
						"kind": "code",
						"text": "`persistState`"
					},
					{
						"kind": "text",
						"text": ": "
					},
					{
						"kind": "code",
						"text": "`{ \"isMigrating\": Boolean }`"
					},
					{
						"kind": "text",
						"text": "\n  Emitted in regular intervals (by default 60 seconds) to notify all components of Apify SDK that it is time to persist\n  their state, in order to avoid repeating all work when the Actor restarts.\n  This event is automatically emitted together with the "
					},
					{
						"kind": "code",
						"text": "`migrating`"
					},
					{
						"kind": "text",
						"text": " event,\n  in which case the "
					},
					{
						"kind": "code",
						"text": "`isMigrating`"
					},
					{
						"kind": "text",
						"text": " flag is set to "
					},
					{
						"kind": "code",
						"text": "`true`"
					},
					{
						"kind": "text",
						"text": ". Otherwise the flag is "
					},
					{
						"kind": "code",
						"text": "`false`"
					},
					{
						"kind": "text",
						"text": ".\n  Note that the "
					},
					{
						"kind": "code",
						"text": "`persistState`"
					},
					{
						"kind": "text",
						"text": " event is provided merely for user convenience,\n  you can achieve the same effect using "
					},
					{
						"kind": "code",
						"text": "`setInterval()`"
					},
					{
						"kind": "text",
						"text": " and listening for the "
					},
					{
						"kind": "code",
						"text": "`migrating`"
					},
					{
						"kind": "text",
						"text": " event."
					}
				]
			},
			"children": [
				{
					"id": 1423,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/platform_event_manager.ts",
							"line": 49,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/platform_event_manager.ts#L49"
						}
					],
					"signatures": [
						{
							"id": 1424,
							"name": "new PlatformEventManager",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 1425,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1193,
										"name": "Configuration"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"id": 1422,
								"name": "PlatformEventManager"
							},
							"overwrites": {
								"type": "reference",
								"name": "EventManager.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "EventManager.constructor"
					}
				},
				{
					"id": 1427,
					"name": "config",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/platform_event_manager.ts",
							"line": 49,
							"character": 34,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/platform_event_manager.ts#L49"
						}
					],
					"type": {
						"type": "reference",
						"id": 1193,
						"name": "Configuration"
					},
					"defaultValue": "...",
					"inheritedFrom": {
						"type": "reference",
						"name": "EventManager.config"
					}
				},
				{
					"id": 1433,
					"name": "close",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/platform_event_manager.ts",
							"line": 111,
							"character": 19,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/platform_event_manager.ts#L111"
						}
					],
					"signatures": [
						{
							"id": 1434,
							"name": "close",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Closes websocket providing events from Actor infrastructure and also stops sending internal events\nof Apify package such as "
									},
									{
										"kind": "code",
										"text": "`persistState`"
									},
									{
										"kind": "text",
										"text": ".\nThis is automatically called at the end of "
									},
									{
										"kind": "code",
										"text": "`Actor.main()`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"name": "EventManager.close"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "EventManager.close"
					}
				},
				{
					"id": 1453,
					"name": "emit",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/events/event_manager.d.ts",
							"line": 35,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1454,
							"name": "emit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 1455,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "EventTypeName",
										"qualifiedName": "EventTypeName",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 1456,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "unknown"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventManager.emit"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventManager.emit"
					}
				},
				{
					"id": 1428,
					"name": "init",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/platform_event_manager.ts",
							"line": 57,
							"character": 19,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/platform_event_manager.ts#L57"
						}
					],
					"signatures": [
						{
							"id": 1429,
							"name": "init",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Initializes "
									},
									{
										"kind": "code",
										"text": "`Actor.events`"
									},
									{
										"kind": "text",
										"text": " event emitter by creating a connection to a websocket that provides them.\nThis is an internal function that is automatically called by "
									},
									{
										"kind": "code",
										"text": "`Actor.main()`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"name": "EventManager.init"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "EventManager.init"
					}
				},
				{
					"id": 1457,
					"name": "isInitialized",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/events/event_manager.d.ts",
							"line": 36,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1458,
							"name": "isInitialized",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventManager.isInitialized"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventManager.isInitialized"
					}
				},
				{
					"id": 1446,
					"name": "off",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/events/event_manager.d.ts",
							"line": 34,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1447,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 1448,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "EventTypeName",
										"qualifiedName": "EventTypeName",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 1449,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1450,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@crawlee/core/events/event_manager.d.ts",
													"line": 34,
													"character": 41
												}
											],
											"signatures": [
												{
													"id": 1451,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1452,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventManager.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventManager.off"
					}
				},
				{
					"id": 1439,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/events/event_manager.d.ts",
							"line": 33,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1440,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 1441,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "EventTypeName",
										"qualifiedName": "EventTypeName",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 1442,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1443,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@crawlee/core/events/event_manager.d.ts",
													"line": 33,
													"character": 39
												}
											],
											"signatures": [
												{
													"id": 1444,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 1445,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventManager.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventManager.on"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						1423
					]
				},
				{
					"title": "Properties",
					"children": [
						1427
					]
				},
				{
					"title": "Methods",
					"children": [
						1433,
						1453,
						1428,
						1457,
						1446,
						1439
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/platform_event_manager.ts",
					"line": 45,
					"character": 13,
					"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/platform_event_manager.ts#L45"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "EventManager",
					"qualifiedName": "EventManager",
					"package": "@crawlee/core"
				}
			]
		},
		{
			"id": 1365,
			"name": "ProxyConfiguration",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Configures connection to a proxy server with the provided options. Proxy servers are used to prevent target websites from blocking\nyour crawlers based on IP address rate limits or blacklists. Setting proxy configuration in your crawlers automatically configures\nthem to use the selected proxies for all connections. You can get information about the currently used proxy by inspecting\nthe "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "ProxyInfo"
					},
					{
						"kind": "text",
						"text": " property in your crawler's page function. There, you can inspect the proxy's URL and other attributes.\n\nThe proxy servers are managed by [Apify Proxy](https://docs.apify.com/proxy). To be able to use Apify Proxy,\nyou need an Apify account and access to the selected proxies. If you provide no configuration option,\nthe proxies will be managed automatically using a smart algorithm.\n\nIf you want to use your own proxies, use the "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "ProxyConfigurationOptions.proxyUrls"
					},
					{
						"kind": "text",
						"text": " option. Your list of proxy URLs will\nbe rotated by the configuration if this option is provided.\n\n**Example usage:**\n\n"
					},
					{
						"kind": "code",
						"text": "```javascript\n\nconst proxyConfiguration = await Actor.createProxyConfiguration({\n  groups: ['GROUP1', 'GROUP2'] // List of Apify Proxy groups\n  countryCode: 'US',\n});\n\nconst crawler = new CheerioCrawler({\n  // ...\n  proxyConfiguration,\n  requestHandler({ proxyInfo }) {\n     const usedProxyUrl = proxyInfo.url; // Getting the proxy URL\n  }\n})\n\n```"
					}
				]
			},
			"children": [
				{
					"id": 1376,
					"name": "config",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 162,
							"character": 66,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/proxy_configuration.ts#L162"
						}
					],
					"type": {
						"type": "reference",
						"id": 1193,
						"name": "Configuration"
					},
					"defaultValue": "..."
				},
				{
					"id": 1403,
					"name": "isManInTheMiddle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/proxy_configuration.d.ts",
							"line": 103,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreProxyConfiguration.isManInTheMiddle"
					}
				},
				{
					"id": 1377,
					"name": "initialize",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 215,
							"character": 10,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/proxy_configuration.ts#L215"
						}
					],
					"signatures": [
						{
							"id": 1378,
							"name": "initialize",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Loads proxy password if token is provided and checks access to Apify Proxy and provided proxy groups\nif Apify Proxy configuration is used.\nAlso checks if country has access to Apify Proxy groups if the country code is provided.\n\nYou should use the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "createProxyConfiguration"
									},
									{
										"kind": "text",
										"text": " function to create a pre-initialized\n"
									},
									{
										"kind": "code",
										"text": "`ProxyConfiguration`"
									},
									{
										"kind": "text",
										"text": " instance instead of calling this manually."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 1379,
					"name": "newProxyInfo",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 239,
							"character": 19,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/proxy_configuration.ts#L239"
						}
					],
					"signatures": [
						{
							"id": 1380,
							"name": "newProxyInfo",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This function creates a new "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "ProxyInfo"
									},
									{
										"kind": "text",
										"text": " info object.\nIt is used by CheerioCrawler and PuppeteerCrawler to generate proxy URLs and also to allow the user to inspect\nthe currently used proxy via the requestHandler parameter "
									},
									{
										"kind": "code",
										"text": "`proxyInfo`"
									},
									{
										"kind": "text",
										"text": ".\nUse it if you want to work with a rich representation of a proxy URL.\nIf you need the URL string only, use "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "ProxyConfiguration.newUrl"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Represents information about used proxy and its configuration."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1381,
									"name": "sessionId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Represents the identifier of user "
											},
											{
												"kind": "inline-tag",
												"tag": "@apilink",
												"text": "Session"
											},
											{
												"kind": "text",
												"text": " that can be managed by the "
											},
											{
												"kind": "inline-tag",
												"tag": "@apilink",
												"text": "SessionPool"
											},
											{
												"kind": "text",
												"text": " or\n you can use the Apify Proxy [Session](https://docs.apify.com/proxy#sessions) identifier.\n When the provided sessionId is a number, it's converted to a string. Property sessionId of\n "
											},
											{
												"kind": "inline-tag",
												"tag": "@apilink",
												"text": "ProxyInfo"
											},
											{
												"kind": "text",
												"text": " is always returned as a type string.\n\n All the HTTP requests going through the proxy with the same session identifier\n will use the same target proxy server (i.e. the same IP address).\n The identifier must not be longer than 50 characters and include only the following: "
											},
											{
												"kind": "code",
												"text": "`0-9`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`a-z`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`A-Z`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`\".\"`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`\"_\"`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`\"~\"`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1356,
										"name": "ProxyInfo"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"name": "CoreProxyConfiguration.newProxyInfo"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "CoreProxyConfiguration.newProxyInfo"
					}
				},
				{
					"id": 1382,
					"name": "newUrl",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 270,
							"character": 19,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/proxy_configuration.ts#L270"
						}
					],
					"signatures": [
						{
							"id": 1383,
							"name": "newUrl",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a new proxy URL based on provided configuration options and the "
									},
									{
										"kind": "code",
										"text": "`sessionId`"
									},
									{
										"kind": "text",
										"text": " parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A string with a proxy URL, including authentication credentials and port number.\n For example, "
											},
											{
												"kind": "code",
												"text": "`http://bob:password123@proxy.example.com:8000`"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 1384,
									"name": "sessionId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Represents the identifier of user "
											},
											{
												"kind": "inline-tag",
												"tag": "@apilink",
												"text": "Session"
											},
											{
												"kind": "text",
												"text": " that can be managed by the "
											},
											{
												"kind": "inline-tag",
												"tag": "@apilink",
												"text": "SessionPool"
											},
											{
												"kind": "text",
												"text": " or\n you can use the Apify Proxy [Session](https://docs.apify.com/proxy#sessions) identifier.\n When the provided sessionId is a number, it's converted to a string.\n\n All the HTTP requests going through the proxy with the same session identifier\n will use the same target proxy server (i.e. the same IP address).\n The identifier must not be longer than 50 characters and include only the following: "
											},
											{
												"kind": "code",
												"text": "`0-9`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`a-z`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`A-Z`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`\".\"`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`\"_\"`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`\"~\"`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							},
							"overwrites": {
								"type": "reference",
								"name": "CoreProxyConfiguration.newUrl"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "CoreProxyConfiguration.newUrl"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1376,
						1403
					]
				},
				{
					"title": "Methods",
					"children": [
						1377,
						1379,
						1382
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/proxy_configuration.ts",
					"line": 151,
					"character": 13,
					"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/proxy_configuration.ts#L151"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ProxyConfiguration",
					"qualifiedName": "ProxyConfiguration",
					"package": "@crawlee/core"
				}
			]
		},
		{
			"id": 122,
			"name": "RequestQueue",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Represents a queue of URLs to crawl, which is used for deep crawling of websites\nwhere you start with several URLs and then recursively\nfollow links to other pages. The data structure supports both breadth-first and depth-first crawling orders.\n\nEach URL is represented using an instance of the "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "Request"
					},
					{
						"kind": "text",
						"text": " class.\nThe queue can only contain unique URLs. More precisely, it can only contain "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "Request"
					},
					{
						"kind": "text",
						"text": " instances\nwith distinct "
					},
					{
						"kind": "code",
						"text": "`uniqueKey`"
					},
					{
						"kind": "text",
						"text": " properties. By default, "
					},
					{
						"kind": "code",
						"text": "`uniqueKey`"
					},
					{
						"kind": "text",
						"text": " is generated from the URL, but it can also be overridden.\nTo add a single URL multiple times to the queue,\ncorresponding "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "Request"
					},
					{
						"kind": "text",
						"text": " objects will need to have different "
					},
					{
						"kind": "code",
						"text": "`uniqueKey`"
					},
					{
						"kind": "text",
						"text": " properties.\n\nDo not instantiate this class directly, use the "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "RequestQueue.open"
					},
					{
						"kind": "text",
						"text": " function instead.\n\n"
					},
					{
						"kind": "code",
						"text": "`RequestQueue`"
					},
					{
						"kind": "text",
						"text": " is used by "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "BasicCrawler"
					},
					{
						"kind": "text",
						"text": ", "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "CheerioCrawler"
					},
					{
						"kind": "text",
						"text": ", "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "PuppeteerCrawler"
					},
					{
						"kind": "text",
						"text": "\nand "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "PlaywrightCrawler"
					},
					{
						"kind": "text",
						"text": " as a source of URLs to crawl.\nUnlike "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "RequestList"
					},
					{
						"kind": "text",
						"text": ", "
					},
					{
						"kind": "code",
						"text": "`RequestQueue`"
					},
					{
						"kind": "text",
						"text": " supports dynamic adding and removing of requests.\nOn the other hand, the queue is not optimized for operations that add or remove a large number of URLs in a batch.\n\n"
					},
					{
						"kind": "code",
						"text": "`RequestQueue`"
					},
					{
						"kind": "text",
						"text": " stores its data either on local disk or in the Apify Cloud,\ndepending on whether the "
					},
					{
						"kind": "code",
						"text": "`APIFY_LOCAL_STORAGE_DIR`"
					},
					{
						"kind": "text",
						"text": " or "
					},
					{
						"kind": "code",
						"text": "`APIFY_TOKEN`"
					},
					{
						"kind": "text",
						"text": " environment variable is set.\n\nIf the "
					},
					{
						"kind": "code",
						"text": "`APIFY_LOCAL_STORAGE_DIR`"
					},
					{
						"kind": "text",
						"text": " environment variable is set, the queue data is stored in\nthat directory in an SQLite database file.\n\nIf the "
					},
					{
						"kind": "code",
						"text": "`APIFY_TOKEN`"
					},
					{
						"kind": "text",
						"text": " environment variable is set but "
					},
					{
						"kind": "code",
						"text": "`APIFY_LOCAL_STORAGE_DIR`"
					},
					{
						"kind": "text",
						"text": " is not, the data is stored in the\n[Apify Request Queue](https://docs.apify.com/storage/request-queue)\ncloud storage. Note that you can force usage of the cloud storage also by passing the "
					},
					{
						"kind": "code",
						"text": "`forceCloud`"
					},
					{
						"kind": "text",
						"text": "\noption to "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "RequestQueue.open"
					},
					{
						"kind": "text",
						"text": " function,\neven if the "
					},
					{
						"kind": "code",
						"text": "`APIFY_LOCAL_STORAGE_DIR`"
					},
					{
						"kind": "text",
						"text": " variable is set.\n\n**Example usage:**\n\n"
					},
					{
						"kind": "code",
						"text": "```javascript\n// Open the default request queue associated with the crawler run\nconst queue = await RequestQueue.open();\n\n// Open a named request queue\nconst queueWithName = await RequestQueue.open('some-name');\n\n// Enqueue few requests\nawait queue.addRequest({ url: 'http://example.com/aaa' });\nawait queue.addRequest({ url: 'http://example.com/bbb' });\nawait queue.addRequest({ url: 'http://example.com/foo/bar' }, { forefront: true });\n```"
					}
				]
			},
			"children": [
				{
					"id": 152,
					"name": "assumedHandledCount",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 138,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 151,
					"name": "assumedTotalCount",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 137,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 137,
					"name": "client",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 118,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "RequestQueueClient",
						"qualifiedName": "RequestQueueClient",
						"package": "@crawlee/types"
					}
				},
				{
					"id": 136,
					"name": "clientKey",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 117,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 131,
					"name": "config",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 112,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "Configuration",
						"qualifiedName": "Configuration",
						"package": "@crawlee/core"
					}
				},
				{
					"id": 133,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 114,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 147,
					"name": "inProgress",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 133,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Set",
						"qualifiedName": "Set",
						"package": "typescript"
					}
				},
				{
					"id": 149,
					"name": "internalTimeoutMillis",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 135,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 148,
					"name": "lastActivity",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 134,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "Date",
						"qualifiedName": "Date",
						"package": "typescript"
					}
				},
				{
					"id": 132,
					"name": "log",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 113,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 244,
						"name": "Log",
						"qualifiedName": "Log",
						"package": "@apify/log"
					}
				},
				{
					"id": 134,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 115,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 140,
					"name": "queryQueueHeadPromise",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 126,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 141,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"children": [
												{
													"id": 146,
													"name": "hadMultipleClients",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
															"line": 131,
															"character": 8
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 143,
													"name": "prevLimit",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
															"line": 128,
															"character": 8
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 145,
													"name": "queryStartedAt",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
															"line": 130,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Date",
														"qualifiedName": "Date",
														"package": "typescript"
													}
												},
												{
													"id": 144,
													"name": "queueModifiedAt",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
															"line": 129,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Date",
														"qualifiedName": "Date",
														"package": "typescript"
													}
												},
												{
													"id": 142,
													"name": "wasLimitReached",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
															"line": 127,
															"character": 8
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														146,
														143,
														145,
														144,
														142
													]
												}
											],
											"sources": [
												{
													"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
													"line": 126,
													"character": 36
												}
											]
										}
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 150,
					"name": "recentlyHandled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 136,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "LruCache",
						"qualifiedName": "LruCache",
						"package": "@apify/datastructures"
					}
				},
				{
					"id": 153,
					"name": "requestsCache",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 139,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reflection",
								"declaration": {
									"id": 154,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExternal": true
									},
									"children": [
										{
											"id": 158,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
													"line": 143,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 157,
											"name": "isHandled",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
													"line": 142,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 155,
											"name": "uniqueKey",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
													"line": 140,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 156,
											"name": "wasAlreadyHandled",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
													"line": 141,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												158,
												157,
												155,
												156
											]
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
											"line": 139,
											"character": 28
										}
									]
								}
							}
						],
						"name": "LruCache",
						"qualifiedName": "LruCache",
						"package": "@apify/datastructures"
					}
				},
				{
					"id": 135,
					"name": "timeoutSecs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 116,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 161,
					"name": "addRequest",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 167,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 162,
							"name": "addRequest",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a request to the queue.\n\nIf a request with the same "
									},
									{
										"kind": "code",
										"text": "`uniqueKey`"
									},
									{
										"kind": "text",
										"text": " property is already present in the queue,\nit will not be updated. You can find out whether this happened from the resulting\n"
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "QueueOperationInfo"
									},
									{
										"kind": "text",
										"text": " object.\n\nTo add multiple requests to the queue by extracting links from a webpage,\nsee the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "enqueueLinks"
									},
									{
										"kind": "text",
										"text": " helper function."
									}
								]
							},
							"parameters": [
								{
									"id": 163,
									"name": "requestLike",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "inline-tag",
												"tag": "@apilink",
												"text": "Request"
											},
											{
												"kind": "text",
												"text": " object or vanilla object with request data.\nNote that the function sets the "
											},
											{
												"kind": "code",
												"text": "`uniqueKey`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`id`"
											},
											{
												"kind": "text",
												"text": " fields to the passed Request."
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "Source",
										"qualifiedName": "Source",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 164,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Request queue operation options."
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 221,
										"name": "RequestQueueOperationOptions",
										"qualifiedName": "RequestQueueOperationOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "RequestQueueOperationInfo",
										"qualifiedName": "RequestQueueOperationInfo",
										"package": "@crawlee/core"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 165,
					"name": "addRequests",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 179,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 166,
							"name": "addRequests",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds requests to the queue in batches of 25.\n\nIf a request that is passed in is already present due to its "
									},
									{
										"kind": "code",
										"text": "`uniqueKey`"
									},
									{
										"kind": "text",
										"text": " property being the same,\nit will not be updated. You can find out whether this happened by finding the request in the resulting\n"
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "BatchAddRequestsResult"
									},
									{
										"kind": "text",
										"text": " object."
									}
								]
							},
							"parameters": [
								{
									"id": 167,
									"name": "requestsLike",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "inline-tag",
												"tag": "@apilink",
												"text": "Request"
											},
											{
												"kind": "text",
												"text": " objects or vanilla objects with request data.\nNote that the function sets the "
											},
											{
												"kind": "code",
												"text": "`uniqueKey`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`id`"
											},
											{
												"kind": "text",
												"text": " fields to the passed requests if missing."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Source",
											"qualifiedName": "Source",
											"package": "@crawlee/core"
										}
									}
								},
								{
									"id": 168,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Request queue operation options."
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 221,
										"name": "RequestQueueOperationOptions",
										"qualifiedName": "RequestQueueOperationOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "BatchAddRequestsResult",
										"qualifiedName": "BatchAddRequestsResult",
										"package": "@crawlee/types"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 169,
					"name": "addRequestsBatched",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 189,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 170,
							"name": "addRequestsBatched",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds requests to the queue in batches. By default, it will resolve after the initial batch is added, and continue\nadding the rest in background. You can configure the batch size via "
									},
									{
										"kind": "code",
										"text": "`batchSize`"
									},
									{
										"kind": "text",
										"text": " option and the sleep time in between\nthe batches via "
									},
									{
										"kind": "code",
										"text": "`waitBetweenBatchesMillis`"
									},
									{
										"kind": "text",
										"text": ". If you want to wait for all batches to be added to the queue, you can use\nthe "
									},
									{
										"kind": "code",
										"text": "`waitForAllRequestsToBeAdded`"
									},
									{
										"kind": "text",
										"text": " promise you get in the response object."
									}
								]
							},
							"parameters": [
								{
									"id": 171,
									"name": "requests",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The requests to add"
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"name": "Source",
													"qualifiedName": "Source",
													"package": "@crawlee/core"
												}
											]
										}
									}
								},
								{
									"id": 172,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Options for the request queue"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "AddRequestsBatchedOptions",
										"qualifiedName": "AddRequestsBatchedOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "AddRequestsBatchedResult",
										"qualifiedName": "AddRequestsBatchedResult",
										"package": "@crawlee/core"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 202,
					"name": "drop",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 268,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 203,
							"name": "drop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the queue either from the Apify Cloud storage or from the local database,\ndepending on the mode of operation."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 177,
					"name": "fetchNextRequest",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 214,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 178,
							"name": "fetchNextRequest",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a next request in the queue to be processed, or "
									},
									{
										"kind": "code",
										"text": "`null`"
									},
									{
										"kind": "text",
										"text": " if there are no more pending requests.\n\nOnce you successfully finish processing of the request, you need to call\n"
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "RequestQueue.markRequestHandled"
									},
									{
										"kind": "text",
										"text": "\nto mark the request as handled in the queue. If there was some error in processing the request,\ncall "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "RequestQueue.reclaimRequest"
									},
									{
										"kind": "text",
										"text": " instead,\nso that the queue will give the request to some other consumer in another call to the "
									},
									{
										"kind": "code",
										"text": "`fetchNextRequest`"
									},
									{
										"kind": "text",
										"text": " function.\n\nNote that the "
									},
									{
										"kind": "code",
										"text": "`null`"
									},
									{
										"kind": "text",
										"text": " return value doesn't mean the queue processing finished,\nit means there are currently no pending requests.\nTo check whether all requests in queue were finished,\nuse "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "RequestQueue.isFinished"
									},
									{
										"kind": "text",
										"text": " instead."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Returns the request object or "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": " if there are no more pending requests."
											}
										]
									}
								]
							},
							"typeParameter": [
								{
									"id": 179,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 179,
														"name": "T",
														"qualifiedName": "T",
														"package": "@crawlee/core"
													}
												],
												"name": "Request",
												"qualifiedName": "Request",
												"package": "@crawlee/core"
											}
										]
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 206,
					"name": "getInfo",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 303,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 207,
							"name": "getInfo",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an object containing general information about the request queue.\n\nThe function returns the same object as the Apify API Client's\n[getQueue](https://docs.apify.com/api/apify-client-js/latest#ApifyClient-requestQueues)\nfunction, which in turn calls the\n[Get request queue](https://apify.com/docs/api/v2#/reference/request-queues/queue/get-request-queue)\nAPI endpoint.\n\n**Example:**\n"
									},
									{
										"kind": "code",
										"text": "```\n{\n  id: \"WkzbQMuFYuamGv3YF\",\n  name: \"my-queue\",\n  userId: \"wRsJZtadYvn4mBZmm\",\n  createdAt: new Date(\"2015-12-12T07:34:14.202Z\"),\n  modifiedAt: new Date(\"2015-12-13T08:36:13.202Z\"),\n  accessedAt: new Date(\"2015-12-14T08:36:13.202Z\"),\n  totalRequestCount: 25,\n  handledRequestCount: 5,\n  pendingRequestCount: 20,\n}\n```"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"name": "RequestQueueInfo",
												"qualifiedName": "RequestQueueInfo",
												"package": "@crawlee/types"
											}
										]
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 173,
					"name": "getRequest",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 196,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 174,
							"name": "getRequest",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Gets the request from the queue specified by ID."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Returns the request object, or "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": " if it was not found."
											}
										]
									}
								]
							},
							"typeParameter": [
								{
									"id": 175,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									},
									"default": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Dictionary",
										"qualifiedName": "Dictionary",
										"package": "@crawlee/types"
									}
								}
							],
							"parameters": [
								{
									"id": 176,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "ID of the request."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 175,
														"name": "T",
														"qualifiedName": "T",
														"package": "@crawlee/core"
													}
												],
												"name": "Request",
												"qualifiedName": "Request",
												"package": "@crawlee/core"
											}
										]
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 204,
					"name": "handledCount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 278,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 205,
							"name": "handledCount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the number of handled requests.\n\nThis function is just a convenient shortcut for:\n\n"
									},
									{
										"kind": "code",
										"text": "```javascript\nconst { handledRequestCount } = await queue.getInfo();\n```"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 187,
					"name": "isEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 235,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 188,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Resolves to "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if the next call to "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "RequestQueue.fetchNextRequest"
									},
									{
										"kind": "text",
										"text": "\nwould return "
									},
									{
										"kind": "code",
										"text": "`null`"
									},
									{
										"kind": "text",
										"text": ", otherwise it resolves to "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": ".\nNote that even if the queue is empty, there might be some pending requests currently being processed.\nIf you need to ensure that there is no activity in the queue, use "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "RequestQueue.isFinished"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 189,
					"name": "isFinished",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 242,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 190,
							"name": "isFinished",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Resolves to "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if all requests were already handled and there are no more left.\nDue to the nature of distributed storage used by the queue,\nthe function might occasionally return a false negative,\nbut it will never return a false positive."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 180,
					"name": "markRequestHandled",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 221,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 181,
							"name": "markRequestHandled",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Marks a request that was previously returned by the\n"
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "RequestQueue.fetchNextRequest"
									},
									{
										"kind": "text",
										"text": "\nfunction as handled after successful processing.\nHandled requests will never again be returned by the "
									},
									{
										"kind": "code",
										"text": "`fetchNextRequest`"
									},
									{
										"kind": "text",
										"text": " function."
									}
								]
							},
							"parameters": [
								{
									"id": 182,
									"name": "request",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Dictionary",
												"qualifiedName": "Dictionary",
												"package": "@crawlee/types"
											}
										],
										"name": "Request",
										"qualifiedName": "Request",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"name": "RequestQueueOperationInfo",
												"qualifiedName": "RequestQueueOperationInfo",
												"package": "@crawlee/core"
											}
										]
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 183,
					"name": "reclaimRequest",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 228,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 184,
							"name": "reclaimRequest",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reclaims a failed request back to the queue, so that it can be returned for processing later again\nby another call to "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "RequestQueue.fetchNextRequest"
									},
									{
										"kind": "text",
										"text": ".\nThe request record in the queue is updated using the provided "
									},
									{
										"kind": "code",
										"text": "`request`"
									},
									{
										"kind": "text",
										"text": " parameter.\nFor example, this lets you store the number of retries or error messages for the request."
									}
								]
							},
							"parameters": [
								{
									"id": 185,
									"name": "request",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Dictionary",
												"qualifiedName": "Dictionary",
												"package": "@crawlee/types"
											}
										],
										"name": "Request",
										"qualifiedName": "Request",
										"package": "@crawlee/core"
									}
								},
								{
									"id": 186,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 221,
										"name": "RequestQueueOperationOptions",
										"qualifiedName": "RequestQueueOperationOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"name": "RequestQueueOperationInfo",
												"qualifiedName": "RequestQueueOperationInfo",
												"package": "@crawlee/core"
											}
										]
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 123,
					"name": "open",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 332,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 124,
							"name": "open",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Opens a request queue and returns a promise resolving to an instance\nof the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "RequestQueue"
									},
									{
										"kind": "text",
										"text": " class.\n\n"
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "RequestQueue"
									},
									{
										"kind": "text",
										"text": " represents a queue of URLs to crawl, which is stored either on local filesystem or in the cloud.\nThe queue is used for deep crawling of websites, where you start with several URLs and then\nrecursively follow links to other pages. The data structure supports both breadth-first\nand depth-first crawling orders.\n\nFor more details and code examples, see the "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "RequestQueue"
									},
									{
										"kind": "text",
										"text": " class."
									}
								]
							},
							"parameters": [
								{
									"id": 125,
									"name": "queueIdOrName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "ID or name of the request queue to be opened. If "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`undefined`"
											},
											{
												"kind": "text",
												"text": ",\n  the function returns the default request queue associated with the crawler run."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 126,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Open Request Queue options."
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "StorageManagerOptions",
										"qualifiedName": "StorageManagerOptions",
										"package": "@crawlee/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 122,
										"name": "RequestQueue",
										"qualifiedName": "RequestQueue",
										"package": "@crawlee/core"
									}
								],
								"name": "Promise",
								"qualifiedName": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						152,
						151,
						137,
						136,
						131,
						133,
						147,
						149,
						148,
						132,
						134,
						140,
						150,
						153,
						135
					]
				},
				{
					"title": "Methods",
					"children": [
						161,
						165,
						169,
						202,
						177,
						206,
						173,
						204,
						187,
						189,
						180,
						183,
						123
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
					"line": 111,
					"character": 21
				}
			]
		},
		{
			"id": 1087,
			"name": "AbortOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1090,
					"name": "gracefully",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/run.d.ts",
							"line": 76,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "RunAbortOptions.gracefully"
					}
				},
				{
					"id": 1089,
					"name": "statusMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Exit with given status message"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1600,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1600"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1088,
					"name": "token",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "User API token that is used to run the Actor. By default, it is taken from the "
							},
							{
								"kind": "code",
								"text": "`APIFY_TOKEN`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1597,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1597"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1090,
						1089,
						1088
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1593,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1593"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "RunAbortOptions",
					"qualifiedName": "RunAbortOptions",
					"package": "apify-client"
				}
			]
		},
		{
			"id": 1107,
			"name": "ActorRun",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 1118,
					"name": "actId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 172,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActorRunListItem.actId"
					}
				},
				{
					"id": 1119,
					"name": "actorTaskId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 173,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActorRunListItem.actorTaskId"
					}
				},
				{
					"id": 1124,
					"name": "buildId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 178,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActorRunListItem.buildId"
					}
				},
				{
					"id": 1125,
					"name": "buildNumber",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 179,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActorRunListItem.buildNumber"
					}
				},
				{
					"id": 1113,
					"name": "containerUrl",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 190,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1127,
					"name": "defaultDatasetId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 181,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActorRunListItem.defaultDatasetId"
					}
				},
				{
					"id": 1126,
					"name": "defaultKeyValueStoreId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 180,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActorRunListItem.defaultKeyValueStoreId"
					}
				},
				{
					"id": 1128,
					"name": "defaultRequestQueueId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 182,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActorRunListItem.defaultRequestQueueId"
					}
				},
				{
					"id": 1112,
					"name": "exitCode",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 189,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1121,
					"name": "finishedAt",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 175,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "Date",
						"qualifiedName": "Date",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActorRunListItem.finishedAt"
					}
				},
				{
					"id": 1115,
					"name": "gitBranchName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 192,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1117,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 171,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActorRunListItem.id"
					}
				},
				{
					"id": 1114,
					"name": "isContainerServerReady",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 191,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1123,
					"name": "meta",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 177,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "ActorRunMeta",
						"qualifiedName": "ActorRunMeta",
						"package": "apify-client"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActorRunListItem.meta"
					}
				},
				{
					"id": 1111,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 188,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "ActorRunOptions",
						"qualifiedName": "ActorRunOptions",
						"package": "apify-client"
					}
				},
				{
					"id": 1120,
					"name": "startedAt",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 174,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "Date",
						"qualifiedName": "Date",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActorRunListItem.startedAt"
					}
				},
				{
					"id": 1110,
					"name": "stats",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 187,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "ActorRunStats",
						"qualifiedName": "ActorRunStats",
						"package": "apify-client"
					}
				},
				{
					"id": 1122,
					"name": "status",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 176,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "READY"
							},
							{
								"type": "literal",
								"value": "RUNNING"
							},
							{
								"type": "literal",
								"value": "SUCCEEDED"
							},
							{
								"type": "literal",
								"value": "FAILED"
							},
							{
								"type": "literal",
								"value": "ABORTING"
							},
							{
								"type": "literal",
								"value": "ABORTED"
							},
							{
								"type": "literal",
								"value": "TIMING-OUT"
							},
							{
								"type": "literal",
								"value": "TIMED-OUT"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActorRunListItem.status"
					}
				},
				{
					"id": 1109,
					"name": "statusMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 186,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1116,
					"name": "usage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 193,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "ActorRunUsage",
						"qualifiedName": "ActorRunUsage",
						"package": "apify-client"
					}
				},
				{
					"id": 1108,
					"name": "userId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 185,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1118,
						1119,
						1124,
						1125,
						1113,
						1127,
						1126,
						1128,
						1112,
						1121,
						1115,
						1117,
						1114,
						1123,
						1111,
						1120,
						1110,
						1122,
						1109,
						1116,
						1108
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
					"line": 184,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ActorRunListItem",
					"qualifiedName": "ActorRunListItem",
					"package": "apify-client"
				}
			]
		},
		{
			"id": 782,
			"name": "ApifyClientOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 783,
					"name": "baseUrl",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "https://api.apify.com"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 122,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 784,
					"name": "maxRetries",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "8"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 124,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 785,
					"name": "minDelayBetweenRetriesMillis",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "500"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 126,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 786,
					"name": "requestInterceptors",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "[]"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 128,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "undefined"
								},
								{
									"type": "reflection",
									"declaration": {
										"id": 787,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {
											"isExternal": true
										},
										"sources": [
											{
												"fileName": "node_modules/apify-client/node_modules/axios/index.d.ts",
												"line": 133,
												"character": 27
											}
										],
										"signatures": [
											{
												"id": 788,
												"name": "__type",
												"kind": 4096,
												"kindString": "Call signature",
												"flags": {
													"isExternal": true
												},
												"parameters": [
													{
														"id": 789,
														"name": "value",
														"kind": 32768,
														"kindString": "Parameter",
														"flags": {
															"isExternal": true
														},
														"type": {
															"type": "reference",
															"name": "ApifyRequestConfig",
															"qualifiedName": "ApifyRequestConfig",
															"package": "apify-client"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										]
									}
								}
							]
						}
					}
				},
				{
					"id": 790,
					"name": "timeoutSecs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "360"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 130,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 791,
					"name": "token",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
							"line": 131,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						783,
						784,
						785,
						786,
						790,
						791
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/apify-client/dist/apify_client.d.ts",
					"line": 120,
					"character": 17
				}
			]
		},
		{
			"id": 1055,
			"name": "ApifyEnv",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Parsed representation of the Apify environment variables.\nThis object is returned by the "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "Actor.getEnv"
					},
					{
						"kind": "text",
						"text": " function."
					}
				]
			},
			"children": [
				{
					"id": 1056,
					"name": "actorId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "ID of the Actor (ACTOR_ID)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1524,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1524"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1057,
					"name": "actorRunId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "ID of the Actor run (ACTOR_RUN_ID)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1529,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1529"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1058,
					"name": "actorTaskId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "ID of the Actor task (ACTOR_TASK_ID)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1534,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1534"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1064,
					"name": "defaultDatasetId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "ID of the dataset where input and output data of this\nActor is stored (ACTOR_DEFAULT_DATASET_ID)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1568,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1568"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1063,
					"name": "defaultKeyValueStoreId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "ID of the key-value store where input and output data of this\nActor is stored (ACTOR_DEFAULT_KEY_VALUE_STORE_ID)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1562,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1562"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1065,
					"name": "memoryMbytes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Amount of memory allocated for the Actor,\nin megabytes (ACTOR_MEMORY_MBYTES)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1574,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1574"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 1061,
					"name": "startedAt",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Date when the Actor was started (ACTOR_STARTED_AT)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1551,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1551"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"name": "Date",
								"qualifiedName": "Date",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 1062,
					"name": "timeoutAt",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Date when the Actor will time out (ACTOR_TIMEOUT_AT)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1556,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1556"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"name": "Date",
								"qualifiedName": "Date",
								"package": "typescript"
							}
						]
					}
				},
				{
					"id": 1060,
					"name": "token",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Authentication token representing privileges given to the Actor run,\nit can be passed to various Apify APIs (APIFY_TOKEN)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1546,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1546"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1059,
					"name": "userId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "ID of the user who started the Actor - note that it might be\ndifferent than the owner ofthe Actor (APIFY_USER_ID)"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1540,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1540"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1056,
						1057,
						1058,
						1064,
						1063,
						1065,
						1061,
						1062,
						1060,
						1059
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1520,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1520"
				}
			]
		},
		{
			"id": 1070,
			"name": "CallOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1073,
					"name": "build",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Tag or number of the Actor build to run (e.g. "
							},
							{
								"kind": "code",
								"text": "`beta`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`1.2.345`"
							},
							{
								"kind": "text",
								"text": ").\nIf not provided, the run uses build tag or number from the default Actor run configuration (typically "
							},
							{
								"kind": "code",
								"text": "`latest`"
							},
							{
								"kind": "text",
								"text": ")."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 129,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActorCallOptions.build"
					}
				},
				{
					"id": 1074,
					"name": "contentType",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Content type for the "
							},
							{
								"kind": "code",
								"text": "`input`"
							},
							{
								"kind": "text",
								"text": ". If not specified,\n"
							},
							{
								"kind": "code",
								"text": "`input`"
							},
							{
								"kind": "text",
								"text": " is expected to be an object that will be stringified to JSON and content type set to\n"
							},
							{
								"kind": "code",
								"text": "`application/json; charset=utf-8`"
							},
							{
								"kind": "text",
								"text": ". If "
							},
							{
								"kind": "code",
								"text": "`options.contentType`"
							},
							{
								"kind": "text",
								"text": " is specified, then "
							},
							{
								"kind": "code",
								"text": "`input`"
							},
							{
								"kind": "text",
								"text": " must be a\n"
							},
							{
								"kind": "code",
								"text": "`String`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`Buffer`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 136,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActorCallOptions.contentType"
					}
				},
				{
					"id": 1078,
					"name": "maxItems",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Specifies maximum number of items that the Actor run should return.\nThis is used by pay per result Actors to limit the maximum number of results that will be charged to customer.\nValue can be accessed in Actor run using "
							},
							{
								"kind": "code",
								"text": "`APIFY_ACTOR_MAX_ITEMS`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 165,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActorCallOptions.maxItems"
					}
				},
				{
					"id": 1075,
					"name": "memory",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Memory in megabytes which will be allocated for the new Actor run.\nIf not provided, the run uses memory of the default Actor run configuration."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 141,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActorCallOptions.memory"
					}
				},
				{
					"id": 1076,
					"name": "timeout",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Timeout for the Actor run in seconds. Zero value means there is no timeout.\nIf not provided, the run uses timeout of the default Actor run configuration."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 146,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActorCallOptions.timeout"
					}
				},
				{
					"id": 1071,
					"name": "token",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "User API token that is used to run the Actor. By default, it is taken from the "
							},
							{
								"kind": "code",
								"text": "`APIFY_TOKEN`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1583,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1583"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1072,
					"name": "waitSecs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 168,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActorCallOptions.waitSecs"
					}
				},
				{
					"id": 1077,
					"name": "webhooks",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Specifies optional webhooks associated with the Actor run, which can be used\nto receive a notification e.g. when the Actor finished or failed, see\n[ad hook webhooks documentation](https://docs.apify.com/webhooks/ad-hoc-webhooks) for detailed description."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 159,
							"character": 4
						}
					],
					"type": {
						"type": "typeOperator",
						"operator": "readonly",
						"target": {
							"type": "array",
							"elementType": {
								"type": "reference",
								"name": "WebhookUpdateData",
								"qualifiedName": "WebhookUpdateData",
								"package": "apify-client"
							}
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ActorCallOptions.webhooks"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1073,
						1074,
						1078,
						1075,
						1076,
						1071,
						1072,
						1077
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1579,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1579"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ActorCallOptions",
					"qualifiedName": "ActorCallOptions",
					"package": "apify-client"
				}
			]
		},
		{
			"id": 1079,
			"name": "CallTaskOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1082,
					"name": "build",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Tag or number of the Actor build to run (e.g. "
							},
							{
								"kind": "code",
								"text": "`beta`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`1.2.345`"
							},
							{
								"kind": "text",
								"text": ").\nIf not provided, the run uses build tag or number from the default Actor run configuration (typically "
							},
							{
								"kind": "code",
								"text": "`latest`"
							},
							{
								"kind": "text",
								"text": ")."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 129,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "TaskCallOptions.build"
					}
				},
				{
					"id": 1086,
					"name": "maxItems",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Specifies maximum number of items that the Actor run should return.\nThis is used by pay per result Actors to limit the maximum number of results that will be charged to customer.\nValue can be accessed in Actor run using "
							},
							{
								"kind": "code",
								"text": "`APIFY_ACTOR_MAX_ITEMS`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 165,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "TaskCallOptions.maxItems"
					}
				},
				{
					"id": 1083,
					"name": "memory",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Memory in megabytes which will be allocated for the new Actor run.\nIf not provided, the run uses memory of the default Actor run configuration."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 141,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "TaskCallOptions.memory"
					}
				},
				{
					"id": 1084,
					"name": "timeout",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Timeout for the Actor run in seconds. Zero value means there is no timeout.\nIf not provided, the run uses timeout of the default Actor run configuration."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 146,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "TaskCallOptions.timeout"
					}
				},
				{
					"id": 1080,
					"name": "token",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "User API token that is used to run the Actor. By default, it is taken from the "
							},
							{
								"kind": "code",
								"text": "`APIFY_TOKEN`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1590,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1590"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1081,
					"name": "waitSecs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/task.d.ts",
							"line": 86,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "TaskCallOptions.waitSecs"
					}
				},
				{
					"id": 1085,
					"name": "webhooks",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Specifies optional webhooks associated with the Actor run, which can be used\nto receive a notification e.g. when the Actor finished or failed, see\n[ad hook webhooks documentation](https://docs.apify.com/webhooks/ad-hoc-webhooks) for detailed description."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/apify-client/dist/resource_clients/actor.d.ts",
							"line": 159,
							"character": 4
						}
					],
					"type": {
						"type": "typeOperator",
						"operator": "readonly",
						"target": {
							"type": "array",
							"elementType": {
								"type": "reference",
								"name": "WebhookUpdateData",
								"qualifiedName": "WebhookUpdateData",
								"package": "apify-client"
							}
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "TaskCallOptions.webhooks"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1082,
						1086,
						1083,
						1084,
						1080,
						1081,
						1085
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1586,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1586"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "TaskCallOptions",
					"qualifiedName": "TaskCallOptions",
					"package": "apify-client"
				}
			]
		},
		{
			"id": 1134,
			"name": "ConfigurationOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1136,
					"name": "actorEventsWsUrl",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 12,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L12"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1138,
					"name": "actorId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 14,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L14"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1139,
					"name": "actorRunId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 15,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L15"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1140,
					"name": "actorTaskId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 16,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L16"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1141,
					"name": "apiBaseUrl",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 17,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L17"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1160,
					"name": "availableMemoryRatio",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Sets the ratio, defining the amount of system memory that could be used by the "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "AutoscaledPool"
							},
							{
								"kind": "text",
								"text": ".\nWhen the memory usage is more than the provided ratio, the memory is considered overloaded.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_AVAILABLE_MEMORY_RATIO`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "0.25"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 65,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfigurationOptions.availableMemoryRatio"
					}
				},
				{
					"id": 1167,
					"name": "chromeExecutablePath",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines a path to Chrome executable.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_CHROME_EXECUTABLE_PATH`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 112,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfigurationOptions.chromeExecutablePath"
					}
				},
				{
					"id": 1142,
					"name": "containerPort",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 18,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L18"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1143,
					"name": "containerUrl",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 19,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L19"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1168,
					"name": "defaultBrowserPath",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines a path to default browser executable.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_DEFAULT_BROWSER_PATH`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 118,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfigurationOptions.defaultBrowserPath"
					}
				},
				{
					"id": 1155,
					"name": "defaultDatasetId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Default dataset id.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_DEFAULT_DATASET_ID`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "'default'"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 30,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfigurationOptions.defaultDatasetId"
					}
				},
				{
					"id": 1157,
					"name": "defaultKeyValueStoreId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Default key-value store id.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_DEFAULT_KEY_VALUE_STORE_ID`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "'default'"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 44,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfigurationOptions.defaultKeyValueStoreId"
					}
				},
				{
					"id": 1158,
					"name": "defaultRequestQueueId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Default request queue id.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_DEFAULT_REQUEST_QUEUE_ID`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "'default'"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 51,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfigurationOptions.defaultRequestQueueId"
					}
				},
				{
					"id": 1169,
					"name": "disableBrowserSandbox",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines whether to disable browser sandbox by adding "
							},
							{
								"kind": "code",
								"text": "`--no-sandbox`"
							},
							{
								"kind": "text",
								"text": " flag to "
							},
							{
								"kind": "code",
								"text": "`launchOptions`"
							},
							{
								"kind": "text",
								"text": ".\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_DISABLE_BROWSER_SANDBOX`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 124,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfigurationOptions.disableBrowserSandbox"
					}
				},
				{
					"id": 1153,
					"name": "eventManager",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines the Event Manager to be used."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "EventManager"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 18,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "EventManager",
						"qualifiedName": "EventManager",
						"package": "@crawlee/core"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfigurationOptions.eventManager"
					}
				},
				{
					"id": 1165,
					"name": "headless",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines whether web browsers launched by Crawlee will run in the headless mode.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_HEADLESS`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "true"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 99,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfigurationOptions.headless"
					}
				},
				{
					"id": 1164,
					"name": "inputKey",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines the default input key, i.e. the key that is used to get the crawler input value\nfrom the default "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "KeyValueStore"
							},
							{
								"kind": "text",
								"text": " associated with the current crawler run.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_INPUT_KEY`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "'INPUT'"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 92,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfigurationOptions.inputKey"
					}
				},
				{
					"id": 1151,
					"name": "inputSecretsPrivateKeyFile",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 27,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L27"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1150,
					"name": "inputSecretsPrivateKeyPassphrase",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 26,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L26"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1148,
					"name": "isAtHome",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 24,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L24"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1170,
					"name": "logLevel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Sets the log level to the given value.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_LOG_LEVEL`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "'INFO'"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 131,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 314,
								"name": "LogLevel",
								"qualifiedName": "LogLevel",
								"package": "@apify/log"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1171,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 550,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 1172,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isExternal": true
											},
											"parameters": [
												{
													"id": 1173,
													"name": "radix",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1174,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 556,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 1175,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isExternal": true
											},
											"parameters": [
												{
													"id": 1176,
													"name": "fractionDigits",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1177,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 562,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 1178,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isExternal": true
											},
											"parameters": [
												{
													"id": 1179,
													"name": "fractionDigits",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1180,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 568,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 1181,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isExternal": true
											},
											"parameters": [
												{
													"id": 1182,
													"name": "precision",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1183,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 571,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 1184,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								}
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1185,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "website/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 4503,
											"character": 4
										},
										{
											"fileName": "website/node_modules/typescript/lib/lib.es2020.number.d.ts",
											"line": 29,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 1186,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isExternal": true
											},
											"parameters": [
												{
													"id": 1187,
													"name": "locales",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														]
													}
												},
												{
													"id": 1188,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "NumberFormatOptions",
														"qualifiedName": "Intl.NumberFormatOptions",
														"package": "typescript"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1189,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isExternal": true
											},
											"parameters": [
												{
													"id": 1190,
													"name": "locales",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "LocalesArgument",
														"qualifiedName": "Intl.LocalesArgument",
														"package": "typescript"
													}
												},
												{
													"id": 1191,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "NumberFormatOptions",
														"qualifiedName": "Intl.NumberFormatOptions",
														"package": "typescript"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfigurationOptions.logLevel"
					}
				},
				{
					"id": 1159,
					"name": "maxUsedCpuRatio",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Sets the ratio, defining the maximum CPU usage.\nWhen the CPU usage is higher than the provided ratio, the CPU is considered overloaded."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "0.95"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 57,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfigurationOptions.maxUsedCpuRatio"
					}
				},
				{
					"id": 1161,
					"name": "memoryMbytes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Sets the amount of system memory in megabytes to be used by the "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "AutoscaledPool"
							},
							{
								"kind": "text",
								"text": ".\nBy default, the maximum memory is set to one quarter of total system memory.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_MEMORY_MBYTES`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 72,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfigurationOptions.memoryMbytes"
					}
				},
				{
					"id": 1135,
					"name": "metamorphAfterSleepMillis",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 11,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L11"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1162,
					"name": "persistStateIntervalMillis",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines the interval of emitting the "
							},
							{
								"kind": "code",
								"text": "`persistState`"
							},
							{
								"kind": "text",
								"text": " event.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_PERSIST_STATE_INTERVAL_MILLIS`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "60_000"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 79,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfigurationOptions.persistStateIntervalMillis"
					}
				},
				{
					"id": 1192,
					"name": "persistStorage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines whether the storage client used should persist the data it stores.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_PERSIST_STORAGE`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 137,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfigurationOptions.persistStorage"
					}
				},
				{
					"id": 1144,
					"name": "proxyHostname",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 20,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L20"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1145,
					"name": "proxyPassword",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 21,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L21"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1146,
					"name": "proxyPort",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 22,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L22"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1147,
					"name": "proxyStatusUrl",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 23,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L23"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1156,
					"name": "purgeOnStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines whether to purge the default storage folders before starting the crawler run.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_PURGE_ON_START`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "true"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 37,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfigurationOptions.purgeOnStart"
					}
				},
				{
					"id": 1152,
					"name": "storageClient",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines storage client to be used."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "MemoryStorage"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 13,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "StorageClient",
						"qualifiedName": "StorageClient",
						"package": "@crawlee/types"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfigurationOptions.storageClient"
					}
				},
				{
					"id": 1154,
					"name": "storageClientOptions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Could be used to adjust the storage client behavior\ne.g. "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "MemoryStorageOptions"
							},
							{
								"kind": "text",
								"text": " could be used to adjust the "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "MemoryStorage"
							},
							{
								"kind": "text",
								"text": " behavior."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 23,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Dictionary",
						"qualifiedName": "Dictionary",
						"package": "@crawlee/types"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfigurationOptions.storageClientOptions"
					}
				},
				{
					"id": 1163,
					"name": "systemInfoIntervalMillis",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines the interval of emitting the "
							},
							{
								"kind": "code",
								"text": "`systemInfo`"
							},
							{
								"kind": "text",
								"text": " event."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "60_000"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 84,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfigurationOptions.systemInfoIntervalMillis"
					}
				},
				{
					"id": 1137,
					"name": "token",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 13,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L13"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1149,
					"name": "userId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/configuration.ts",
							"line": 25,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L25"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1166,
					"name": "xvfb",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines whether to run X virtual framebuffer on the web browsers launched by Crawlee.\n\nAlternative to "
							},
							{
								"kind": "code",
								"text": "`CRAWLEE_XVFB`"
							},
							{
								"kind": "text",
								"text": " environment variable."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/configuration.d.ts",
							"line": 106,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreConfigurationOptions.xvfb"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1136,
						1138,
						1139,
						1140,
						1141,
						1160,
						1167,
						1142,
						1143,
						1168,
						1155,
						1157,
						1158,
						1169,
						1153,
						1165,
						1164,
						1151,
						1150,
						1148,
						1170,
						1159,
						1161,
						1135,
						1162,
						1192,
						1144,
						1145,
						1146,
						1147,
						1156,
						1152,
						1154,
						1163,
						1137,
						1149,
						1166
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/configuration.ts",
					"line": 10,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/configuration.ts#L10"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ConfigurationOptions",
					"qualifiedName": "ConfigurationOptions",
					"package": "@crawlee/core"
				}
			]
		},
		{
			"id": 92,
			"name": "DatasetConsumer",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExternal": true
			},
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
					"line": 338,
					"character": 17
				}
			],
			"typeParameters": [
				{
					"id": 93,
					"name": "Data",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExternal": true
					}
				}
			],
			"signatures": [
				{
					"id": 94,
					"name": "DatasetConsumer",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExternal": true
					},
					"parameters": [
						{
							"id": 95,
							"name": "item",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Current "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " entry being processed."
									}
								]
							},
							"type": {
								"type": "reference",
								"id": 93,
								"name": "Data",
								"qualifiedName": "DatasetConsumer.Data",
								"package": "@crawlee/core"
							}
						},
						{
							"id": 96,
							"name": "index",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Position of current "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " entry."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Awaitable",
						"qualifiedName": "Awaitable",
						"package": "@crawlee/core"
					}
				}
			]
		},
		{
			"id": 114,
			"name": "DatasetContent",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 116,
					"name": "count",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Count of dataset entries returned in this set."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 376,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 120,
					"name": "desc",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Should the results be in descending order."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 384,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 119,
					"name": "items",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Dataset entries based on chosen format parameter."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 382,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 121,
							"name": "Data",
							"qualifiedName": "DatasetContent.Data",
							"package": "@crawlee/core"
						}
					}
				},
				{
					"id": 118,
					"name": "limit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Maximum number of dataset entries requested."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 380,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 117,
					"name": "offset",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Position of the first returned entry in the dataset."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 378,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 115,
					"name": "total",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Total count of entries in the dataset."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 374,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						116,
						120,
						119,
						118,
						117,
						115
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
					"line": 372,
					"character": 17
				}
			],
			"typeParameters": [
				{
					"id": 121,
					"name": "Data",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExternal": true
					}
				}
			]
		},
		{
			"id": 73,
			"name": "DatasetDataOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 79,
					"name": "clean",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": " then the function returns only non-empty items and skips hidden fields (i.e. fields starting with "
							},
							{
								"kind": "code",
								"text": "`#`"
							},
							{
								"kind": "text",
								"text": " character).\nNote that the "
							},
							{
								"kind": "code",
								"text": "`clean`"
							},
							{
								"kind": "text",
								"text": " parameter is a shortcut for "
							},
							{
								"kind": "code",
								"text": "`skipHidden: true`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`skipEmpty: true`"
							},
							{
								"kind": "text",
								"text": " options."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 55,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 76,
					"name": "desc",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": " then the objects are sorted by "
							},
							{
								"kind": "code",
								"text": "`createdAt`"
							},
							{
								"kind": "text",
								"text": " in descending order.\nOtherwise they are sorted in ascending order."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 40,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 77,
					"name": "fields",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of field names that will be included in the result. If omitted, all fields are included in the results."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 44,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 75,
					"name": "limit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Maximum number of array elements to return."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "250000"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 34,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 74,
					"name": "offset",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Number of array elements that should be skipped at the start."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 29,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 81,
					"name": "skipEmpty",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": " then the function doesn't return empty items.\nNote that in this case the returned number of items might be lower than limit parameter and pagination must be done using the "
							},
							{
								"kind": "code",
								"text": "`limit`"
							},
							{
								"kind": "text",
								"text": " value."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 66,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 80,
					"name": "skipHidden",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": " then the function doesn't return hidden fields (fields starting with \"#\" character)."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 60,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 78,
					"name": "unwind",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Specifies a name of the field in the result objects that will be used to unwind the resulting objects.\nBy default, the results are returned as they are."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 49,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						79,
						76,
						77,
						75,
						74,
						81,
						80,
						78
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
					"line": 24,
					"character": 17
				}
			]
		},
		{
			"id": 82,
			"name": "DatasetIteratorOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 89,
					"name": "desc",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": " then the objects are sorted by "
							},
							{
								"kind": "code",
								"text": "`createdAt`"
							},
							{
								"kind": "text",
								"text": " in descending order.\nOtherwise they are sorted in ascending order."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 40,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.desc"
					}
				},
				{
					"id": 90,
					"name": "fields",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of field names that will be included in the result. If omitted, all fields are included in the results."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 44,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.fields"
					}
				},
				{
					"id": 91,
					"name": "unwind",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Specifies a name of the field in the result objects that will be used to unwind the resulting objects.\nBy default, the results are returned as they are."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 49,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.unwind"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						89,
						90,
						91
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
					"line": 68,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 73,
							"name": "DatasetDataOptions",
							"qualifiedName": "DatasetDataOptions",
							"package": "@crawlee/core"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "offset"
								},
								{
									"type": "literal",
									"value": "limit"
								},
								{
									"type": "literal",
									"value": "clean"
								},
								{
									"type": "literal",
									"value": "skipHidden"
								},
								{
									"type": "literal",
									"value": "skipEmpty"
								}
							]
						}
					],
					"name": "Omit",
					"qualifiedName": "Omit",
					"package": "typescript"
				}
			]
		},
		{
			"id": 97,
			"name": "DatasetMapper",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExternal": true
			},
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
					"line": 348,
					"character": 17
				}
			],
			"typeParameters": [
				{
					"id": 98,
					"name": "Data",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExternal": true
					}
				},
				{
					"id": 99,
					"name": "R",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExternal": true
					}
				}
			],
			"signatures": [
				{
					"id": 100,
					"name": "DatasetMapper",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "User-function used in the "
							},
							{
								"kind": "code",
								"text": "`Dataset.map()`"
							},
							{
								"kind": "text",
								"text": " API."
							}
						]
					},
					"parameters": [
						{
							"id": 101,
							"name": "item",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Current "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " entry being processed."
									}
								]
							},
							"type": {
								"type": "reference",
								"id": 98,
								"name": "Data",
								"qualifiedName": "DatasetMapper.Data",
								"package": "@crawlee/core"
							}
						},
						{
							"id": 102,
							"name": "index",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Position of current "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " entry."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 99,
								"name": "R",
								"qualifiedName": "DatasetMapper.R",
								"package": "@crawlee/core"
							}
						],
						"name": "Awaitable",
						"qualifiedName": "Awaitable",
						"package": "@crawlee/core"
					}
				}
			]
		},
		{
			"id": 110,
			"name": "DatasetOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 113,
					"name": "client",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 370,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "StorageClient",
						"qualifiedName": "StorageClient",
						"package": "@crawlee/types"
					}
				},
				{
					"id": 111,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 368,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 112,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
							"line": 369,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						113,
						111,
						112
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
					"line": 367,
					"character": 17
				}
			]
		},
		{
			"id": 103,
			"name": "DatasetReducer",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExternal": true
			},
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/dataset.d.ts",
					"line": 359,
					"character": 17
				}
			],
			"typeParameters": [
				{
					"id": 104,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExternal": true
					}
				},
				{
					"id": 105,
					"name": "Data",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExternal": true
					}
				}
			],
			"signatures": [
				{
					"id": 106,
					"name": "DatasetReducer",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExternal": true
					},
					"parameters": [
						{
							"id": 107,
							"name": "memo",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Previous state of the reduction."
									}
								]
							},
							"type": {
								"type": "reference",
								"id": 104,
								"name": "T",
								"qualifiedName": "DatasetReducer.T",
								"package": "@crawlee/core"
							}
						},
						{
							"id": 108,
							"name": "item",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Current "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " entry being processed."
									}
								]
							},
							"type": {
								"type": "reference",
								"id": 105,
								"name": "Data",
								"qualifiedName": "DatasetReducer.Data",
								"package": "@crawlee/core"
							}
						},
						{
							"id": 109,
							"name": "index",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Position of current "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "Dataset"
									},
									{
										"kind": "text",
										"text": " entry."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 104,
								"name": "T",
								"qualifiedName": "DatasetReducer.T",
								"package": "@crawlee/core"
							}
						],
						"name": "Awaitable",
						"qualifiedName": "Awaitable",
						"package": "@crawlee/core"
					}
				}
			]
		},
		{
			"id": 1100,
			"name": "ExitOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1104,
					"name": "exit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Call "
							},
							{
								"kind": "code",
								"text": "`process.exit()`"
							},
							{
								"kind": "text",
								"text": "? Defaults to true"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1664,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1664"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1103,
					"name": "exitCode",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Exit code, defaults to 0"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1662,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1662"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1101,
					"name": "statusMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Exit with given status message"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1655,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1655"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1102,
					"name": "timeoutSecs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Amount of time, in seconds, to wait for all event handlers to finish before exiting the process."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "30"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1660,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1660"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1104,
						1103,
						1101,
						1102
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1653,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1653"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 1049,
					"name": "MainOptions"
				}
			]
		},
		{
			"id": 1047,
			"name": "InitOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1048,
					"name": "storage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1511,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1511"
						}
					],
					"type": {
						"type": "reference",
						"name": "StorageClient",
						"qualifiedName": "StorageClient",
						"package": "@crawlee/types"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1048
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1510,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1510"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 1049,
					"name": "MainOptions"
				}
			]
		},
		{
			"id": 228,
			"name": "KeyConsumer",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExternal": true
			},
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
					"line": 352,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 229,
					"name": "KeyConsumer",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExternal": true
					},
					"parameters": [
						{
							"id": 230,
							"name": "key",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Current "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore"
									},
									{
										"kind": "text",
										"text": " key being processed."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 231,
							"name": "index",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Position of the current key in "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 232,
							"name": "info",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Information about the current "
									},
									{
										"kind": "inline-tag",
										"tag": "@apilink",
										"text": "KeyValueStore"
									},
									{
										"kind": "text",
										"text": " entry."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 233,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExternal": true
									},
									"children": [
										{
											"id": 234,
											"name": "size",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Size of the value associated with the current key in bytes."
													}
												]
											},
											"sources": [
												{
													"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
													"line": 360,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												234
											]
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
											"line": 359,
											"character": 39
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Awaitable",
						"qualifiedName": "Awaitable",
						"package": "@crawlee/core"
					}
				}
			]
		},
		{
			"id": 241,
			"name": "KeyValueStoreIteratorOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 242,
					"name": "exclusiveStartKey",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "All keys up to this one (including) are skipped from the result."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 378,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						242
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
					"line": 374,
					"character": 17
				}
			]
		},
		{
			"id": 235,
			"name": "KeyValueStoreOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 238,
					"name": "client",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 366,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "StorageClient",
						"qualifiedName": "StorageClient",
						"package": "@crawlee/types"
					}
				},
				{
					"id": 236,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 364,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 237,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 365,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						238,
						236,
						237
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
					"line": 363,
					"character": 17
				}
			]
		},
		{
			"id": 306,
			"name": "LoggerOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 313,
					"name": "data",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Additional data to be added to each log line."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 23,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"qualifiedName": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 307,
					"name": "level",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Sets the log level to the given value, preventing messages from less important log levels\nfrom being printed to the console. Use in conjunction with the "
							},
							{
								"kind": "code",
								"text": "`log.LEVELS`"
							},
							{
								"kind": "text",
								"text": " constants."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 8,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 312,
					"name": "logger",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Logger implementation to be used. Default one is log.LoggerText to log messages as easily readable\nstrings. Optionally you can use "
							},
							{
								"kind": "code",
								"text": "`log.LoggerJson`"
							},
							{
								"kind": "text",
								"text": " that formats each log line as a JSON."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 21,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 322,
						"name": "Logger",
						"qualifiedName": "Logger",
						"package": "@apify/log"
					}
				},
				{
					"id": 308,
					"name": "maxDepth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Max depth of data object that will be logged. Anything deeper than the limit will be stripped off."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 10,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 309,
					"name": "maxStringLength",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Max length of the string to be logged. Longer strings will be truncated."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 12,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 310,
					"name": "prefix",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Prefix to be prepended the each logged line."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 14,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 311,
					"name": "suffix",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Suffix that will be appended the each logged line."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@apify/log/log.d.ts",
							"line": 16,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						313,
						307,
						312,
						308,
						309,
						310,
						311
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@apify/log/log.d.ts",
					"line": 3,
					"character": 17
				}
			]
		},
		{
			"id": 1049,
			"name": "MainOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1053,
					"name": "exit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Call "
							},
							{
								"kind": "code",
								"text": "`process.exit()`"
							},
							{
								"kind": "text",
								"text": "? Defaults to true"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1664,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1664"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1104,
						"name": "ExitOptions.exit"
					}
				},
				{
					"id": 1052,
					"name": "exitCode",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Exit code, defaults to 0"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1662,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1662"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1103,
						"name": "ExitOptions.exitCode"
					}
				},
				{
					"id": 1050,
					"name": "statusMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Exit with given status message"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1655,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1655"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1101,
						"name": "ExitOptions.statusMessage"
					}
				},
				{
					"id": 1054,
					"name": "storage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1511,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1511"
						}
					],
					"type": {
						"type": "reference",
						"name": "StorageClient",
						"qualifiedName": "StorageClient",
						"package": "@crawlee/types"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1048,
						"name": "InitOptions.storage"
					}
				},
				{
					"id": 1051,
					"name": "timeoutSecs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Amount of time, in seconds, to wait for all event handlers to finish before exiting the process."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "30"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1660,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1660"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1102,
						"name": "ExitOptions.timeoutSecs"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1053,
						1052,
						1050,
						1054,
						1051
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1514,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1514"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1100,
					"name": "ExitOptions"
				},
				{
					"type": "reference",
					"id": 1047,
					"name": "InitOptions"
				}
			]
		},
		{
			"id": 1096,
			"name": "MetamorphOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1098,
					"name": "build",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Tag or number of the target Actor build to metamorph into (e.g. "
							},
							{
								"kind": "code",
								"text": "`beta`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`1.2.345`"
							},
							{
								"kind": "text",
								"text": ").\nIf not provided, the run uses build tag or number from the default Actor run configuration (typically "
							},
							{
								"kind": "code",
								"text": "`latest`"
							},
							{
								"kind": "text",
								"text": ")."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1647,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1647"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1097,
					"name": "contentType",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Content type for the "
							},
							{
								"kind": "code",
								"text": "`input`"
							},
							{
								"kind": "text",
								"text": ". If not specified,\n"
							},
							{
								"kind": "code",
								"text": "`input`"
							},
							{
								"kind": "text",
								"text": " is expected to be an object that will be stringified to JSON and content type set to\n"
							},
							{
								"kind": "code",
								"text": "`application/json; charset=utf-8`"
							},
							{
								"kind": "text",
								"text": ". If "
							},
							{
								"kind": "code",
								"text": "`options.contentType`"
							},
							{
								"kind": "text",
								"text": " is specified, then "
							},
							{
								"kind": "code",
								"text": "`input`"
							},
							{
								"kind": "text",
								"text": " must be a\n"
							},
							{
								"kind": "code",
								"text": "`String`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`Buffer`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1641,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1641"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1098,
						1097
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1634,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1634"
				}
			]
		},
		{
			"id": 1105,
			"name": "OpenStorageOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1106,
					"name": "forceCloud",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If set to "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": " then the cloud storage is used even if the "
							},
							{
								"kind": "code",
								"text": "`APIFY_LOCAL_STORAGE_DIR`"
							},
							{
								"kind": "text",
								"text": "\nenvironment variable is set. This way it is possible to combine local and cloud storage."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1673,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1673"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1106
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1667,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1667"
				}
			]
		},
		{
			"id": 1348,
			"name": "ProxyConfigurationOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1353,
					"name": "apifyProxyCountry",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Same option as "
							},
							{
								"kind": "code",
								"text": "`countryCode`"
							},
							{
								"kind": "text",
								"text": " which can be used to\nconfigurate the proxy by UI input schema. You should use the "
							},
							{
								"kind": "code",
								"text": "`countryCode`"
							},
							{
								"kind": "text",
								"text": " option in your crawler code."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 56,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/proxy_configuration.ts#L56"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1352,
					"name": "apifyProxyGroups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Same option as "
							},
							{
								"kind": "code",
								"text": "`groups`"
							},
							{
								"kind": "text",
								"text": " which can be used to\nconfigurate the proxy by UI input schema. You should use the "
							},
							{
								"kind": "code",
								"text": "`groups`"
							},
							{
								"kind": "text",
								"text": " option in your crawler code."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 50,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/proxy_configuration.ts#L50"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 1351,
					"name": "countryCode",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If set and relevant proxies are available in your Apify account, all proxied requests will\nuse IP addresses that are geolocated to the specified country. For example "
							},
							{
								"kind": "code",
								"text": "`GB`"
							},
							{
								"kind": "text",
								"text": " for IPs\nfrom Great Britain. Note that online services often have their own rules for handling\ngeolocation and thus the country selection is a best attempt at geolocation, rather than\na guaranteed hit. This parameter is optional, by default, each proxied request is assigned\nan IP address from a random country. The country code needs to be a two letter ISO country code. See the\n[full list of available country codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements).\nThis parameter is optional, by default, the proxy uses all available proxy servers from all countries.\non the Apify cloud, or when using the [Apify CLI](https://github.com/apify/apify-cli)."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 44,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/proxy_configuration.ts#L44"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1350,
					"name": "groups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of proxy groups to be used by the [Apify Proxy](https://docs.apify.com/proxy).\nIf not provided, the proxy will select the groups automatically."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 31,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/proxy_configuration.ts#L31"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 1355,
					"name": "newUrlFunction",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Custom function that allows you to generate the new proxy URL dynamically. It gets the "
							},
							{
								"kind": "code",
								"text": "`sessionId`"
							},
							{
								"kind": "text",
								"text": " as a parameter\nand should always return stringified proxy URL. Can be asynchronous.\nThis function is used to generate the URL when "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "ProxyConfiguration.newUrl"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "ProxyConfiguration.newProxyInfo"
							},
							{
								"kind": "text",
								"text": " is called."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/proxy_configuration.d.ts",
							"line": 16,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "ProxyConfigurationFunction",
						"qualifiedName": "ProxyConfigurationFunction",
						"package": "@crawlee/core"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreProxyConfigurationOptions.newUrlFunction"
					}
				},
				{
					"id": 1349,
					"name": "password",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "User's password for the proxy. By default, it is taken from the "
							},
							{
								"kind": "code",
								"text": "`APIFY_PROXY_PASSWORD`"
							},
							{
								"kind": "text",
								"text": "\nenvironment variable, which is automatically set by the system when running the Actors."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 25,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/proxy_configuration.ts#L25"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1354,
					"name": "proxyUrls",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of custom proxy URLs to be rotated.\nCustom proxies are not compatible with Apify Proxy and an attempt to use both\nconfiguration options will cause an error to be thrown on initialize."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/proxy_configuration.d.ts",
							"line": 10,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreProxyConfigurationOptions.proxyUrls"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1353,
						1352,
						1351,
						1350,
						1355,
						1349,
						1354
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/proxy_configuration.ts",
					"line": 20,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/proxy_configuration.ts#L20"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ProxyConfigurationOptions",
					"qualifiedName": "ProxyConfigurationOptions",
					"package": "@crawlee/core"
				}
			]
		},
		{
			"id": 1356,
			"name": "ProxyInfo",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The main purpose of the ProxyInfo object is to provide information\nabout the current proxy connection used by the crawler for the request.\nOutside of crawlers, you can get this object by calling "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "ProxyConfiguration.newProxyInfo"
					},
					{
						"kind": "text",
						"text": ".\n\n**Example usage:**\n\n"
					},
					{
						"kind": "code",
						"text": "```javascript\n\nconst proxyConfiguration = await Actor.createProxyConfiguration({\n  groups: ['GROUP1', 'GROUP2'] // List of Apify Proxy groups\n  countryCode: 'US',\n});\n\n// Getting proxyInfo object by calling class method directly\nconst proxyInfo = proxyConfiguration.newProxyInfo();\n\n// In crawler\nconst crawler = new CheerioCrawler({\n  // ...\n  proxyConfiguration,\n  requestHandler({ proxyInfo }) {\n      // Getting used proxy URL\n      const proxyUrl = proxyInfo.url;\n\n      // Getting ID of used Session\n      const sessionIdentifier = proxyInfo.sessionId;\n  }\n})\n\n```"
					}
				]
			},
			"children": [
				{
					"id": 1358,
					"name": "countryCode",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If set and relevant proxies are available in your Apify account, all proxied requests will\nuse IP addresses that are geolocated to the specified country. For example "
							},
							{
								"kind": "code",
								"text": "`GB`"
							},
							{
								"kind": "text",
								"text": " for IPs\nfrom Great Britain. Note that online services often have their own rules for handling\ngeolocation and thus the country selection is a best attempt at geolocation, rather than\na guaranteed hit. This parameter is optional, by default, each proxied request is assigned\nan IP address from a random country. The country code needs to be a two letter ISO country code. See the\n[full list of available country codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements).\nThis parameter is optional, by default, the proxy uses all available proxy servers from all countries."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 108,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/proxy_configuration.ts#L108"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1357,
					"name": "groups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of proxy groups to be used by the [Apify Proxy](https://docs.apify.com/proxy).\nIf not provided, the proxy will select the groups automatically."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 96,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/proxy_configuration.ts#L96"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 1363,
					"name": "hostname",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hostname of your proxy."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/proxy_configuration.d.ts",
							"line": 68,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreProxyInfo.hostname"
					}
				},
				{
					"id": 1359,
					"name": "password",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "User's password for the proxy. By default, it is taken from the "
							},
							{
								"kind": "code",
								"text": "`APIFY_PROXY_PASSWORD`"
							},
							{
								"kind": "text",
								"text": "\nenvironment variable, which is automatically set by the system when running the Actors\non the Apify cloud, or when using the [Apify CLI](https://github.com/apify/apify-cli)."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/proxy_configuration.ts",
							"line": 115,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/proxy_configuration.ts#L115"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"overwrites": {
						"type": "reference",
						"name": "CoreProxyInfo.password"
					}
				},
				{
					"id": 1364,
					"name": "port",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Proxy port."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/proxy_configuration.d.ts",
							"line": 72,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreProxyInfo.port"
					}
				},
				{
					"id": 1360,
					"name": "sessionId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The identifier of used "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "Session"
							},
							{
								"kind": "text",
								"text": ", if used."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/proxy_configuration.d.ts",
							"line": 52,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreProxyInfo.sessionId"
					}
				},
				{
					"id": 1361,
					"name": "url",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The URL of the proxy."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/proxy_configuration.d.ts",
							"line": 56,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreProxyInfo.url"
					}
				},
				{
					"id": 1362,
					"name": "username",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Username for the proxy."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/proxy_configuration.d.ts",
							"line": 60,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "CoreProxyInfo.username"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1358,
						1357,
						1363,
						1359,
						1364,
						1360,
						1361,
						1362
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/proxy_configuration.ts",
					"line": 91,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/proxy_configuration.ts#L91"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ProxyInfo",
					"qualifiedName": "ProxyInfo",
					"package": "@crawlee/core"
				}
			]
		},
		{
			"id": 217,
			"name": "QueueOperationInfo",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExternal": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A helper class that is used to report results from various\n"
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "RequestQueue"
					},
					{
						"kind": "text",
						"text": " functions as well as "
					},
					{
						"kind": "inline-tag",
						"tag": "@apilink",
						"text": "enqueueLinks"
					},
					{
						"kind": "text",
						"text": "."
					}
				]
			},
			"children": [
				{
					"id": 220,
					"name": "requestId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The ID of the added request"
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/types/storages.d.ts",
							"line": 14,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 219,
					"name": "wasAlreadyHandled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates if request was already marked as handled."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/types/storages.d.ts",
							"line": 12,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 218,
					"name": "wasAlreadyPresent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates if request was already present in the queue."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/types/storages.d.ts",
							"line": 10,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						220,
						219,
						218
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/types/storages.d.ts",
					"line": 8,
					"character": 17
				}
			]
		},
		{
			"id": 239,
			"name": "RecordOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 240,
					"name": "contentType",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Specifies a custom MIME content type of the record."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
							"line": 372,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						240
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/key_value_store.d.ts",
					"line": 368,
					"character": 17
				}
			]
		},
		{
			"id": 221,
			"name": "RequestQueueOperationOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 222,
					"name": "forefront",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If set to "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": ":\n  - while adding the request to the queue: the request will be added to the foremost position in the queue.\n  - while reclaiming the request: the request will be placed to the beginning of the queue, so that it's returned\n  in the next call to "
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "RequestQueue.fetchNextRequest"
							},
							{
								"kind": "text",
								"text": ".\nBy default, it's put to the end of the queue."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 63,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						222
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
					"line": 54,
					"character": 17
				}
			]
		},
		{
			"id": 223,
			"name": "RequestQueueOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 226,
					"name": "client",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 337,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "StorageClient",
						"qualifiedName": "StorageClient",
						"package": "@crawlee/types"
					}
				},
				{
					"id": 224,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 335,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 225,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 336,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 227,
					"name": "proxyConfiguration",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Used to pass the proxy configuration for the "
							},
							{
								"kind": "code",
								"text": "`requestsFromUrl`"
							},
							{
								"kind": "text",
								"text": " objects.\nTakes advantage of the internal address rotation and authentication process.\nIf undefined, the "
							},
							{
								"kind": "code",
								"text": "`requestsFromUrl`"
							},
							{
								"kind": "text",
								"text": " requests will be made without proxy."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
							"line": 343,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "ProxyConfiguration",
						"qualifiedName": "ProxyConfiguration",
						"package": "@crawlee/core"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						226,
						224,
						225,
						227
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@crawlee/core/storages/request_queue.d.ts",
					"line": 334,
					"character": 17
				}
			]
		},
		{
			"id": 1091,
			"name": "WebhookOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1092,
					"name": "eventTypes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Array of event types, which you can set for Actor run, see\nthe [Actor run events](https://docs.apify.com/webhooks/events#actor-run) in the Apify doc."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1608,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1608"
						}
					],
					"type": {
						"type": "typeOperator",
						"operator": "readonly",
						"target": {
							"type": "array",
							"elementType": {
								"type": "reference",
								"name": "WebhookEventType",
								"qualifiedName": "WebhookEventType",
								"package": "apify-client"
							}
						}
					}
				},
				{
					"id": 1095,
					"name": "idempotencyKey",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Idempotency key enables you to ensure that a webhook will not be added multiple times in case of\nan Actor restart or other situation that would cause the "
							},
							{
								"kind": "code",
								"text": "`addWebhook()`"
							},
							{
								"kind": "text",
								"text": " function to be called again.\nWe suggest using the Actor run ID as the idempotency key. You can get the run ID by calling\n"
							},
							{
								"kind": "inline-tag",
								"tag": "@apilink",
								"text": "Actor.getEnv"
							},
							{
								"kind": "text",
								"text": " function."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1631,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1631"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1094,
					"name": "payloadTemplate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Payload template is a JSON-like string that describes the structure of the webhook POST request payload.\nIt uses JSON syntax, extended with a double curly braces syntax for injecting variables "
							},
							{
								"kind": "code",
								"text": "`{{variable}}`"
							},
							{
								"kind": "text",
								"text": ".\nThose variables are resolved at the time of the webhook's dispatch, and a list of available variables with their descriptions\nis available in the [Apify webhook documentation](https://docs.apify.com/webhooks).\nIf "
							},
							{
								"kind": "code",
								"text": "`payloadTemplate`"
							},
							{
								"kind": "text",
								"text": " is omitted, the default payload template is used\n([view docs](https://docs.apify.com/webhooks/actions#payload-template))."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1623,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1623"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1093,
					"name": "requestUrl",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "URL which will be requested using HTTP POST request, when Actor run will reach the set event type."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1613,
							"character": 4,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1613"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						1092,
						1095,
						1094,
						1093
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1603,
					"character": 17,
					"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1603"
				}
			]
		},
		{
			"id": 1066,
			"name": "UserFunc",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/apify/src/actor.ts",
					"line": 1577,
					"character": 12,
					"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1577"
				}
			],
			"typeParameters": [
				{
					"id": 1069,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1067,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/apify/src/actor.ts",
							"line": 1577,
							"character": 36,
							"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/actor.ts#L1577"
						}
					],
					"signatures": [
						{
							"id": 1068,
							"name": "__type",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1069,
										"name": "T"
									}
								],
								"name": "Awaitable",
								"qualifiedName": "Awaitable",
								"package": "@crawlee/types"
							}
						}
					]
				}
			}
		},
		{
			"id": 243,
			"name": "log",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExternal": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "node_modules/@apify/log/index.d.ts",
					"line": 8,
					"character": 14
				}
			],
			"type": {
				"type": "reference",
				"id": 244,
				"name": "Log",
				"qualifiedName": "Log",
				"package": "@apify/log"
			}
		}
	],
	"groups": [
		{
			"title": "Enumerations",
			"children": [
				314
			]
		},
		{
			"title": "Classes",
			"children": [
				792,
				714,
				1193,
				1,
				1469,
				244,
				322,
				451,
				581,
				1422,
				1365,
				122
			],
			"categories": [
				{
					"title": "CATEGORY",
					"children": [
						792,
						714,
						1193,
						1469,
						244,
						322,
						451,
						581,
						1422
					]
				},
				{
					"title": "Result Stores",
					"children": [
						1
					]
				},
				{
					"title": "Scaling",
					"children": [
						1365
					]
				},
				{
					"title": "Sources",
					"children": [
						122
					]
				}
			]
		},
		{
			"title": "Interfaces",
			"children": [
				1087,
				1107,
				782,
				1055,
				1070,
				1079,
				1134,
				92,
				114,
				73,
				82,
				97,
				110,
				103,
				1100,
				1047,
				228,
				241,
				235,
				306,
				1049,
				1096,
				1105,
				1348,
				1356,
				217,
				239,
				221,
				223,
				1091
			]
		},
		{
			"title": "Type Aliases",
			"children": [
				1066
			]
		},
		{
			"title": "Variables",
			"children": [
				243
			]
		}
	],
	"sources": [
		{
			"fileName": "packages/apify/src/index.ts",
			"line": 1,
			"character": 0,
			"url": "https://github.com/apify/apify-sdk-js/blob/1e586e64f6/packages/apify/src/index.ts#L1"
		}
	]
}
